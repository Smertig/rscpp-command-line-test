{
    "v1": [
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1684603737.956203,
            "elapsed_time": 1686.055385351181,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": null
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1684610077.385662,
            "elapsed_time": 4011.8417756557465,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": null
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684617782.754098,
            "elapsed_time": 4125.218888044357,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684632365.571352,
            "elapsed_time": 4131.389887332916,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684646507.460228,
            "elapsed_time": 4050.072568655014,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684660783.781127,
            "elapsed_time": 3890.4404566287994,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "287dd0142c08caad5b32628f3842dfd5d5c59d03",
            "commit_message": "[X86][MC] Simplify some code in X86AsmBackend.cpp, NFCI\n",
            "commit_timestamp": 1684647829.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684675244.317621,
            "elapsed_time": 3994.0369441509247,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8b1727f8d9104df5ced4bdfdc065dea85ff84baf",
            "commit_message": "[NFC] remove duplicated dash in release note for #62447\n",
            "commit_timestamp": 1684661176.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684689611.651695,
            "elapsed_time": 3978.406282186508,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3b272039a88cc9952e5bad71b6b02a62b2c22098",
            "commit_message": "[ubsan][test] Unsupport function.cpp in Android non-x86 on sanitizer-x86_64-linux-android after D148573\n\nThe qemu environment cannot run an executable with a link-time shared\nobject built during the test?\n```\nInput was:\n<<<<<<\n            1: CANNOT LINK EXECUTABLE \"/data/local/tmp/Output/var/lib/buildbot/sanitizer-buildbot6/sanitizer-x86_64-linux-android/build/compiler_rt_build_android_aarch64/test/ubsan/Standalone-aarch64/TestCases/TypeCheck/Function/Output/function.cpp.tmp\": library \"/var/lib/buildbot/sanitizer-buildbot6/sanitizer-x86_64-linux-android/build/compiler_rt_build_android_aarch64/test/ubsan/Standalone-aarch64/TestCases/TypeCheck/Function/Output/function.cpp.tmp-so.so\" not found: needed by main executable\n```\n",
            "commit_timestamp": 1684684234.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684704257.900953,
            "elapsed_time": 3932.433120250702,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4aa1cadf3c67c61b394051630896f06f35b562ca",
            "commit_message": "[Driver] Disable -fsanitize=function for ppc64be after D148573\n\nELFObjectWriter.cpp may report\n```\nerror: Cannot represent a difference across sections\n```\non some ppc64be configurations, likely related to some interaction\nbetween the obsoleted ELFv1 and MC.\nUnfortunately I cannot reproduce this locally with --target=powerpc64-linux-gnu.\n",
            "commit_timestamp": 1684685680.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684718710.596186,
            "elapsed_time": 4178.199296951294,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f81ccb520927247b02708873567428d6988e2a07",
            "commit_message": "[ExecutionEngine] Re-enable JIT tests on PowerPC.\n\nThese were previously re-enabled in d771f54107c, but had to be disabled again\nin 2060a72b4d7 due to test failures.\n\nThis is a next step to landing https://reviews.llvm.org/D148192, which adds\na skeleton JITLink backend for PowerPC.\n\nThe fixes for those failures were (1) to explicitly specify IsLittleEndian =\ntrue for the MachO YAML testcases, (2) disable some example tests for examples\nthat aren't supported on PowerPC yet, and (3) fixing the endianness of a\nrelocation read/write (for ELF R_AARCH64_TSTBR14) in RuntimeDyldELF.\n",
            "commit_timestamp": 1684710726.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684733689.769472,
            "elapsed_time": 4721.939621925354,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f6fb639c76ce255e2f5b3e2c8550270243e7e7ab",
            "commit_message": "Fix memoery leak in MLIR use-def list ordering test\n",
            "commit_timestamp": 1684725090.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684747398.519781,
            "elapsed_time": 3987.354939222336,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5e92298f76875e1a89ad58bab042cd7abe9fc004",
            "commit_message": "[2/11][POC][Clang][RISCV] Define RVV tuple types\n\nFor the cover letter of this patch-set, please checkout D146872.\n\nDepends on D146872.\n\nThis is the 2nd patch of the patch-set. This patch originates from\nD97264. This patch further allows local variable declaration and\nfunction parameter passing by adjustment in clang lowering.\n\nTest cases are provided to demonstrate the LLVM IR generated.\n\nNote: This patch is currently only a proof-of-concept with only a\nsingle RVV tuple type declared here, the rest will be added when\nthe concept of this patch-set is accepted.\n\nAuthored-by: eop Chen <eop.chen@sifive.com>\nCo-Authored-by: Hsiangkai Wang <kai.wang@sifive.com>\n\nReviewed By: craig.topper\n\nDifferential Revision: https://reviews.llvm.org/D146873\n",
            "commit_timestamp": 1684741840.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684763171.460235,
            "elapsed_time": 5403.340304374695,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c7e06ce4b74789818155e0cc932f8dad4a899312",
            "commit_message": "[MLIR][LLVM] Allow inlining llvm.intr.assume.\n\nThis operation is not marked pure because it needs to survive DCE, but\nis otherwise safe to inline.\n\nReviewed By: Dinistro\n\nDifferential Revision: https://reviews.llvm.org/D151070\n",
            "commit_timestamp": 1684756831.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684776568.040729,
            "elapsed_time": 4424.899654865265,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "986cbd80d1dc838c61abff24b8d7ac28dcf4ac2a",
            "commit_message": "[clang][AST] TextNodeDumper should not evaluate the initializer of constexpr variable declaration when it has a dependent type\n\n`TextNodeDumper` enabed through `-ast-dump` flag should not evlauate the initializer when it visits a constexpr `VarDecl` node if it has a dependent type.\n\nI found a crashing case fixed by this change and added it as a test case.\n`template <typename T> constexpr T call_init(0);`\nLink: https://godbolt.org/z/3bG9Pjj5E\n\nThis is a fix for the regression caused by D146358\n\nDifferential Revision: https://reviews.llvm.org/D151033\n",
            "commit_timestamp": 1684771058.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684791348.144096,
            "elapsed_time": 4673.364530086517,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ca2666548085b3f4e61b1722272c4fa0eadd2d4e",
            "commit_message": "Revert \"[PostOrderIterator] Store end iterator (NFC)\"\n\nThis reverts commit 50f0ee8fbfc1f597ae7d2d49e0996c4338e5652f.\n\nThis breaks the bots.\n\nhttps://green.lab.llvm.org/green/view/LLDB/job/lldb-cmake/lastFailedBuild/consoleFull#-1141050806a1ca8a51-895e-46c6-af87-ce24fa4cd561\n",
            "commit_timestamp": 1684785683.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684805785.035755,
            "elapsed_time": 4676.531354188919,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c1fe1474d27f6fe7b8e5bfedcc9066e9a90ad85e",
            "commit_message": "[llvm-mca] Print InstructionInfoView using Instrument information.\n\nPrevious reports calculated the overall report using Instrument\ninformation but did not print out per-instruction data using\nInstrument information. This patch fixes that.\n\nDifferential Revision: https://reviews.llvm.org/D150459\n",
            "commit_timestamp": 1684798879.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684820189.376108,
            "elapsed_time": 4728.655710220337,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "61bc3ada1f9088a852126d5556f837f24683160b",
            "commit_message": "[test] precommit tests for D141188\n",
            "commit_timestamp": 1684812626.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684834595.853444,
            "elapsed_time": 4869.501857280731,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f5af7d2d987b0b16d7a641b7aa9086a75d533944",
            "commit_message": "Revert \"[clang][ExprConstant] fix __builtin_object_size for flexible array members\"\n\nThis reverts commit 57c5c1ab2a188b7962c9de5ac0f95e3c7441940a.\n\nCauses an assertion failure: https://reviews.llvm.org/D150892#4363080\n",
            "commit_timestamp": 1684828778.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684848898.505857,
            "elapsed_time": 4677.364478588104,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "68baaca61dfad1179a61d99cbf0fe23a6894849d",
            "commit_message": "[clang][dataflow] Use `Strict` accessors in comma operator and no-op cast.\n\nThis patch is part of the ongoing migration to strict handling of value\ncategories (see https://discourse.llvm.org/t/70086 for details).\n\nDepends On D150775\n\nReviewed By: gribozavr2\n\nDifferential Revision: https://reviews.llvm.org/D150776\n",
            "commit_timestamp": 1684843080.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684864505.797193,
            "elapsed_time": 5698.660797357559,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e826762a0826c11dc62696e46068c61c57a00aa9",
            "commit_message": "[libc] More efficiently send bytes via `send_n` and `recv_n`\n\nCurrently we have the `send_n` and `recv_n` routines to stream data,\nsuch as a string to print, to the other side. The first operation is to\nsend the size so the other side knows the number of bytes to recieve.\nHowever, this wasted 56 bytes that could've been sent. This meant that\nsmall values, like the arguments to a function to call on the host for\nexample, needed to perform an extra send. This patch sends the first 56\nbytes in the first packet and continues if necessary.\n\nDepends on D150992\n\nReviewed By: JonChesterfield\n\nDifferential Revision: https://reviews.llvm.org/D151041\n",
            "commit_timestamp": 1684857587.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684877458.360438,
            "elapsed_time": 4645.468456268311,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4edaacf04baa44b07394319781aacfb39311d498",
            "commit_message": "[MLIR] Update Bazel build to remove references to PybindUtils.cpp\n\nThis file has been removed in https://reviews.llvm.org/D151167.\n\nReviewed By: aartbik\n\nDifferential Revision: https://reviews.llvm.org/D151242\n",
            "commit_timestamp": 1684870822.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684892023.345853,
            "elapsed_time": 4659.00946521759,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f6c4808d95221a5838e14474d95c6fe85bb1488a",
            "commit_message": "[compiler-rt] Allow 64-bit sanitizer allocator to be used if using RISCV64 and Fuchsia\n\nThis way, Fuchsia can use the 64-bit allocator settings in D151157 without changing the default behavior for others.\n\nDifferential Revision: https://reviews.llvm.org/D151159\n",
            "commit_timestamp": 1684885109.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684906443.506249,
            "elapsed_time": 4633.001081466675,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "597dd1f91d9f3823e4184f1fe73d8125fa16c026",
            "commit_message": "[NFC] Fix the warning for dangling pointer for c0d6f85e3ae8bc\n\nThe bot notes a warning-converted-error for the dangling pointer. And\nthe patch fixes that.\n",
            "commit_timestamp": 1684899775.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684920716.360784,
            "elapsed_time": 4597.1598863601685,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "82082b7da075b9f3571ab5b26248578e6d98ee52",
            "commit_message": "[LVI] Don't compute range on not guaranteed not to be undef condition in SelectInst\n\nFixes:https://github.com/llvm/llvm-project/issues/62901\n\nReviewed By: nikic\n\nDifferential Revision: https://reviews.llvm.org/D151295\n",
            "commit_timestamp": 1684915333.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684935438.486588,
            "elapsed_time": 4719.073246240616,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "44bb442fd5be3860e7819cb216621b5ea59970c3",
            "commit_message": "[lldb][DataFormatter] Add dereference support to libstdcpp std::shared_ptr formatter\n\nThis mimicks the implementation of the libstdcpp std::unique_ptr\nformatter.\n\nThis has been attempted several years ago in\n`0789722d85cf1f1fdbe2ffb2245ea0ba034a9f94` but was reverted in\n`e7dd3972094c2f2fb42dc9d4d5344e54a431e2ce`.\n\nThe difference to the original patch is that we now maintain\na `$$dereference$$` member and we only store weak pointers\nto the other children inside the synthetic frontend. This is\nwhat the libc++ formatters do to prevent the recursion mentioned\nin the revert commit.\n",
            "commit_timestamp": 1684929671.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684950882.910849,
            "elapsed_time": 5546.6628677845,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f74bb326949aec0cac8e54ff00fc081f746ff35d",
            "commit_message": "AMDGPU: Add some new tests for class undef/poison handling\n",
            "commit_timestamp": 1684943679.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684964186.130574,
            "elapsed_time": 4747.4885766506195,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6006d43e2d7dda56844f1c3867baa981cfefb8ea",
            "commit_message": "LLVM_FALLTHROUGH => [[fallthrough]]. NFC\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D150996\n",
            "commit_timestamp": 1684957210.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684978460.44625,
            "elapsed_time": 4591.600812673569,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5f84641901398dd96d6097a57ad84670bdc7476f",
            "commit_message": "[Clang][RISCV] Update vaadd.c test case with new script. NFC\n",
            "commit_timestamp": 1684973019.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684994956.076661,
            "elapsed_time": 6546.936139822006,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4374026d6da23dbb6b9c2e4fca65cdf198ee1e0f",
            "commit_message": "[MIPS] Check if register is non-null before calling isSuperOrSubRegisterEq (NFCI)\n\nD151036 adds an assertions that prohibits iterating over sub- and\nsuper-registers of a null register. This is already the case when\niterating over register units of a null register, and worked by\naccident for sub- and super-registers.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D151288\n",
            "commit_timestamp": 1684985621.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685007345.8991,
            "elapsed_time": 4728.322458267212,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0c23dc20bcfbe77b42fc3515c41432e4a2f5ce3f",
            "commit_message": "Reapply [SCEV] Replace IsAvailableOnEntry with block disposition\n\nThis exposed an issue in SCEVExpander/LCSSA, which has been fixed\nin D150681.\n\n-----\n\nAs far as I understand, the IsAvailableOnEntry() function basically\nimplements the same functionality as the properlyDominates() block\ndisposition. The primary difference (apart from a weaker\nimplementation) seems to be in this comment at the top:\n\n    // Checks if the SCEV S is available at BB.  S is considered available at BB\n    // if S can be materialized at BB without introducing a fault.\n\nHowever, I don't really understand why there would be such a\nrequirement. It's my understanding that SCEV explicitly does not\ncare about trapping udiv instructions itself, and it's the job of\nSCEVExpander's isSafeToExpand() to make sure these don't get\nexpanded if they may trap.\n\nDifferential Revision: https://reviews.llvm.org/D149344\n",
            "commit_timestamp": 1685001738.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685021665.65852,
            "elapsed_time": 4722.008229255676,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4c46c7cef3791a410cf226f7f005231be35dd8b9",
            "commit_message": "[sanitizer_common] Fix StripFunctionName() on Windows\n\nAlso implement StripFunctionName() on Windows to properly strip\ninterceptor prefixes.\n\nReported-by: https://lab.llvm.org/buildbot#builders/127/builds/48810\n",
            "commit_timestamp": 1685013547.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685035943.928274,
            "elapsed_time": 4611.545478582382,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6f026ff029853431ee535e6a361edd059da3ab27",
            "commit_message": "Discussion: Darwin Sanitizers Stable ABI\n\n# Darwin Sanitizers Stable ABI\n\nWe wish to make it possible to include the AddressSanitizer (ASan) runtime implementation in OSes and for this we need a stable ASan ABI. Based on previous discussions about this topic, our understanding is that freezing the present ABI would impose an excessive burden on other sanitizer developers and for unrelated platforms. Therefore, we propose adding a secondary stable ABI for our use and anyone else in the community seeking the same. We believe that we can define a stable ABI with minimal burden on the community, expecting only to keep existing tests running and implementing stubs when new features are added. We are okay with trading performance for stability with no impact for existing users of ASan while minimizing the maintenance burden for ASan maintainers. We wish to commit this functionality to the LLVM project to maintain it there. This new and stable ABI will abstract away the implementation details allowing new and novel approaches to ASan for developers, researchers and others.\n\n## Details\n\nRather than adding a lot of conditional code to the LLVM instrumentation phase, which would incur excessive complexity and maintenance cost of adding conditional code into all places that emit a runtime call, we propose a \u201cshim\u201d layer which will map the unstable ABI to the stable ABI:\n\n* A static library (.a library) shim that maps the existing ASan ABI to a generalized, smaller and stable ABI. The library would implement the __asan functions and call into the new ABI. For example:\n    * `void __asan_load1(uptr p) { __asan_abi_loadn(p, 1, true); }`\n    * `void __asan_load2(uptr p) { __asan_abi_loadn(p, 2, true); }`\n    * `void __asan_noabort_load16(uptr p) { __asan_abi_loadn(p, 16, false); }`\n    * `void __asan_poison_cxx_array_cookie(uptr p) { __asan_abi_pac(p); }`\n* This \u201cshim\u201d library would only be used by people who opt in: A compilation flag in the Clang driver will be used to gate the use of the stable ABI workflow.\n* Utilize the existing ability for the ASan instrumentation to prefer runtime calls instead of inlined direct shadow memory accesses.\n* Pursue (under the new driver flag) a better separation of abstraction and implementation with:\n    * LLVM instrumentation: Calling out for all poisoning, checking and unpoisoning.\n    * Runtime: Implementing the stable ABI and being responsible of implementation details of the shadow memory.\n\n## Maintenance\n\nOur aim is that the maintenance burden on the sanitizer developer community be negligible. Stable ABI tests will always pass for non-Darwin platforms. Changes to the existing ABI which would require a change to the shim have been infrequent as the ASan ABI is already relatively stable. Rarely, a change that impacts the contract between LLVM and the shim will occur. Among such foreseeable changes are: 1) changes to a function signature, 2) additions of new functions, or 3) deprecation of an existing function. Following are some examples of reasonable responses to those changes:\n\n* Example: An existing ABI function is changed to return the input parameter on success or NULL on failure. In this scenario, a reasonable change to the shim would be to modify the function signature appropriately and to simply guess at a common-sense implementation.\n    * `uptr __asan_load1(uptr p) { __asan_abi_loadn(p, 1, true); return p; }`\n* Example: An additional function is added for performance reasons. It has a very similar function signature to other similarly named functions and logically is an extension of that same pattern. In this case it would make sense to apply the same logic as the existing entry points:\n    * `void __asan_load128(uptr p) { __asan_abi_loadn(p, 128, true); }`\n* Example: An entry point is added to the existing ABI for which there is no obvious stable ABI implementation: In this case, doing nothing in a no-op stub would be acceptable, assuming existing features of ASan can still work without an actual implementation of this new function.\n    * `void __asan_prefetch(uptr p) { }`\n* Example: An entrypoint in the existing ABI is deprecated and/or deleted:\n    * (Delete the entrypoint from the shim.)\n\nWe\u2019re looking for buy-in for this level of support.\n\n(Note: Upon acceptance of the general concepts herein, we will add a controlling clang flag, cmake integration, contract for the stable ABI, and the appropriate test infrastructure.)\n\nReviewed By: eugenis, vitalybuka, MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D143675\n",
            "commit_timestamp": 1685030261.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685051566.796912,
            "elapsed_time": 5641.269615411758,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "91689744477843a588f701fdc598ccff3cbbc8fb",
            "commit_message": "Reapply: [clang][diagnostics] Adding -Wpacked-non-pod to -Wall\n\nUsers will be informed when non-POD is not packed using -Wall. This\nis also consistent with GCC.\n\nFixes PR#60832.\n\nDifferential Revision: https://reviews.llvm.org/D151162\n",
            "commit_timestamp": 1685044920.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685064809.232041,
            "elapsed_time": 4616.838412761688,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e86defd588e79de60d19a101a43b0c8c86dff37b",
            "commit_message": "[mlir][tosa] Add type checking traits to the appropriate ops\n\nAdd the trait `SameOperandsAndResultElementType` and\n`SameOperandsElementType` to verify ops that are known\nto have the same input and output type rather than generate\nan invalid tosa IR with mixed data types like:\n\n  \"tosa.add\"(%0, %1) : (tensor<nxbf16>, tensor<nxf32>) -> tensor<nxf32>\n\nThus apply tosa.cast prior if needed.\n\nChange-Id: Ie866b84e371e3b571ec04f7abb090c216dd39c33\n\nReviewed By: jpienaar\n\nDifferential Revision: https://reviews.llvm.org/D150472\n",
            "commit_timestamp": 1685058690.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685081139.712436,
            "elapsed_time": 6316.496200084686,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bb9a0c736b57f405c6fee598ce8043d0d35a5790",
            "commit_message": "Revert \"[MLIR] Add native Bytecode support for properties\"\n\nThis reverts commit ca5a12fd69d4acf70c08f797cbffd714dd548348\nand follow-up fixes:\n\ndf34c288c428eb4b867c8075def48b3d1727d60b\n07dc906883af660780cf6d0cc1044f7e74dab83e\nab80ad0095083fda062c23ac90df84c40b4332c8\n837d1ce0dc8eec5b17255291b3462e6296cb369b\n\nThe first commit was incomplete and broken, I'll prepare a new version\nlater, in the meantime pull this work out of tree.\n",
            "commit_timestamp": 1685073751.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685093595.283524,
            "elapsed_time": 4603.9289290905,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c80fe251d869d5304448cfa3bb855c653285de7f",
            "commit_message": "[ASAN] Support memory checks on vp.gather/scatter.\n\nThe patch supports vp.gather/scatter by allowing addresses being pointer vectors.\nAnd then we just need to check each active pointer element of those pointer vectors.\n\nReviewed By: reames\n\nDifferential Revision: https://reviews.llvm.org/D149245\n",
            "commit_timestamp": 1685086120.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685107729.334311,
            "elapsed_time": 4280.759508371353,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "00480189847e89e10f6333c28d65377906316c0f",
            "commit_message": "[mlir] Make sure mlir-opt is in the list of substituted tools\n\notherwise it gets picked up from $PATH, which is not always working\nproperly.\n",
            "commit_timestamp": 1685102434.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685136952.355767,
            "elapsed_time": 4715.218818187714,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "23da2106246edd445b5eae105cbefe0493f4fd1d",
            "commit_message": "[PseudoProbe] Do not force the calliste debug loc to inlined probes from __nodebug__ functions.\n\nFor pseudo probes we would like to keep their original dwarf discriminator (either a zero or null) until the first FS-discriminator pass. The inliner is a violation of that, given that it assigns inlinee instructions with no debug info with the that of the callsite. This is being disabled in this patch.\n\nReviewed By: wenlei\n\nDifferential Revision: https://reviews.llvm.org/D151568\n",
            "commit_timestamp": 1685131216.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685151399.6484,
            "elapsed_time": 4668.837718963623,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0508ac32cfcc1a9fc5a81d16de8d418dc5a0666b",
            "commit_message": "[Vectorize] Fix a warning\n\nThis patch fixes:\n\n  llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp:1429:23:\n  error: comparison of integers of different signs: 'int' and 'const\n  size_t' (aka 'const unsigned long') [-Werror,-Wsign-compare]\n",
            "commit_timestamp": 1685145754.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685165958.637722,
            "elapsed_time": 4927.626342058182,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "273303ad66a32e5e599bef5ee18c3a9f589e530d",
            "commit_message": "[Sema] Remove unused declaration startLambdaDefinition\n\nThe corresponding function definition was removed by:\n\n  commit 93d7002dc4644b0a6f15a998dff0d55c72012e87\n  Author: Corentin Jabot <corentinjabot@gmail.com>\n  Date:   Sun Feb 6 22:58:43 2022 +0100\n",
            "commit_timestamp": 1685157563.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685179891.819798,
            "elapsed_time": 4629.475900650024,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fe01c084249969518bcd69aa2fedffc9f017f43a",
            "commit_message": "[mlir][bazel] Port for 660f714e26999d266232a1fbb02712bb879bd34e, second\nattempt.\n",
            "commit_timestamp": 1685169465.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685195384.169872,
            "elapsed_time": 5512.546324968338,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "48985f58b41a74d012bc08ba3e2c14a3eb171314",
            "commit_message": "[libc++][format][test] Adds Windows support.\n\nThese tests pass on Windows without additional changes. This has been\ntested in D150593.\n",
            "commit_timestamp": 1685188646.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685209002.740974,
            "elapsed_time": 4748.9169590473175,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1845d9de187b726dfe074218377c3d77ce43277a",
            "commit_message": "[CGP] Disable default copy ctor and copy assignment operator for InstructionRemover\n\nclass InstructionRemover manages resources such as dynamically allocated memory, it's generally a good practice to either implement a custom copy constructor or disable the default one.\n\nReviewed By: pengfei\n\nDifferential Revision: https://reviews.llvm.org/D151543\n",
            "commit_timestamp": 1685200833.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685224476.734805,
            "elapsed_time": 5881.673288106918,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cf44847b4d1edb43de7ee917ddccf7fa397c63cb",
            "commit_message": "[mlir][gpu][sparse] adding cusparse sddmm support\n\nDifferential Revision: https://reviews.llvm.org/D151279\n",
            "commit_timestamp": 1685217701.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685233012.067647,
            "elapsed_time": 4522.00386929512,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bdc2771911cb181fe0144800000b4c19d94ff52e",
            "commit_message": "[StaticAnalyzer] Remove unused declaration handleLVectorSplat\n\nThe corresponding function definition was removed by:\n\n  commit 55662b24a4755680e4fd34dc22a3dd555fdb1291\n  Author: Balazs Benics <balazs.benics@sigmatechnology.se>\n  Date:   Thu Jul 1 10:54:28 2021 +0200\n",
            "commit_timestamp": 1685224434.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685247362.556475,
            "elapsed_time": 4896.871234416962,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bdc2771911cb181fe0144800000b4c19d94ff52e",
            "commit_message": "[StaticAnalyzer] Remove unused declaration handleLVectorSplat\n\nThe corresponding function definition was removed by:\n\n  commit 55662b24a4755680e4fd34dc22a3dd555fdb1291\n  Author: Balazs Benics <balazs.benics@sigmatechnology.se>\n  Date:   Thu Jul 1 10:54:28 2021 +0200\n",
            "commit_timestamp": 1685224434.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685261705.25882,
            "elapsed_time": 4546.777031421661,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "65f40cb455f8eaf83c163793d19640b56393c1e5",
            "commit_message": "[ModuleInliner] Remove an inapplicable comment\n\nThe module inliner has its own logic in deciding the order in which\ncall sites are inlined, so the comment is inapplicable.\n",
            "commit_timestamp": 1685251597.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685276390.855926,
            "elapsed_time": 5417.11806845665,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f8536fb11e3d71d009c9002b5aa2ef32983ac7dc",
            "commit_message": "[clang][HeaderSearch] Fix implicit module when using header maps\n\nPreviously, if a header was found via in a header map, and not just remapped.\nwe wouldn't also find the module it maps to when using implicit modules (for\nmodule maps that were explicitly loaded).\n\nThis diff just updates these code paths to also locate the owning module via\n`findUsableModuleForHeader`.\n\nReviewed By: benlangmuir\n\nDifferential Revision: https://reviews.llvm.org/D103930\n",
            "commit_timestamp": 1685270991.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685290656.244879,
            "elapsed_time": 4763.871718883514,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8a4e3675d88ecd0413d89dea1e3578a4696b05da",
            "commit_message": "[Hexagon] Explicitly make vector subregs have unknown size and offset\n\nVector length depends on the HVX mode, so make the size and offset unknown\ninstead using values for some specific mode.\n",
            "commit_timestamp": 1685287963.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685305037.627622,
            "elapsed_time": 4605.88134765625,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fb250b8295b9f65590017c5b13d6de0b4f4617c1",
            "commit_message": "[clang][c++20][NFC] `ComparisonCategoryType` - updated comment, removed `std:*_equality`\n\n`weak_equality` and `strong_equality` are removed from the standard:\n- https://wg21.link/P1959R0\n- https://eel.is/c++draft/cmp.categories.pre\n\nReviewed By: rsmith\n\nDifferential Revision: https://reviews.llvm.org/D151627\n",
            "commit_timestamp": 1685301916.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685319401.256471,
            "elapsed_time": 4595.53854227066,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "53be2e0f59730671eac24c9e9ce615d20250d917",
            "commit_message": "[MLIR] NFC. JitRunner - use range-based for\n\nAddress clang-tidy warning in JitRunner.cpp. Use range-based for.\n",
            "commit_timestamp": 1685305490.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685333950.358057,
            "elapsed_time": 5953.094482898712,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b6a5aeadb5588dedc09eacc3b98b0278d6d53529",
            "commit_message": "[NFC][CLANG] Fix issue with dereference null return value in EvaluateBuiltinClassifyType()\n\nThis patch uses cast instead of dyn_cast which will assert if the type doesn't match.\n\nReviewed By: erichkeane\n\nDifferential Revision: https://reviews.llvm.org/D151469\n",
            "commit_timestamp": 1685329749.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685348190.633635,
            "elapsed_time": 4590.754618644714,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e20931b2ccd10de2fd25d9a6fbe9c166e7430f23",
            "commit_message": "[clang] Restrict Inline Builtin to non-static, non-odr linkage\n\nInline builtins have a very special behavior compared to other\nfunctions, it's better if we keep them restricted to a minimal set of\nfunctions.\n\nAdd a linkage check which prevents considering ODR definitions as inline\nbuiltins.\n\nFix #62958\n\nDifferential Revision: https://reviews.llvm.org/D148723\n",
            "commit_timestamp": 1685347338.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685362571.909074,
            "elapsed_time": 4745.620724439621,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "061e368fe213bd0701261a3e59f796c7439484fc",
            "commit_message": "[SelectionDAG] Implement soft FP legalisation for bf16 FP_EXTEND and BF16_TO_FP\n\nAs discussed in D151436, it's safe to do this as a simple shift (as is\ndone in LegalizeDAG.cpp) rather than needing a libcall. The added test\ncases for RISC-V previously just triggered an assertion.\n\nCodegen for bfloat_to_double will be slightly improved by D151434.\n\nDifferential Revision: https://reviews.llvm.org/D151563\n",
            "commit_timestamp": 1685352748.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685376737.502253,
            "elapsed_time": 3328.4386444091797,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a3a8cbffcf00bdbf19a15a070313b60c0a9ce342",
            "commit_message": "[AMDGPU][AsmParser][NFC] Refine parsing of NamedOperandU32 operands.\n\nEliminates the need for the custom code in parseCustomOperand().\n\nPart of <https://github.com/llvm/llvm-project/issues/62629>.\n\nReviewed By: dp\n\nDifferential Revision: https://reviews.llvm.org/D150980\n",
            "commit_timestamp": 1685376104.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685391438.488309,
            "elapsed_time": 4556.994585752487,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "40af06ccc7bf9989b8deb410ed78a4795c22aa73",
            "commit_message": "[clang-tidy] Update UnusedReturnValueCheck types\n\nUpdate the types for UnusedReturnValueCheck after D151383.\n\n1. Add std::errc, std:error_condition\n2. Remove `absl::Status` - it's marked as `[[nodiscard]]` anyway so it's redundant (and might create double warnings) to check it.\n\nReviewed By: PiotrZSL\n\nDifferential Revision: https://reviews.llvm.org/D151650\n",
            "commit_timestamp": 1685390552.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685406021.953417,
            "elapsed_time": 5735.7667191028595,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b936816fb305cc16d2d1cd6d424c08c39a681a32",
            "commit_message": "MLIR/Cuda: Add the appropriate \"HINTS\" on CMake find_library and mark these REQUIRED\n\nThe cmake logic to find cuda paths exposes some paths to search for the cuda\nlibrary, we need to propagate this through the call for find_library.\nThis was already done for cuSparse but not for cuda.\n\nDifferential Revision: https://reviews.llvm.org/D151645\n",
            "commit_timestamp": 1685395944.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685420073.265778,
            "elapsed_time": 4351.925969362259,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8f386ff69ab8e012c1716ae05e70fd5288435835",
            "commit_message": "[ms-inline asm] Add error check for `getAsInteger`\n\n.Imm can get lexed as a real, but a real doesn't equal to .Imm, e.g.,\n2.5 or .123e+8. We should report error for it rather than silently ignore.\n\nReviewed By: skan\n\nDifferential Revision: https://reviews.llvm.org/D151652\n",
            "commit_timestamp": 1685416857.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685434563.722161,
            "elapsed_time": 4685.979875087738,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c7592c7714c2796715e6460fc5fd19e5a930c427",
            "commit_message": "[mlir][scf] NFC - Add debug information to scf pipelining\n",
            "commit_timestamp": 1685433771.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685449104.706987,
            "elapsed_time": 4691.464245080948,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "48339d0fbbdb2ba4610173ad1e792e9c2272c887",
            "commit_message": "[CodeGen] Add pre-commit tests for D148558\n\nThis patch adds four new tests for upcoming functionality in LLVM:\n* complex-deinterleaving-add-mull-fixed-contract.ll\n* complex-deinterleaving-add-mull-scalable-contract.ll\n* complex-deinterleaving-add-mull-fixed-fast.ll\n* complex-deinterleaving-add-mull-scalable-fast.ll.\n\nThese tests were generated from the IR of vectorizable loops, which were\ncompiled from C++ code using different optimization flags in Clang. Each pair\nof tests corresponds to Neon and SVE architectures, respectively, and\neach pair contains tests compiled with -Ofast and -O3 -ffp-contract=fast\n-ffinite-math-only optimization flags.\nThe tests were stripped of nnan and ninf flags as they have no impact on the\noutput.\nThe primary objective of these tests is to show the various sequences of\ncomplex computations that may be encountered and to demonstrate the ability\nof ComplexDeinterleaving to support any ordering.\n\nDepends on D147451\n\nDifferential Revision: https://reviews.llvm.org/D148550\n",
            "commit_timestamp": 1685447399.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685463603.346701,
            "elapsed_time": 6479.250331163406,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7cdb875d4dcd5bb65708521dc121e3c969c561b9",
            "commit_message": "[mlir] silence msvc warning\n",
            "commit_timestamp": 1685462359.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685477907.417637,
            "elapsed_time": 4978.376668691635,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d81ce04587c006b6731198956c522c93d0df1050",
            "commit_message": "[Driver] Report error for unsupported -mlarge-endian/-mlittle-endian\n",
            "commit_timestamp": 1685475921.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685492346.018709,
            "elapsed_time": 4682.1873297691345,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "aaa33b6a98de2be7cdc827b13e60c103206d6461",
            "commit_message": "Fix assert \"DeclRefExpr for Decl not entered in LocalDeclMap?\"\n\nCurrently compiler assert when passing variable \"memspace\" in\nomp_init_allocator.\n\nomp_allocator_handle_t alloc=omp_init_allocator(memspace,1,traits)\n\nThe problem is memspace is not mapping to the target region.  During\nthe call to emitAllocatorInit, calls to EmitVarDecl for \"alloc\", then\nemit initialization of \"alloc\" that cause to assert.\n\nIf I understant correct, it is not necessary to emit variable\ninitialization, since \"allocator\" is private to target region.\n\nTo fix this call CGF.EmitAutoVarAlloca(allocator) instead\nCGF.EmitVarDecl(allocator).\n\nDifferential Revision: https://reviews.llvm.org/D151743\n",
            "commit_timestamp": 1685490006.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685506512.163422,
            "elapsed_time": 4526.102992534637,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0442d08fdb173d89b0779d32eb929957a344f5e6",
            "commit_message": "[clang][Sema] Improve diagnostics for auto return type\n\nCurrently when clang fails to deduce auto return type of a function,\nit does not emit any notes about why it fails. This causes difficulty\nfor users to fix such errors.\n\nActually, clang already generates the information for emitting notes\nabout the failed deduction. There is a TODO for actually emitting\nthem.\n\nThis patch tries to implement the TODO. Basically it passes the\nfailed template specialization candidate set from the point of\nspecialization failure back to the point where the deduction starts.\n\nIt is not comprehensive but would be a start for further improvement.\n\nReviewed by: Richard Smith, Matheus Izvekov\n\nDifferential Revision: https://reviews.llvm.org/D150212\n\nFixes: SWDEV-354278\n",
            "commit_timestamp": 1685504159.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685520866.22536,
            "elapsed_time": 4699.46359205246,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bb6c036ef378de321d5b7fc0ada317f91c88570d",
            "commit_message": "[clang][Diagnostics][NFC] Use getFileID() directly\n\nInstead of calling getDecomposedLoc() and then only using the FileID.\n",
            "commit_timestamp": 1685519836.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685535403.401662,
            "elapsed_time": 4709.391610622406,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "981766a3d6cf043b0fa7efc69d227287f7a909aa",
            "commit_message": "[mlir][bazel] Disable Transform/test-repro-dump.mlir test in bazel build.\n",
            "commit_timestamp": 1685533848.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685549847.773432,
            "elapsed_time": 4712.781037330627,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a88f496f8f3baa6c3b15532e37e3bdbb1c4ea0d0",
            "commit_message": "[Sema] Remove unused function getFloat128Identifier\n\nThe last use was removed by:\n\n  commit bb1ea2d6139a72340b426e114510c46d938645a6\n  Author: Nemanja Ivanovic <nemanja.i.ibm@gmail.com>\n  Date:   Mon May 9 08:52:33 2016 +0000\n\nDifferential Revision: https://reviews.llvm.org/D151608\n",
            "commit_timestamp": 1685548775.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685564389.178147,
            "elapsed_time": 5586.922463417053,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5a0d53ce41486225fd8be6b1d13f338d19c29f62",
            "commit_message": "[Tooling] Remove unused function setRestoreWorkingDir\n\nThe last use was removed by:\n\n  commit 146ec74a8382dc820809d0a2bf4b918d0b5e6603\n  Author: Jan Svoboda <jan_svoboda@apple.com>\n  Date:   Fri Sep 10 10:24:16 2021 +0200\n\nOnce I remove the function, RestoreCWD is always true, so this patch\nremoves the variable and propagates the constant.\n\nDifferential Revision: https://reviews.llvm.org/D151786\n",
            "commit_timestamp": 1685562217.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685592772.674521,
            "elapsed_time": 3396.984817504883,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ff471dcf7669b1ad7903a44d0773bef4eb175eb9",
            "commit_message": "[SCEV] Fix verification of SCEV multiples.\n",
            "commit_timestamp": 1685592022.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685607458.579249,
            "elapsed_time": 4954.338002443314,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4f0436dd1532d7534d77e6fc211a7a50bbdd0c49",
            "commit_message": "[clang][analyzer] Merge apiModeling.StdCLibraryFunctions and StdCLibraryFunctionArgs checkers into one.\n\nMain reason for this change is that these checkers were implemented in the same class\nbut had different dependency ordering. (NonNullParamChecker should run before StdCLibraryFunctionArgs\nto get more special warning about null arguments, but the apiModeling.StdCLibraryFunctions was a modeling\nchecker that should run before other non-modeling checkers. The modeling checker changes state in a way\nthat makes it impossible to detect a null argument by NonNullParamChecker.)\nTo make it more simple, the modeling part is removed as separate checker and can be only used if\nchecker StdCLibraryFunctions is turned on, that produces the warnings too. Modeling the functions\nwithout bug detection (for invalid argument) is not possible. The modeling of standard functions\ndoes not happen by default from this change on.\n\nReviewed By: Szelethus\n\nDifferential Revision: https://reviews.llvm.org/D151225\n",
            "commit_timestamp": 1685606075.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685621858.931423,
            "elapsed_time": 4910.697793722153,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a26bd95325f120d9737a0b03c80eabddb56f46db",
            "commit_message": "[LinkerWrapper] Fix static library symbol resolution\n\nThe linker wrapper performs its own very basic symbol resolution for the\npurpose of supporting standard static library semantics. We do this here\nbecause the Nvidia `nvlink` wrapper does not support static linking and\nwe have some offloading specific extensions.\n\nCurrently, we always place symbols in the \"table\" even if they aren't\nextracted. This caused the logic to fail when many files were used that\nreferenced the same undefined variable. This patch changes the pass to\nonly add the symbols to the global \"table\" if the file is actually\nextracted.\n\nReviewed By: tra\n\nDifferential Revision: https://reviews.llvm.org/D151839\n",
            "commit_timestamp": 1685620311.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685650679.335121,
            "elapsed_time": 4823.740854740143,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c20a9bb001855da5d14721ce2894e3be77a999fe",
            "commit_message": "Allow configuring InlinerThreshold in C bindings for the new pass manager\n\nC bindings for the new pass manager seem to allow to set any option from LLVMPassBuilderOptions, except InlinerThreshold. Allow to configure it as well.\n\nReviewed By: aeubanks\n\nDifferential Revision: https://reviews.llvm.org/D151832\n",
            "commit_timestamp": 1685649635.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685722484.998794,
            "elapsed_time": 4693.178010225296,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5c2072e74b42d55e8bf7a9c8fee8800bad591f12",
            "commit_message": "[clang-tidy] Fix docs.\n",
            "commit_timestamp": 1685719915.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685737190.8817,
            "elapsed_time": 4808.725058555603,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "18ccca4da8dec5fbfd1072a1c1544ce25f528627",
            "commit_message": "[UBSan] Consider zero input to __builtin_clz/ctz to be undefined independent of the target.\n\nPreviously we checked isCLZForZeroUndef and only added UBSan checks\nif it returned true.\n\nThe builtin should be considered undefined for 0 regardless of\nthe target so that code using it is portable. The isCLZForZeroUndef\nwas only intended to disable optimizations in the middle end and\nbackend.\n\nSee https://discourse.llvm.org/t/should-ubsan-detect-0-input-to-builtin-clz-ctz-regardless-of-target/71060\n\nReviewed By: nikic\n\nDifferential Revision: https://reviews.llvm.org/D152023\n",
            "commit_timestamp": 1685736065.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685751496.408202,
            "elapsed_time": 4718.239347219467,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0a168131b4f420d9f561926c643c143c84c97535",
            "commit_message": "[scudo] Add 'inline' to static secondary.h function\n\nThis patches an error flaged by Fuchsia builds e.g.\nhttps://ci.chromium.org/ui/p/turquoise/builders/global.try/core.x64-asan/b8779376650819379137/overview)\n\n```\nbuild failed:\n\n[87176/332302](525) CXX user.libc_x64-asan-ubsan/obj/zircon/system/ulib/c/scudo/gwp-asan-info.gwp_asan_info.cc.o\nFAILED: user.libc_x64-asan-ubsan/obj/zircon/system/ulib/c/scudo/gwp-asan-info.gwp_asan_info.cc.o\n../../prebuilt/third_party/python3/linux-x64/bin/python3.8 -S ../../build/rbe/cxx_remote_wrapper.py --exec_strategy=remote_local_fallback --  ../../prebuilt/third_party/clang/linux-x64/bin/clang++ -MD -MF user.libc_x64-asan-ubsan/obj/zircon/system/ulib/c/scudo/gwp-asan-info.gwp_asan_info.cc.o.d -o user.libc_x64-asan-ubsan/obj/zircon/system/ulib/c/scudo/gwp-asan-info.gwp_asan_info.cc.o -D_LIBCPP...\nIn file included from ../../zircon/system/ulib/c/scudo/gwp_asan_info.cc:7:\nIn file included from ../../third_party/scudo/src/allocator_config.h:12:\nIn file included from ../../third_party/scudo/src/combined.h:22:\n../../third_party/scudo/src/secondary.h:67:13: error: 'static' function 'unmap' declared in header file should be declared 'static inline' [-Werror,-Wunneeded-internal-declaration]\nstatic void unmap(LargeBlock::Header *H) {\n            ^\n1 error generated.\n```\n\nDifferential Revision: https://reviews.llvm.org/D152038\n",
            "commit_timestamp": 1685749647.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685765768.179946,
            "elapsed_time": 4537.205727338791,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "84ee08c6a89a96c29e7be7e62f91f4bcdcde48ae",
            "commit_message": "[RISCV] Avoid illegal DAG combination for strict-fp nodes.\n\nThose combines may change the exception behavior and rounding behavior.\n\nReviewed By: craig.topper\n\nDifferential Revision: https://reviews.llvm.org/D151992\n",
            "commit_timestamp": 1685759370.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685794307.065448,
            "elapsed_time": 3422.137099981308,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0beffb854209a41f31beb18f9631258349a99299",
            "commit_message": "[CMake] Ensure `CLANG_RESOURCE_DIR` is respected.\n\nre-commit of 39aa0f5c434b463520ac39a8dbe933ee8c4c5ea7 with missing file:\ncmake/Modules/GetClangResourceDir.cmake.\n",
            "commit_timestamp": 1685791295.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685809033.393142,
            "elapsed_time": 5792.0157170295715,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "684f3c968d6bbf124014128b9f5e4f03a50f28c5",
            "commit_message": "[Clang] Fix status of P0960\n\nP0960R3 and P1975R0 were marked not implemented because\nof #61145,\n\nThis issue has been fixed and backported to LLVM 16,\nthe status page should reflect that.\n\nReviewed By: #clang-language-wg, ayzhao, erichkeane\n\nDifferential Revision: https://reviews.llvm.org/D150122\n",
            "commit_timestamp": 1685804622.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685823303.569216,
            "elapsed_time": 4907.474210262299,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4b9764959dc4b8783e18747c1742ab164e4bc4ee",
            "commit_message": "[clang-format] Fix overlapping replacements before PPDirectives\n\nIf the first token of an annotated line is finalized, reuse its\nNewlinesBefore value to avoid potential overlapping whitespace\nreplacements before preprocessor branching directives.\n\nFixes #62892.\n\nDifferential Revision: https://reviews.llvm.org/D151954\n",
            "commit_timestamp": 1685820783.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685837670.181027,
            "elapsed_time": 4673.910643577576,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ea8f4b98419750c8cc7c60ea43b570adf47b3f78",
            "commit_message": "[libc][CMake] Place archives in build/lib/<target-triple>\n\nThis patch moves the location of libllvmlibc.a within the build tree to\nwithin ./lib/<target triple>. This more closely matches the behavior of\nother runtime builds and allows for clang in the same build tree to\nautomatically be able to link against llvmlibc since this path is by\ndefault included by the driver.\n\nAlso removes the LIBC_BINARY_DIR CMake flag since it isn't used anywhere\nin the tree (based on a quick grep).\n\nReviewed By: phosek\n\nDifferential Revision: https://reviews.llvm.org/D151624\n",
            "commit_timestamp": 1685832003.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685852112.979246,
            "elapsed_time": 4631.908277273178,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ff75a2be34fd76350216c36b7ea4c3f338df6215",
            "commit_message": "[AVR] Fix incorrect operands of pseudo instruction 'ROLBRd'\n\nFixes https://github.com/llvm/llvm-project/issues/63098\n\nReviewed by: benshi001\n\nDifferential Revision: https://reviews.llvm.org/D152063\n",
            "commit_timestamp": 1685848137.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685866573.351386,
            "elapsed_time": 4750.886167049408,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fbdcd54442ef9435d753ae974d33992f99d85ad8",
            "commit_message": "[GlobalISel] Fix DIVREM combine from inserting a divrem before its operands' defs.\n\nIn some rare corner cases where in between the div/rem pair there's a def of\nthe second instruction's source (but a different vreg due to the combine's\neqivalence checks), it will place the DIVREM at the first instruction's point,\ncausing a use-before-def. There wasn't an obvious fix that stood out to me\nwithout doing more involved analysis than a combine should really be doing.\n\nFixes issue #60516\n\nI'm open to new suggestions on how to approach this, as I'm not too happy\nat bailing out here. It's not the first time we run into issues with value liveness\nthat the DAG world isn't affected by.\n\nDifferential Revision: https://reviews.llvm.org/D144336\n",
            "commit_timestamp": 1685863478.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685881131.689841,
            "elapsed_time": 6182.352350473404,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3a458256ee22a0e7c31529de42fa6caa263d88fe",
            "commit_message": "[gn build] Port 66e5678fece3\n",
            "commit_timestamp": 1685878605.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685895601.863855,
            "elapsed_time": 5859.253249406815,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0702d4e04df906cf011950b2aa8ba08bc63d463e",
            "commit_message": "[GlobalIsel][X86] Move G_ICMP legalization before legacy handling and merge 32-bit/64-bit handling\n\nI've kept the legalForCartesianProduct call, but this requires us to maintain 32-bit/64-bit integer lists - we might want to just use legalIf and perform the type pair set matching manually.\n",
            "commit_timestamp": 1685894517.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685909747.047491,
            "elapsed_time": 3766.5247972011566,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "9d531c2dcfa791301f39848a13f199f22d1471dd",
            "commit_message": "[bazel] Port 36f351098cd5\n",
            "commit_timestamp": 1685907592.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685924266.698108,
            "elapsed_time": 4679.373460054398,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1f8a33c19c79fd4649a07eb70ea394c60a8ce316",
            "commit_message": "[mlir][bytecodegen] Add list helper methods.\n\nPreviously the SignedVarInt was incorrectly defined. Follow up work\nneeded for improving Array printing/parsing, but correcting the\ndefinitions for now.\n",
            "commit_timestamp": 1685919157.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685938770.180399,
            "elapsed_time": 5932.58207988739,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "29663e2b8c4edcd850a4245b1f9509f974220906",
            "commit_message": "[clang][CodeGen] Account for VTT address space\n\nCorrectly account for the fact that certain targets do not use the generic address space for the implicit VTT argument. This entails adjusting `ItaniumCXXABI::buildStructorSignature`, `ItaniumCXXABI::addImplicitStructorParams` and `ItaniumCXXABI::getImplicitConstructorArgs` to use the target's global variable address space. The associated test is temporarily marked `XFAIL` as additional fixes are needed.\n\nReviewed By: rjmccall\n\nDifferential Revision: https://reviews.llvm.org/D150746\n",
            "commit_timestamp": 1685930785.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685953217.018542,
            "elapsed_time": 6228.792032718658,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "225cf64e03b4e394c32e95fe1d6414e6e16be094",
            "commit_message": "fix failures caused by https://reviews.llvm.org/D148490\n\nbuildbot: https://lab.llvm.org/buildbot/#/builders/214/builds/7823\n",
            "commit_timestamp": 1685952026.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685967673.403861,
            "elapsed_time": 6146.401790380478,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fc4a8bf7da7d3837d371fda24d3f2c0f9ef54a5b",
            "commit_message": "[clang-tidy] Move the misc system header dir to Inputs subdir, NFC.\n\nFollows the existing patterns, and makes life easier for bazel build\nsystem.\n",
            "commit_timestamp": 1685966221.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1685981866.842973,
            "elapsed_time": 4659.663987636566,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4cb5e436ae713579cfee00cfc8e516cf965b91e9",
            "commit_message": "[clangd] Show size, offset and padding for bit fields on hover\n\nExamle:\n```\nstruct test {\n\tchar a;\n\tchar b : 3;\n\tchar c : 5;\n\tint d;\n\tint e : 27;\n};\n```\n\n{F27617774}\n{F27617776}\n{F27617777}\n{F27617780}\n\nReviewed By: sammccall\n\nDifferential Revision: https://reviews.llvm.org/D151128\n",
            "commit_timestamp": 1685980354.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1685996459.270467,
            "elapsed_time": 6097.16751241684,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "db98ac082744880a6e352b2d4a97d8896d9a7694",
            "commit_message": "[Demangle] convert microsoftDemangle to take a std::string_view\n\nThis should be last of the \"bottom-up conversions\" of various demanglers\nto accept std::string_view.  After this, D149104 may be revisited.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D152176\n",
            "commit_timestamp": 1685995220.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686010698.809303,
            "elapsed_time": 4574.208325386047,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d3777f20c59373a0075d0d9de3bfdc1429888879",
            "commit_message": "test/AMDGPU: REQUIRES asserts (D148184)\n",
            "commit_timestamp": 1686009346.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686024905.991892,
            "elapsed_time": 4643.764991283417,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "116670d192c619e2233e092e210c920d004dbe33",
            "commit_message": "[InstCombine] add overflow checking on Add ~X + C --> (C-1) - X\nDifferential Revision: https://reviews.llvm.org/D152088\n",
            "commit_timestamp": 1686021885.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686039343.967205,
            "elapsed_time": 5021.1848974227905,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "10e7899818803029d2f91a20c67f5a1d75781b8a",
            "commit_message": "[FPEnv] Get rid of extra moves in fpenv calls\n\nIf intrinsic `get_fpenv` or `set_fpenv` is lowered to the form where FP\nenvironment is represented as a region in memory, extra moves can\nappear. For example the code:\n\n  define void @func_01(ptr %ptr) {\n    %env = call i256 @llvm.get.fpenv.i256()\n    store i256 %env, ptr %ptr\n    ret void\n  }\n\nproduces DAG:\n\n  ch = get_fpenv_mem ch, memory_region\n  val: i256, ch = load ch, memory_region\n  ch = store ch, ptr, val\n\nIn this case the extra moves can be avoided if `get_fpenv_mem` got\npointer to the memory where the FP environment should be finally placed.\n\nThis change implement such optimization for this use case.\n\nDifferential Revision: https://reviews.llvm.org/D150437\n",
            "commit_timestamp": 1686038092.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686054047.199489,
            "elapsed_time": 6666.311804771423,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6d5a653dda628250b373ec89e0e11cdd27603c24",
            "commit_message": "[AMDGPU] New PAL metadata updates to ps_extra_lds_size and float_mode\n\nNew metadata format contains full calculation of field contents for\nps_extra_lds_size (vs old format where the value in RSRC register is used by PAL\nto calculate the value required).\n\nAlso stop updating float_mode and rely on front end settings for this field.\n\nDifferential Revision: https://reviews.llvm.org/D152247\n",
            "commit_timestamp": 1686050301.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686068345.930998,
            "elapsed_time": 5964.756800889969,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "540294845babbb2be909ea456323d7bc8a1763df",
            "commit_message": "[Clang] Reject increment of bool value in unevaluated contexts after C++17\n\nClang now incorrectly allowed increment of bool in unevaluated contexts, we set `diagnostic::ext_increment_bool` to be SFINAEFailure to fix this issue.\n\n```\ntemplate<class T> auto f(T t) -> decltype(++t);\nauto f(...) -> void;\nvoid g() {\n  f(true);  // Clang wrongly makes this a hard error\n}\n```\n\n```\ntemplate <class T>\nconcept can_increment = requires(T t) { ++t; };\n\ntemplate <class T> void f() {\n  static_assert(requires(T t) { ++t; }); // Incorrectly allowed\n}\n\nint main() {\n  f<bool>();\n\n  static_assert(!can_increment<bool>); // Incorrectly fails\n\n  bool b = false;\n  ++b; // Correctly rejected\n}\n```\nFix issue: https://github.com/llvm/llvm-project/issues/47517\n\nReviewed By: erichkeane\n\nDifferential Revision: https://reviews.llvm.org/D152259\n",
            "commit_timestamp": 1686067117.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686082603.071847,
            "elapsed_time": 5444.456151008606,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7cd1d4231a7c83e719b83c6abbe2d479baa03808",
            "commit_message": "[lldb] Remove __FUNCTION__ from log messages in lldbHost (NFC)\n\nLLDB's logging infrastructure supports prepending log messages with the\nname of the file and function that generates the log (see help log\nenable). Therefore it's unnecessary to include the current __FUNCTION__\nin the log message itself. This patch removes __FUNCTION__ from log\nmessages in the Host library.\n\nDifferential revision: https://reviews.llvm.org/D151762\n",
            "commit_timestamp": 1686081763.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686097069.92603,
            "elapsed_time": 5481.5487496852875,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7056ad7e97347f6af65c1e4ccaffcc8dfd5ba1d2",
            "commit_message": "[gn build] Port 1117b9a284aa\n",
            "commit_timestamp": 1686095994.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686111391.655221,
            "elapsed_time": 5076.951601982117,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c6a69446e152975c66594061ee542ca8e4e98b6f",
            "commit_message": "[M68k,MSP430,VE,Xtensa] Migrate to new encodeInstruction that uses SmallVectorImpl<char>. NFC\n",
            "commit_timestamp": 1686110572.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686125906.788304,
            "elapsed_time": 5676.438613176346,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d19a3834dce5f9e8c84835ea14e8b434e8aa5fa7",
            "commit_message": "[NFC][RFC][TableGen] Split GlobalISelEmitter.cpp\n\nThis patch splits the GlobalISelEmitter.cpp file, which imports DAG ISel patterns for GISel, into separate \"GISelMatchTable.h/cpp\" files.\n\nThe main motive is readability & maintainability. GlobalISelEmitter.cpp was about 6400 lines of mixed code, some bits implementing the match table codegen, some others dedicated to importing DAG patterns.\n\nNow it's down to  2700 + a 2150 header + 2000 impl.\nIt's a tiny bit more lines overall but that's to be expected - moving\ninline definitions to out-of-line, adding comments in the .cpp, etc. all of that takes additional space, but I think the tradeoff is worth it.\n\nI did as little unrelated code changes as possible, I would say the biggest change is the introduction of the `gi` namespace used to prevent name conflicts/ODR violations with type common names such as `Matcher`.\nIt was previously not an issue because all of the code was in an anonymous namespace.\n\nThis moves all of the \"match table\" code out of the file, so predicates,\nrules, and actions are all separated now. I believe this helps separating concerns, now `GlobalISelEmitter.cpp` is more focused on importing DAG patterns into GI, instead of also containing the whole match table internals as well.\n\nNote: the new files have a \"GISel\" prefix to make them distinct from the other \"GI\" files in the same folder, which are for the combiner.\n\nReviewed By: aemerson\n\nDifferential Revision: https://reviews.llvm.org/D151432\n",
            "commit_timestamp": 1686123297.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686140212.40274,
            "elapsed_time": 5428.234884023666,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cda46cc4f921f6b288c57a68b901ec2f57134606",
            "commit_message": "[Clang][OpenMP][IRBuilder] Move registerTargetGlobalVariable & getAddrOfDeclareTargetVar into the OMPIRBuilder\n\nThis change tries to move registerTargetglobalVariable and\ngetAddrOfDeclareTargetVar out of Clang's CGOpenMPRuntime\nand into the OMPIRBuilder for shared use with MLIR's OpenMPDialect\nand Flang (or other languages that may want to utilise it).\n\nThis primarily does this by trying to hoist the Clang specific\ntypes into arguments or callback functions in the form of\nlambdas, replacing it with LLVM equivelants and\nutilising shared OMPIRBuilder enumerators for\nthe clauses, rather than Clang's own variation.\n\nReviewers: jsjodin, jdoerfert\n\nDifferential Revision: https://reviews.llvm.org/D149162\n",
            "commit_timestamp": 1686139345.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686154658.788628,
            "elapsed_time": 5335.938840866089,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7fdf2b282d175b55bc36913366ea2b8f98229d00",
            "commit_message": "[gn] port 66a562d22e7 more (libc++ _LIBCPP_HAS_NO_FILESYSTEM)\n",
            "commit_timestamp": 1686153642.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686169190.866537,
            "elapsed_time": 5472.598975896835,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5aea839ab3edeb58bb0eea833ad9427d0ae7ef67",
            "commit_message": "[AMDGPU] Switch to backwards scavenging in eliminateFrameIndex\n\nFrame index elimination runs backwards so we must use backwards\nscavenging. Otherwise, when a scavenged register is spilled, the\nscavenger will remember that the register is in use until the restore\npoint, but it will never reach that restore point. The result is that in\nsome cases it will keep scavenging different registers instead of\nreusing the same one.\n\nDifferential Revision: https://reviews.llvm.org/D152394\n",
            "commit_timestamp": 1686167945.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686183462.369621,
            "elapsed_time": 5397.227828025818,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b7f5f48973898d997e18b06974aec88acddc4ba7",
            "commit_message": "[RISCV] Use Selection::getElementCount to simplify code. NFC\n",
            "commit_timestamp": 1686182521.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686197792.996593,
            "elapsed_time": 4976.8885662555695,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "46aba711ab8311b427cac8ad8235642d86c7f7d6",
            "commit_message": "[InstCombine] (icmp eq A, -1) & (icmp eq B, -1) --> (icmp eq (A&B), -1)\n\nThis patch add another icmp fold for -1 case.\n\nThis fixes https://github.com/llvm/llvm-project/issues/62311,\nwhere we want instcombine to merge all compare intructions together so\nlater passes like simplifycfg and slpvectorize can better optimize this\nchained comparison.\n\nReviewed By: goldstein.w.n\n\nDifferential Revision: https://reviews.llvm.org/D151660\n",
            "commit_timestamp": 1686195005.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686212301.71875,
            "elapsed_time": 5296.143295049667,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d3d5cdbfa8a9f2838531466d321feb82f3c08b9d",
            "commit_message": "[Clang] Convert some tests to opaque pointers (NFC)\n",
            "commit_timestamp": 1686211288.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686226618.318728,
            "elapsed_time": 5156.586681127548,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6a3fe0f121fac1a55ead649cc25bcc92d038472f",
            "commit_message": "X86: Add more is.fpclass lowering tests\n",
            "commit_timestamp": 1686225266.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686240817.490714,
            "elapsed_time": 5055.330767869949,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cd18efb61d759405956dbd30e4b5f2720d8e1783",
            "commit_message": "[Driver] Make -G TargetSpecific\n\nso that we report `unsupported option '-G' for target ...` on\nunsupported targets (most targets).\nThis error is tested by one target in aix-err-options.c.\n\nFollow-up to D89897 and D90063.\n",
            "commit_timestamp": 1686240132.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686255219.27266,
            "elapsed_time": 4047.9484889507294,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7a52f79126a59717012d8039ef875f68e3c637fd",
            "commit_message": "[mlir][transform] Add support for expressing scalable vector sizes\n\nThis patch enables specifying scalable vector sizes when using the\nTransform dialect to drive vectorisation, e.g.:\n```\ntransform.structured.masked_vectorize %0 vector_sizes [8, 16, [4]]\n```\nThis is implemented by extending the MaskedVectorizeOp with a dedicated\nattribute for \"scalability\" and by overloading `parseDynamicIndexList`\nso that MaskedVectorizeOp can continue using the auto-generated parser\nand printer.\n\nAt the moment, only the trailing vec size can be scalable. The following\nis not yet supported:\n```\ntransform.structured.masked_vectorize %0 vector_sizes [8, [16], [4]]\n```\n\nAs the vectoriser does not support scalable vectorisation just yet, a\nwarning is issues when scalable vector sizes are used. You can also use\nthe debug output, `--debug-only=linalg-vectorization`, to check whether\nscalable vectorisation has been switched on.\n\nThis change is a part of a larger effort to enable scalable\nvectorisation in Linalg. See this RFC for more context:\n  * https://discourse.llvm.org/t/rfc-scalable-vectorisation-in-linalg/\nSimilar patch for tiling: https://reviews.llvm.org/D150944\n\nDifferential Revision: https://reviews.llvm.org/D151892\n",
            "commit_timestamp": 1686254057.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686270063.354516,
            "elapsed_time": 5598.8303871154785,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "90073e8de3871776c4df1da78d19019990241f4d",
            "commit_message": "[WebAssembly] Error out on invalid personality functions\n\nWithout explicitly checking and erroring out, an invalid personality\nfunction, which is not `__gxx_wasm_personality_v0`, caused\na segmentation fault down the line because `WasmEHFuncInfo` was not\ncreated. This explicitly checks the validity of personality functions in\nfunctions with EH pads and errors out explicitly with a helpful error\nmessage. This also adds some more assertions to ensure `WasmEHFuncInfo`\nis correctly created and non-null.\n\nInvalid personality functions wouldn't be generated by our Clang, but\ncan be present in handwritten ll files, and more often, in files\ntransformed by passes like `metarenamer`, which is often used with\n`bugpoint` to simplify names in `bugpoint`-reduced files.\n\nReviewed By: dschuff\n\nDifferential Revision: https://reviews.llvm.org/D152203\n",
            "commit_timestamp": 1686268789.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686298551.282557,
            "elapsed_time": 5241.783594608307,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "96962d5512fbc6af0ada0f13e6be332c026529cb",
            "commit_message": "[clang] set python3 as required build dependency\n\nThe required HTMLLogger include file needs python3 to run\nresource_bundle.py to bundle all the html/css/js resources. However, if\nuser sets -DLLVM_INCLUDE_TESTS=OFF, CMake will not find python3 and the\nresource bundler will never be executed. This patch set the python3 as a\nrequired build dependency to fix this problem.\n\nPatch By: Avimitin\n\nDifferential Revision: https://reviews.llvm.org/D152418\n",
            "commit_timestamp": 1686297168.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686313118.785582,
            "elapsed_time": 6418.979030847549,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "90431ca2e01489eeff22e141714bb294315d6a3c",
            "commit_message": "Reland [AMDGPU] New PAL metadata updates to ps_extra_lds_size and float_mode\n\nNew metadata format contains full calculation of field contents for\nps_extra_lds_size (vs old format where the value in RSRC register is used by PAL\nto calculate the value required).\n\nAlso stop updating float_mode and rely on front end settings for this field.\n\nDifferential Revision: https://reviews.llvm.org/D152247\n",
            "commit_timestamp": 1686310440.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686327715.392041,
            "elapsed_time": 6694.786968231201,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2c0e6cfb8af59a291c2b446a02a2f8ebd930f07d",
            "commit_message": "[gn build] Port 6adb1ca555ec\n",
            "commit_timestamp": 1686325453.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686341793.414476,
            "elapsed_time": 3867.53191447258,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c0ad1b459742117990d38186deaeb49e75bb26f3",
            "commit_message": "[NewGVN] Fold equivalent freeze instructions\n\nDifferential Revision: https://reviews.llvm.org/D152529\n",
            "commit_timestamp": 1686340656.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686356180.631366,
            "elapsed_time": 5416.987868309021,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "10e83005367c595821749896e5938ff4f374601b",
            "commit_message": "[-Wunsafe-buffer-usage] Remove the unnecessary `const` qualifier in safe buffer analysis\n\nCasting away the qualifier raises a warning in 1e270be0886c3a770e7a967679552a02dfc1dca9\n",
            "commit_timestamp": 1686354109.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686370540.153749,
            "elapsed_time": 5124.249427318573,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "83f7b91ab8c6cbb261fb12bf720235b14283f46a",
            "commit_message": "[SelectionDAG] Update test case according to post review comments, NFC\n\nDifferential Revision: https://reviews.llvm.org/D152492\n",
            "commit_timestamp": 1686369747.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686385095.028035,
            "elapsed_time": 5313.795140504837,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "25d9fde22e609f8637f720220810429745707b76",
            "commit_message": "[SCCP] Skip computing intrinsics if one of its args is unknownOrUndef\n\nFor constant range supported intrinsics, we got consantrange from args\nno matter if they are unknown or undef. And the constant range computed\nfrom unknown or undef value state is full range.\n\nI think compute with full constant range is harmful since although we\ncan do mergeIn after these args value state are changed, the merge\noperation of two constant ranges is union.\n\nReviewed By: nikic\n\nDifferential Revision: https://reviews.llvm.org/D152499\n",
            "commit_timestamp": 1686383326.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686399796.138566,
            "elapsed_time": 7312.029540777206,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5b657f50b8e8dc5836fb80e566ca7569fd04c26f",
            "commit_message": "AMDGPU: Move LICM after AMDGPUCodeGenPrepare\n\nThe commit that added the run says it's to hoist uniform parts of\ninteger division expansion. That expansion is performed later, so this\ndidn't do anything in that case. Move this later so the original test\nshows the improvement.\n\nThis also saves a run of \"Canonicalize natural loops\". Not sure why\nthis appears to be still getting a separate loop PM run. Also feels a\nbit heavy to run this just for divide. Is there a way to specifically\nhoist the divide sequence when it expands?\n",
            "commit_timestamp": 1686397052.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686413797.542692,
            "elapsed_time": 5674.190080881119,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c0f9d7b0e6199ca3bde5a6d0036a8ada0bb6253b",
            "commit_message": "[MCParser] Modernize CppHashInfoTy (NFC)\n",
            "commit_timestamp": 1686412946.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686428197.802243,
            "elapsed_time": 5404.32940530777,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b6808ba291fcb5ff2e0d651e9e710f3d75631bc4",
            "commit_message": "[X86] Make constant `mul` -> `shl` + `add`/`sub` work for vector types\n\nSomething like:\n    `%r = mul %x, <33, 33, 33, ...>`\n\nIs best lowered as:\n    `%tmp = %shl x, <5, 5, 5>; %r = add %tmp, %x`\n\nAs well, since vectors have non-destructive shifts, we can also do\ncases where the multiply constant is `Pow2A +/- Pow2B` for arbitrary A\nand B, unlike in the scalar case where the extra `mov` instructions\nmake it not worth it.\n\nReviewed By: pengfei\n\nDifferential Revision: https://reviews.llvm.org/D150324\n",
            "commit_timestamp": 1686425926.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686442656.962456,
            "elapsed_time": 5387.891252279282,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2509c93edd36a20a0aeb5e6d612dae5b770bc987",
            "commit_message": "[Transforms] Remove AddDiscriminatorsLegacyPass\n\nThe last use was removed by:\n\n  commit ae0987d242e266847f21f5fa1bffa97ce3eff586\n  Author: Kazu Hirata <kazu@google.com>\n  Date:   Sat Jun 10 13:51:35 2023 -0700\n\nDifferential Revision: https://reviews.llvm.org/D152636\n",
            "commit_timestamp": 1686436367.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686457123.531723,
            "elapsed_time": 6580.448311805725,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "db8049deef4e3d247849e4ce2b77c69aec89d014",
            "commit_message": "[TableGen] Fix indentation. NFC\n",
            "commit_timestamp": 1686452163.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686471280.945273,
            "elapsed_time": 5163.240679979324,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8100aa4c02b04cd7d03b472f770d540f28cf5150",
            "commit_message": "[libcxx] Use the unoptimized routines for volatile source types\n\nAs reported in: D147741\n\nReviewers: philnik, var-const, ldionne, hans\n\nDifferential Revision: https://reviews.llvm.org/D152571\n",
            "commit_timestamp": 1686463907.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686485812.116689,
            "elapsed_time": 6204.537847995758,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2802739dfd844ee6a5148c25c74a58e3f9f27448",
            "commit_message": "[NFC] Replace ;; with ;\n",
            "commit_timestamp": 1686475524.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686500192.511348,
            "elapsed_time": 5346.529239177704,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c8c28ac5caf875771f9a424e46255948004cbeab",
            "commit_message": "[Driver] Place -mharden-sls= in m_Group\n\nFix https://github.com/llvm/llvm-project/issues/63237\n\nWith only a link action, we claim all CompileOnly_Group options (including -f*,\n-m*, -i*, etc). -mharden-sls= is not in a Group and therefore not claimed,\nleading to a spurious -Wunused-command-line-argument warning, and after\n5548843d692a92a7840f14002debc3cebcb3cdc3, an error.\n",
            "commit_timestamp": 1686499182.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686514715.727786,
            "elapsed_time": 6507.806059122086,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c72dea88b635bfd7856fa22bcaf388fa72c9fe86",
            "commit_message": "[AArch64][ARM][X86] Split XRay tests for Linux/macOS\n\nXRay instrumentation works for macOS running on Apple Silicon, but\ncodegen is untested there. I'm going to make changes affecting this\ntarget, get the XRay tests running on AArch64.\n\nData sections are going to become slightly different on x86_64 soon.\nI do want the tests to be specific about symbol names, so instead of\nhaving test check the common step, bifurcate tests a bit and check\nthe full symbol names.\n\nAs for ARM, XRay is not really supported on iOS at the moment, though\nARM is also really used there with modern phones. Nevertheless, codegen\ntests exist and the output is going to change a little, make it easier\nto write the special case for iOS.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D145291\n",
            "commit_timestamp": 1686513209.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686528968.283214,
            "elapsed_time": 5482.334884643555,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "63bd6d9e644335c8138a59281aafbf65a82fc47a",
            "commit_message": "[Driver] Default to -fxray-function-index\n\nAs explained by commit 849f1dd15e92fda2b83dbb6144e6b28b2cb946e0,\n-fxray-function-index was the original default but was accidentally flipped by\ncommit d8a8e5d6240a1db809cd95106910358e69bbf299. Restore the previous behavior.\n\nOriginally reported by Oleksii Lozovskyi in D145848.\n",
            "commit_timestamp": 1686523093.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686543438.256563,
            "elapsed_time": 5259.484094142914,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cf79773a9006a7e22f3919268b7db381ddcb3abc",
            "commit_message": "[SCCP] Replace new value's value state with removed value's\n\nIn replaceSignedInst, if a signed instruction can be repalced with\nunsigned instruction, we created a new instruction and removed the old\ninstruction's value state. If the following instructions has this new\ninstruction as a use operand, transformations like replaceSignedInst and\nrefineInstruction would be blocked. The reason is there is no value\nstate for the new instrution.\n\nThis patch set the new instruction's value state with the removed\ninstruction's value state. I believe it is correct bacause when we\nrepalce a signed instruction with unsigned instruction, the value state\nis not changed.\n\nReviewed By: nikic\n\nDifferential Revision: https://reviews.llvm.org/D152337\n",
            "commit_timestamp": 1686541247.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686557843.188131,
            "elapsed_time": 6097.543085813522,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bd4f978754758d5ef29d1f10370f45362da3de37",
            "commit_message": "[libc] Improve memcmp latency and codegen\n\nThis is based on ideas from @nafi to:\n - use a branchless version of 'cmp' for 'uint32_t',\n - completely resolve the lexicographic comparison through vector\n   operations when wide types are available. We also get rid of byte\n   reloads and serializing '__builtin_ctzll'.\n\nI did not include the suggestion to replace comparisons of 'uint16_t'\nwith two 'uint8_t' as it did not seem to help the codegen. This can\nbe revisited in sub-sequent patches.\n\nThe code been rewritten to reduce nested function calls, making the\njob of the inliner easier and preventing harmful code duplication.\n\nReviewed By: nafi3000\n\nDifferential Revision: https://reviews.llvm.org/D148717\n",
            "commit_timestamp": 1686556583.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686572215.473447,
            "elapsed_time": 5579.12425661087,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a8ad413f0d18c07a4adaa0d547e0096874d809c5",
            "commit_message": "[RFC][clangd] Move preamble index out of document open critical path\n\nWe would like to move the preamble index out of the critical path.\nThis patch is an RFC to get feedback on the correct implementation and potential pitfalls to keep into consideration.\n\nI am not entirely sure if the lazy AST initialisation would create using Preamble AST in parallel. I tried with tsan enabled clangd but it seems to work OK (at least for the cases I tried)\n\nReviewed By: kadircet\n\nDifferential Revision: https://reviews.llvm.org/D148088\n",
            "commit_timestamp": 1686571001.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686586753.320975,
            "elapsed_time": 7552.461572170258,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7b31d3dada151b3a8e9f56557bdc3401c2644977",
            "commit_message": "Revert \"[RDF] Allow RegisterRef to contain register unit\" and follow-ups\n\nThis reverts commit 859b05b02d3fd9ab6b77f2bed8df6902fe704806.\n\nAlso reverts these follow-ups:\n\nRevert \"[RDF] Remove `constexpr` from `hash\"\nThis reverts commit 621507ce20ad8eef2986be2712631165e53b7d91.\n\nRevert \"[RDF] Do not use trailing return type after all, NFC\"\nThis reverts commit 46e19e3a2c45e7fb5f501bdb983a7151c158304f.\n\nRevert \"[RDF] Stop looking when reached code node in getNextRef with NextOnly\"\nThis reverts commit a049ce9d1bd5a7c1c4fcccc6a801b72b00ea8e0f.\n\nRevert \"[RDF] Use trailing return type syntax, NFC\"\nThis reverts commit d3b34b7f3a7cbfc96aea897419f167b5ee19e61a.\n\nRevert \"[RDF] Define short type names: NodeAddr<XyzNode*> -> Xyz, NFC\"\nThis reverts commit f8ed60b56d1948422dda924fcf450560591e8a19.\n",
            "commit_timestamp": 1686584128.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686601206.351525,
            "elapsed_time": 7244.1240234375,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1d6c3e29f6aa45914faa7be00a939b8f550f38e9",
            "commit_message": "[Driver] Mark m_x86_Features_Group options as TargetSpecific\n\nso that they get an error on non-x86 targets.\nFollow-up to D151590.\n\nAs a workaround for https://github.com/llvm/llvm-project/issues/63270, we don't\nreport an error for -msse4.2.\n",
            "commit_timestamp": 1686599253.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686629747.01761,
            "elapsed_time": 6032.665798425674,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0118a3f6c3c9bde9042f21b20a7a7131b942761c",
            "commit_message": "[mlir][docgen] Enable custom prefix strip for op name.\n\nThe fully qualified name gets long in the TOC (especially on mobile),\nenable specifying a prefix to be stripped.\n\nDifferential Revision: https://reviews.llvm.org/D152404\n",
            "commit_timestamp": 1686628701.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686644261.493748,
            "elapsed_time": 5865.157160043716,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bba6ea8c2d56faad49936b95a57c7499095b920b",
            "commit_message": "[C++20] Claim full support for consteval again\n\nAfter resolving several outstanding issues now is the time to mark it as\nfully supported.\n\nFixes https://github.com/llvm/llvm-project/issues/57094\n\nReviewed By: aaron.ballman, cor3ntin, #clang-language-wg\n\nDifferential Revision: https://reviews.llvm.org/D147717\n",
            "commit_timestamp": 1686642624.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686658962.454711,
            "elapsed_time": 8156.410457134247,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8d1edae998fb40bbb22c5b5146eb333cf6148b35",
            "commit_message": "Use SelectionDAGBuiler::getRoot instead of SelectionDAG::getRoot\n",
            "commit_timestamp": 1686657579.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686673224.484355,
            "elapsed_time": 7368.945910215378,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "666a56f1f1683535967d1a3b7587bf85044ea005",
            "commit_message": "[MLIR][Tests] Update tests so they require assertions\n\nThese tests check statistics results which require assertions enabled.\n\nDifferential Revision: https://reviews.llvm.org/D152780\n",
            "commit_timestamp": 1686672044.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686687777.482228,
            "elapsed_time": 7855.154078960419,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "651e5ae62d29fdb07eb85f75ab7e686b98479f3a",
            "commit_message": "[MS] Fix passing aligned records by value in some cases\n\nIt's not exactly clear what the meaning of TypeInfo::AlignRequirement\nis, so go directly to the ASTRecordLayout for records and check the\nrequired alignment there. Compare that number with the stack alignment\nvalue of 4.\n\nThis fixes cases when the alignment attribute does not appear directly\non the record [1], or when the attribute on the record is underaligned\n[2].\n\n[1]: `struct Foo { int __declspec(align(16)) x; };`\n[2]: `struct __declspec(align(1)) Bar { int x; };`\n\nFixes https://llvm.org/pr63257\n\nDifferential Revision: https://reviews.llvm.org/D152752\n",
            "commit_timestamp": 1686686063.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686701903.776606,
            "elapsed_time": 6361.430757284164,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "9d5466849a770eeab222d5a5890376d3596e8ad6",
            "commit_message": "[SLP][NFC] Precommit test that exposes a bug in ShuffleBuilder.\n\nShuffleBuilder generates a zero mask here:\n`[[TMP6:%.*]] = shufflevector <2 x float> [[TMP3]], <2 x float> poison, <4 x i32> zeroinitializer`\nBut the correct mask is `0,0,1,1`, or we should have reused `TMP4`.\n\nDifferential Revision: https://reviews.llvm.org/D152868\n",
            "commit_timestamp": 1686700356.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686716424.469075,
            "elapsed_time": 7581.662240028381,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bd96d7b81f457c16d3bced596ab3cf095f8fb101",
            "commit_message": "[scudo] Fix bound checks in MemMap and ReservedMemory methods\n\nReviewed By: Chia-hungDuan\n\nDifferential Revision: https://reviews.llvm.org/D152690\n",
            "commit_timestamp": 1686714954.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686730935.018395,
            "elapsed_time": 16979.02570080757,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4a69e0a0ad2fd3fb3ec590a9db4ac5390c7093e7",
            "commit_message": "[test][hwasan] Rename constants in test\n",
            "commit_timestamp": 1686729635.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686744974.785978,
            "elapsed_time": 13442.590408563614,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0696240384cf4b18f65e31d68b51df96c328cb24",
            "commit_message": "LowerMemIntrinsics: Check address space aliasing for memmove expansion\n\nFor cases where we cannot insert an addrspacecast, we can still expand\nlike a memcpy if we know the address spaces cannot alias. Normally\nnon-aliasing memmoves are optimized to memcpy, but we cannot rely on\nthat for lowering. If a target has aliasing address spaces that cannot\nbe casted between, we still have to give up lowering this.\n",
            "commit_timestamp": 1686743818.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686759548.481363,
            "elapsed_time": 16726.991515398026,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "211f27f37c86316c5be2358ecc200f370bd76639",
            "commit_message": "[CodeGen] Add pre-commit tests for D152022 and D152558\n\nDifferential Revision: https://reviews.llvm.org/D152025\n",
            "commit_timestamp": 1686758027.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686773736.511315,
            "elapsed_time": 13539.755667209625,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fd68d36109c6fcebb6d758046b88b0664acccf51",
            "commit_message": "[mlir][sparse] unifying enterLoopOverTensorAtLvl and enterCoIterationOverTensorsAtLvls\n\nThe tensor levels are now explicitly categorized into different `LoopCondKind` to instruct LoopEmitter generate different code for different kinds of condition (e.g., `SparseCond`, `SparseSliceCond`, `SparseAffineIdxCond`, etc)\n\nThe process of generating a while loop is now dissembled into three steps and they are dispatched to different LoopCondKind handler.\n1. Generate LoopCondition (e.g., `pos <= posHi` for `SparseCond`, `slice.isNonEmpty` for `SparseAffineIdxCond`)\n2. Generate LoopBody (e.g., compute the coordinates)\n3. Generate ExtraChecks (e.g., `if (onSlice(crd))` for `SparseSliceCond`)\n\nReviewed By: aartbik\n\nDifferential Revision: https://reviews.llvm.org/D152464\n",
            "commit_timestamp": 1686772990.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686788524.06862,
            "elapsed_time": 16771.82960319519,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e63e536044178cdd23ed8a82f35c42d394bb1dfa",
            "commit_message": "[TextAPI] add osx to possible string to platform input\n",
            "commit_timestamp": 1686785486.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686802703.663016,
            "elapsed_time": 17240.52918291092,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0e08374abb2c61a3ae5c24d5f60be3b548da9778",
            "commit_message": "[clang][NFC] Add a notice to desugarForDiagnostic\n\n`desugarForDiagnostic` only sets ShouldAKA to true if desugaring\nhappens, otherwise ShouldAKA is left intact and might be uninitialized.\n\nVictims (including me):\n\nhttps://github.com/llvm/llvm-project/commit/25bf8cb3c0e3c41231289a6ff0a37b6d49b24011\n\nhttps://github.com/llvm/llvm-project/commit/0e8384a0fe4f03d60cd92aba1cae074512481ca2\n\nReviewed By: aaron.ballman\n\nDifferential Revision: https://reviews.llvm.org/D152880\n",
            "commit_timestamp": 1686801306.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686817019.491943,
            "elapsed_time": 14665.92136836052,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f031df21aaadf0ec7a5b697bb75e44656aba4abf",
            "commit_message": "[AArch64] Don't look at type size for scalable types in isExtFreeImpl\n\nThis fixes one of those 'Request for a fixed element count on a scalable\nobject' errors in the AArch64 isExtFreeImpl method, where the uses of a sext\nare checked to see if the instruction can be considered free.\nhttps://godbolt.org/z/debYP9c4G\n\nDifferential Revision: https://reviews.llvm.org/D152930\n",
            "commit_timestamp": 1686815230.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686831517.983079,
            "elapsed_time": 14053.281967401505,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4e4bd29061de5e7790e47e78ec90e41e2ee7ee30",
            "commit_message": "[GlobalIsel][X86] Add handling for G_FRAME_INDEX/G_GLOBAL_VALUE\n\nReplace the legacy legalizer versions\n",
            "commit_timestamp": 1686830263.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686845789.601773,
            "elapsed_time": 13908.613616228104,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "dcdfc963d7934a1313094b6fe9ce7aa04debe495",
            "commit_message": "[libc] Export GPU extensions to `libc` for external use\n\nThe GPU port of the LLVM C library needs to export a few extensions to\nthe interface such that users can interface with it. This patch adds the\nnecessary logic to define a GPU extension. Currently, this only exports\na `rpc_reset_client` function. This allows us to use the server in\nD147054 to set up the RPC interface outside of `libc`.\n\nDepends on https://reviews.llvm.org/D147054\n\nReviewed By: sivachandra\n\nDifferential Revision: https://reviews.llvm.org/D152283\n",
            "commit_timestamp": 1686844944.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686860358.349034,
            "elapsed_time": 8070.514589548111,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ae7e6df15f5640cb26df4671d6609b6a405bb338",
            "commit_message": "[Bazel][mlir][tosa] Fix for 86c4972f5f6759b0ba85c568d934f9b8db8875a2\n",
            "commit_timestamp": 1686858619.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686874659.937518,
            "elapsed_time": 6017.420338392258,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "43687da7a0d6ba13b1428037e8587568cc40b449",
            "commit_message": "[mlir][doc] Fix the layout of the table for the tosa.cast permissible operations\n\nWe can make the table for the `tosa.cast` permissible operations readable by utilizing the markdown table format.\n\n{F27924602}\n\nReviewed By: jpienaar\n\nDifferential Revision: https://reviews.llvm.org/D152992\n",
            "commit_timestamp": 1686873580.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686888943.487221,
            "elapsed_time": 6165.157351970673,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "96ed1bda29effd169a3c6e5eb64efe34811f27e3",
            "commit_message": "[MC][test] Add some label difference tests\n",
            "commit_timestamp": 1686886814.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686903401.580258,
            "elapsed_time": 5160.098011732101,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "27f37db76a79e746561ad2545ff6ccf0d50cc38c",
            "commit_message": "[llvm-exegesis] Use MCJIT only for execution\n\nInitially, llvm-exegesis was generating the benchmark code for the\nhost CPU to execute it inside its own process. Thus, MCJIT was reused\nfor fetching function's bytes to fill the assembled_snippet field in\nthe benchmark report.\n\nLater, the --mtriple and --benchmark-phase command line options were\nintroduced that are handy for testing snippet generation even if\nsnippet execution is not possible. In that setup, MCJIT is asked to\nparse an object file for a foreign CPU or operating system that is\nprobably not guaranteed to succeed and was actually observed to fail\nin https://reviews.llvm.org/D145763.\n\nThis commit implements a much simplified function's code fetching,\nassuming the benchmark function is the only function in the object file\nand it spans across the entire text section (note that MCJIT-based code\nhas more or less the same assumption - see TrackingSectionMemoryManager\nclass).\n\n~~~\n\nHuawei RRI, OS Lab\n\nReviewed By: courbet\n\nDifferential Revision: https://reviews.llvm.org/D148921\n",
            "commit_timestamp": 1686901132.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686917802.612113,
            "elapsed_time": 6251.843702077866,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d0233ccbf8807f86edef3aa1fb90b3786a9ce017",
            "commit_message": "[mlir][nvvm] Introduce `mbarrier.arrive`\n\nIt introduces `mbarrier.arrive` that are in ptx78.\n\nReviewed By: qcolombet\n\nDifferential Revision: https://reviews.llvm.org/D153021\n",
            "commit_timestamp": 1686916383.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686932215.451888,
            "elapsed_time": 6339.482229232788,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ed34cb2cd78143a3ec99a91fe2db79bdb1ddfd85",
            "commit_message": "[libc] Add a test for `fputs` to check using `stdout` and `stderr`\n\nThis patch adds a test directly for the `fputs` function similar to the\nexisting `puts` test. This lets us know that the default file pointers\nare function and the `fputs` interface works.\n\nReviewed By: lntue\n\nDifferential Revision: https://reviews.llvm.org/D152288\n",
            "commit_timestamp": 1686931315.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686946583.272227,
            "elapsed_time": 5908.212112426758,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7a709689bc1755a569864a97d93b96d22f988eb4",
            "commit_message": "[clangd] Handle DependentNameType in HeuristicResolver::resolveTypeToRecordDecl()\n\nFixes https://github.com/clangd/clangd/issues/1671\n\nDifferential Revision: https://reviews.llvm.org/D152645\n",
            "commit_timestamp": 1686943190.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686961212.682653,
            "elapsed_time": 7546.750667095184,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "441108ccba948d76e7002c61236e3bcbca0203ce",
            "commit_message": "Reland [clang-format] Fix overlapping whitespace replacements before PPDirective\n\nIf the first token of an annotated line already has a computed Newlines,\nreuse it to avoid potential overlapping whitespace replacements before\npreprocessor branching directives.\n\nFixes #62892.\n\nDifferential Revision: https://reviews.llvm.org/D151954\n",
            "commit_timestamp": 1686960012.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686975265.51241,
            "elapsed_time": 5708.259219408035,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c2888cddd5d98081fc82c51cb92be241144c6ffa",
            "commit_message": "[NFC] Fix potential dereferencing of null return value.\n\nReplace getAs with castAs and add assert if needed.\nDifferential Revision: https://reviews.llvm.org/D152977\n",
            "commit_timestamp": 1686972668.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686989885.902964,
            "elapsed_time": 5772.895994901657,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f2a352e0584093c65f07cdd7cc62c5cc66beacbd",
            "commit_message": "[Clang] Add the list of core papers approved in Varna to the status page\n",
            "commit_timestamp": 1686984756.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687004132.587551,
            "elapsed_time": 6391.038763523102,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cea4285949b53acd1457be4f503f4b26e096132c",
            "commit_message": "[libc++][NFC] Granularise <thread> header\n\n- This was to make implementing jthread easier and requested in https://reviews.llvm.org/D151559\n\nDifferential Revision: https://reviews.llvm.org/D151792\n",
            "commit_timestamp": 1687001332.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687018583.139226,
            "elapsed_time": 6231.365563154221,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f8a1d021ed349f1f05bb1c45feaaadc6c07fb567",
            "commit_message": "[Coding style] Fix incorrect link syntax\n",
            "commit_timestamp": 1687004765.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687032909.5316,
            "elapsed_time": 6382.8265244960785,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2cb805666ad432fd28bd197ece096ba27b0cb9ce",
            "commit_message": "PPCAsmParser: Use parseOptionalToken\n\nto simplify code near __tls_get_addr parsing.\n",
            "commit_timestamp": 1687030489.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687047786.927323,
            "elapsed_time": 7478.9992661476135,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "833438eef0663d16d4224e25602749f50b661a17",
            "commit_message": "[Hexagon] Handle all compares of i1 and vNi1\n\nFixes https://github.com/llvm/llvm-project/issues/63363\n",
            "commit_timestamp": 1687044681.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687061815.584372,
            "elapsed_time": 6411.369520664215,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "44e63ffe2bf7e5c026b828054d67088239939e81",
            "commit_message": "[clang] Replace uses of CGBuilderTy::CreateElementBitCast (NFC)\n\n* Add `Address::withElementType()` as a replacement for\n  `CGBuilderTy::CreateElementBitCast`.\n\n* Partial progress towards replacing `CreateElementBitCast`, as it no\n  longer does what its name suggests. Either replace its uses with\n  `Address::withElementType()`, or remove them if no longer needed.\n\n* Remove unused parameter 'Name' of `CreateElementBitCast`\n\nReviewed By: barannikov88, nikic\n\nDifferential Revision: https://reviews.llvm.org/D153196\n",
            "commit_timestamp": 1687050795.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687076140.984956,
            "elapsed_time": 6653.245106458664,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ed0620fd24a174d420c889454544697f57248b88",
            "commit_message": "[gn build] Port 845618cf69e8\n",
            "commit_timestamp": 1687073450.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687090507.270134,
            "elapsed_time": 6220.2735295295715,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "82d4dc20efbd72e20b430913e985e38997c7a3e8",
            "commit_message": "[clang-tidy] Improve `performance-move-const-arg` message when no move constructor is available\n\nWe now display a simple note if the reason is that the used class does not\nsupport move semantics.\n\nThis fixes llvm#62550\n\nReviewed By: PiotrZSL\n\nDifferential Revision: https://reviews.llvm.org/D153220\n",
            "commit_timestamp": 1687088447.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687104950.08355,
            "elapsed_time": 6038.886070013046,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7dd387d2971d7759cadfffeb2082439f6c7ddd49",
            "commit_message": "[clang] Add __builtin_isfpclass\n\nA new builtin function __builtin_isfpclass is added. It is called as:\n\n    __builtin_isfpclass(<floating point value>, <test>)\n\nand returns an integer value, which is non-zero if the floating point\nargument falls into one of the classes specified by the second argument,\nand zero otherwise. The set of classes is an integer value, where each\nvalue class is represented by a bit. There are ten data classes, as\ndefined by the IEEE-754 standard, they are represented by bits:\n\n    0x0001 (__FPCLASS_SNAN)         - Signaling NaN\n    0x0002 (__FPCLASS_QNAN)         - Quiet NaN\n    0x0004 (__FPCLASS_NEGINF)       - Negative infinity\n    0x0008 (__FPCLASS_NEGNORMAL)    - Negative normal\n    0x0010 (__FPCLASS_NEGSUBNORMAL) - Negative subnormal\n    0x0020 (__FPCLASS_NEGZERO)      - Negative zero\n    0x0040 (__FPCLASS_POSZERO)      - Positive zero\n    0x0080 (__FPCLASS_POSSUBNORMAL) - Positive subnormal\n    0x0100 (__FPCLASS_POSNORMAL)    - Positive normal\n    0x0200 (__FPCLASS_POSINF)       - Positive infinity\n\nThey have corresponding builtin macros to facilitate using the builtin\nfunction:\n\n    if (__builtin_isfpclass(x, __FPCLASS_NEGZERO | __FPCLASS_POSZERO) {\n      // x is any zero.\n    }\n\nThe data class encoding is identical to that used in llvm.is.fpclass\nfunction.\n\nDifferential Revision: https://reviews.llvm.org/D152351\n",
            "commit_timestamp": 1687103612.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687119402.433863,
            "elapsed_time": 6046.918904304504,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "59723e401bcad2650bcbfc39e7fe8479dfc7f62b",
            "commit_message": "[Target] Use llvm::is_contained (NFC)\n",
            "commit_timestamp": 1687117440.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687134031.462452,
            "elapsed_time": 6264.057017087936,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ada137a4c2a292c34927f0f22bd4c6fba4d3df87",
            "commit_message": "[MC] Remove unneeded MCDataFragment check from AttemptToFoldSymbolOffsetDifference\n\nIf FA == FB, we can use SA.getOffset() - SB.getOffset() even if FA is\nnot a MCDataFragment, as the only case this can be problematic\n(different offsets for a variable-size fragment) is invalid/unreachable.\nIf FA != FB, the `if (FI->getKind() != MCFragment::FT_Data)` check below\ncan bail out correctly.\n\nThis change will help Mach-O fold more expressions. For ELF this is NFC,\nunless evaluateFixup has a bug that would evaluate an expression\ndifferently.\n",
            "commit_timestamp": 1687129218.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687148058.707599,
            "elapsed_time": 5876.553906679153,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2d8044ee8b19f23e0a7fe5cd35876515d0d1d72e",
            "commit_message": "Recommit [ABI] [C++20] [Modules] Don't generate vtable if the class is defined in other module unit\n\nClose https://github.com/llvm/llvm-project/issues/61940.\n\nThe root cause is that clang will generate vtable as strong symbol now\neven if the corresponding class is defined in other module units. After\nI check the wording in Itanium ABI, I find this is not inconsistent.\nItanium ABI 5.2.3\n(https://itanium-cxx-abi.github.io/cxx-abi/abi.html#vague-vtable) says:\n\n> The virtual table for a class is emitted in the same object containing\n> the definition of its key function, i.e. the first non-pure virtual\n> function that is not inline at the point of class definition.\n\nSo the current behavior is incorrect. This patch tries to address this.\nAlso I think we need to do a similar change for MSVC ABI. But I don't\nfind the formal wording. So I don't address this in this patch.\n\nReviewed By: rjmccall, iains, dblaikie\n\nDifferential Revision: https://reviews.llvm.org/D150023\n",
            "commit_timestamp": 1687142472.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687162685.072786,
            "elapsed_time": 6297.086789369583,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0eb0fecbc544a0416b70f4450a38dfb27c9b5b9a",
            "commit_message": "[mlir][ExecutionEngine] Only load JITDyLibs without init/destroy funcs.\n\nIn https://reviews.llvm.org/D153029, I moved the loading/unloading\nmechanisms of shared libraries from the JIT runner to the execution\nengine in order to make that mechanism available in the latter\n(including its Python bindings). However, I realized that I introduced a\nsmall change in semantic: previously, the JIT runner checked for the\npresence of init/destroy functions and only loaded the library as\nJITDyLib if they were not present. After I moved the code, all libraries\nwere loaded as JITDyLib, even if they registered their symbols\nexplicitly in their init function. I am not sure if this is really a\nproblem but (1) the previous behavior was different and (2) I guess it\ncould cause a problem if some symbols are exported through the init\nfunction *and*  have public visibility. This patch reestablishes the\noriginal behaviour in the new place of the code.\n\nReviewed By: mehdi_amini\n\nDifferential Revision: https://reviews.llvm.org/D153249\n",
            "commit_timestamp": 1687160331.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687177235.249251,
            "elapsed_time": 7564.498025178909,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7e229217f4215b519b886e7881bae4da3742a7d2",
            "commit_message": "[lldb][AArch64] Add thread local storage tpidr register\n\nThis register is used as the pointer to the current thread\nlocal storage block and is read from NT_ARM_TLS on Linux.\n\nThough tpidr will be present on all AArch64 Linux, I am soon\ngoing to add a second register tpidr2 to this set.\n\ntpidr is only present when SME is implemented, therefore the\nNT_ARM_TLS set will change size. This is why I've added this\nas a dynamic register set to save changes later.\n\nReviewed By: omjavaid\n\nDifferential Revision: https://reviews.llvm.org/D152516\n",
            "commit_timestamp": 1687175518.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687191673.36587,
            "elapsed_time": 8394.874437093735,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "632ccc538cf454a00010fa83e0734b562a34faa8",
            "commit_message": "[mlir][sparse][gpu] remove tuple as one of the spmm_buffer_size output type\n\nReviewed By: aartbik\n\nDifferential Revision: https://reviews.llvm.org/D153188\n",
            "commit_timestamp": 1687190270.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687205955.530161,
            "elapsed_time": 7443.127861499786,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "407dcaf002f71abf940f3e903fa17791b150995d",
            "commit_message": "[Driver] Correct -fnoxray-link-deps to -fno-xray-link-deps\n\nand removed unused CC1Option.\nAlso change -whole-archive to the canonical spelling and improve tests.\n",
            "commit_timestamp": 1687204113.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687220400.571868,
            "elapsed_time": 8387.223415613174,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fec7c6457ced7e87d4e0837402b0b8a644cf6242",
            "commit_message": "Revert \"Reland \"[DebugMetadata][DwarfDebug] Support function-local types in lexical block scopes (4/7)\"\"\n\nThis reverts commit 2da45172c4bcd42f704c57c656926f56f32fc5ce.\nTest local-type-as-template-parameter.ll fails on ppc64-aix.\n",
            "commit_timestamp": 1687218888.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687234437.275844,
            "elapsed_time": 5571.0322959423065,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "516e32678d87fea013aa972444b987d95eaef8aa",
            "commit_message": "[X86][AMX] set Stride to Tile's Col when doing combine amxcast and store into tilestore\n\n%tile = call x86_amx @llvm.x86.tileloadd64.internal(i16 8, i16 32, i8* %src_ptr, i64 64)\n%vec = call <256 x i8> @llvm.x86.cast.tile.to.vector.v256i8(x86_amx...%tile)\nstore <256 x i8> %vec, <256 x i8>* %dst_ptr, align 256\n=>\n%tile = call x86_amx @llvm.x86.tileloadd64.internal(i16 8, i16 32, i8* %src_ptr, i64 64)\n%stride = sext i16 32 to i64\ncall void @llvm.x86.tilestored64.internal(i16 8, i16 32, i8* %dst_ptr, i64 32, x86_amx %tile)\n\nReviewed By: LuoYuanke\n\nDifferential Revision: https://reviews.llvm.org/D153002\n",
            "commit_timestamp": 1687233325.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687248945.997154,
            "elapsed_time": 6238.428802728653,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "99610fa77df46fbc38d80e0b7ee02acfddbd032d",
            "commit_message": "Revert \"[AMDGPU] Start documenting calling conventions. NFC\"\n\nThis reverts commit aa7b127cb7314e326457d7f790d36db1cb74f63c.\n\n...because I really ought to install sphinx.\n",
            "commit_timestamp": 1687247752.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687263595.756006,
            "elapsed_time": 7666.275839567184,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6bea8331f9e09ba94a225c65becd4224a1a473af",
            "commit_message": "Revert \"Reland \"[DebugMetadata][DwarfDebug] Support function-local types in lexical block scopes (4/7)\" (2)\"\n\nThis reverts commit cb9ac7051589ea0d05507f9370d0716bef86b4ae.\nIt causes an assert in clang:\nvirtual void llvm::DwarfDebug::endFunctionImpl(const llvm::MachineFunction*): Assertion `LScopes.getAbstractScopesList().size() == NumAbstractSubprograms && \"getOrCreateAbstractScope() inserted an abstract subprogram scope\"' failed.\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1456288#c2\n",
            "commit_timestamp": 1687259327.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687292173.476478,
            "elapsed_time": 5904.445529699326,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6eca120dd8d3ec55bf8dc00b45366e8596359be3",
            "commit_message": "Improve MLIR \"view-op-graph\" to color operations according to their name\n\nDifferential Revision: https://reviews.llvm.org/D153290\n",
            "commit_timestamp": 1687291248.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687306645.696648,
            "elapsed_time": 6452.318295717239,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fabd16c7460e6cfae3106155ec79142bfa54db2e",
            "commit_message": "[lldb][Android] Add platform.plugin.remote-android.package-name\n\nWhen LLDB fails to pull file from a package directory due to security\nconstraint, user needs to set the package name to\n'platform.plugin.remote-android.package-name' property to run shell commands\nas the package user. (e.g. to get file with 'cat' and 'dd').\n\nhttps://cs.android.com/android/platform/superproject/+/master:\nsystem/core/run-as/run-as.cpp;l=39-61;\ndrc=4a77a84a55522a3b122f9c63ef0d0b8a6a131627\n\nDifferential Revision: https://reviews.llvm.org/D152933\n",
            "commit_timestamp": 1687303041.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687320912.535022,
            "elapsed_time": 6274.461288928986,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b1cab310739cd9f14e094b73dfe8301b8bb83b70",
            "commit_message": "[docs][TableGen][Target] Improve the documentation of the attribute value for SubtargetFeature.\n\nThe value \"true\" and \"false\" are treated specially and other values are treated as integers.\n\nReviewed By: arsenm\n\nDifferential Revision: https://reviews.llvm.org/D153180\n",
            "commit_timestamp": 1687319856.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687335427.079536,
            "elapsed_time": 6323.334947824478,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4d618b52f6e05e41d35f56653cb36bf7d4dc794e",
            "commit_message": "[llvm-exegesis] Introduce Subprocess Executor Mode\n\nThis patch introduces the subprocess executor mode. Currently, this new\nmode doesn't do anything fancy, just executing the same code that the\ninprocess executor would do, but within a subprocess. This sets up the\nability to add in many more memory-related features in the future.\n",
            "commit_timestamp": 1687334128.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687349925.487037,
            "elapsed_time": 6620.996736288071,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "10e3ed9919ffb68d5938ccd83414b766279ace03",
            "commit_message": "[Flang][Debug] NFC: Correct the REQUIRES line to use system-linux\n\nReviewed By: kkwli0\n\nDifferential Revision: https://reviews.llvm.org/D153126\n",
            "commit_timestamp": 1687345863.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687364111.799971,
            "elapsed_time": 6143.181931257248,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "aae155c50b07cf2358d72055457c133f4a71e1eb",
            "commit_message": "[RISCV] Use a build_vector instead of a chain insert_vector_elts for vXi1 build_vector lowreing.\n\nA build_vector is the canonical representation rather than multiple\ninsert_vector_elts.\n\nUnfortunately, this regresses quite a few tests now primarily due to not\nhaving a vmv.s.x special case, but I hope we can improve this with future\npatches.\n\nStress testing in our downstream found an infinite loop in DAG combine.\nThis patch breaks the infinite loop.\n\nThe insert_vector_element chain starts with a fixed vector undef.\nFixed vector undef is currently expanded to a build_vector of 0s\nwhich gets lowered to a vmv.v.i. The insert chain overwrites all\nelements so SimplifyDemandedVectorElts turns the vmv.v.i back into\nundef and the cycle repeats.\n\nWe probably should custom lower fixed vector undef to scalable\nvector undef. I think that would also fix the infinite loop, but\nI didn't test that.\n\nReviewed By: luke\n\nDifferential Revision: https://reviews.llvm.org/D153399\n",
            "commit_timestamp": 1687363066.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687378516.083321,
            "elapsed_time": 6189.700397729874,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e734a12b608f8c4a2b03fb2f3194de1cc3b43344",
            "commit_message": "Emit DW_LLE_base_address + DW_LLE_offset_pair for DWARF v5\n\nThis patch tries to reduce the size of the debug_loclist section by\nreplacing the DW_LLE_start_length opcodes currently emitted by dsymutil\nin favor of using DW_LLE_base_address + DW_LLE_offset_pair instead.\n\nThe DW_LLE_start_length is one AddressSize followed by a ULEB per entry,\nwhereas, the DW_LLE_base_address + DW_LLE_offset_pair will use one\nAddressSize for the base address, and then the DW_LLE_offset_pair is a\npair of ULEBs. This will be more efficient where a loclist fragment has\nmany entries.\n\nDifferential Revision: https://reviews.llvm.org/D153080\n",
            "commit_timestamp": 1687376609.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687393375.810495,
            "elapsed_time": 8150.390727758408,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0867d4157328169c570f4d1e9c01806624035873",
            "commit_message": "[flang] don't require -flang-experimental-exec flag anymore\n\nReviewed By: awarzynski, PeteSteinfeld\n\nDifferential Revision: https://reviews.llvm.org/D153379\n",
            "commit_timestamp": 1687391272.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687407424.770336,
            "elapsed_time": 6035.089504480362,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "845ea71d0bf4b1e423858bf8c5c94c8b7f5980ec",
            "commit_message": "[RISCV] Separate scheduler calsses for vfredmax/min\n\nvfredmax/min may have different scheduling behavior on different\nmicroarchitectures compared to other reductions. This different\nbehavior can be described by giving vfredmax/min separate\nscheduling resources.\n\nDifferential Revision: https://reviews.llvm.org/D153450\n",
            "commit_timestamp": 1687402583.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687422013.638525,
            "elapsed_time": 8024.970028400421,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7c2604ca196c3ba0247509c0fde350e23f0cccb0",
            "commit_message": "[BOLT][RISCV] Add tests for simple CFG transformations\n\nReviewed By: rafauler\n\nDifferential Revision: https://reviews.llvm.org/D153346\n",
            "commit_timestamp": 1687419354.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687436437.452276,
            "elapsed_time": 8530.08310675621,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "68a09c929003bf6af41162ed9e6dc4713d96a997",
            "commit_message": "[AArch64] Remove G_VECREDUCE_FADD from selectReduction\n\nI believe that for fp reductions we can use the imported tablegen patterns for\nselection, as opposed to going via selectReduction. Integer reductions are more\ndifficult, as the return types in selection DAG will be promoted to i32.\n\nDifferential Revision: https://reviews.llvm.org/D153244\n",
            "commit_timestamp": 1687434414.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687450654.670855,
            "elapsed_time": 7164.9377999305725,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d49984fa4f83d6fca83b2c594a2475956de170f1",
            "commit_message": "[SimplifyCFG] Add option to not speculate blocks\n\nRequired for phase ordering changes to not regress Rust code with D145265.\n\nReviewed By: nikic\n\nDifferential Revision: https://reviews.llvm.org/D153391\n",
            "commit_timestamp": 1687449100.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687465209.22629,
            "elapsed_time": 7363.508020162582,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "982a87ab74d8d050ae56164fcead7cf19038b077",
            "commit_message": "[CLANG] Fix potential null pointer dereference bugs\n\nThis patch uses castAs instead of getAs which will assert if the type doesn't match and adds nullptr check if needed.\n\nAlso this patch improves the codes and passes I.getData() instead of doing a lookup in dumpVarDefinitionName()\nsince we're iterating over the same map in LocalVariableMap::dumpContex().\n\nReviewed By: aaron.ballman, aaronpuchert\n\nDifferential Revision: https://reviews.llvm.org/D153033\n",
            "commit_timestamp": 1687463918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687479699.462996,
            "elapsed_time": 7497.35427737236,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "28fb39f16af1003e53008b75c11127b3288742f8",
            "commit_message": "[lldb] Adjust for changes in objc runtime\n\nThe Objective-C runtime and the shared cache has changed slightly.\nGiven a class_ro_t, the baseMethods ivar is now a pointer union and may\neither be a method_list_t pointer or a pointer to a relative list of\nlists. The entries of this relative list of lists are indexes that refer\nto a specific image in the shared cache in addition to a pointer offset\nto find the accompanying method_list_t. We have to go over each of these\nentries, parse it, and then if the relevant image is loaded in the\nprocess, we add those methods to the relevant clang Decl.\n\nIn order to determine if an image is loaded, the Objective-C runtime\nexposes a symbol that lets us determine if a particular image is loaded.\nWe maintain a data structure SharedCacheImageHeaders to keep track of\nthat information.\n\nThere is a known issue where if an image is loaded after we create a\nDecl for a class, the Decl will not have the relevant methods from that\nimage (i.e. for Categories).\n\nrdar://107957209\n\nDifferential Revision: https://reviews.llvm.org/D153597\n",
            "commit_timestamp": 1687477342.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687493720.369274,
            "elapsed_time": 5919.502574682236,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d4d8cd8446f66be8d182bcc6337e5b39b1203cc5",
            "commit_message": "[libc] Factor specifics of packet type out of process\n\nNFC. Simplifies process slightly, gives more options for testing it.\n\nReviewed By: jhuber6\n\nDifferential Revision: https://reviews.llvm.org/D153604\n",
            "commit_timestamp": 1687488323.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687508352.047689,
            "elapsed_time": 6270.276419639587,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3f77724de7bc84f5f6a89b81de990b2c49f93953",
            "commit_message": "[TargetLowering] Better code generation for ISD::SADDSAT/SSUBSAT when operand sign is known\n\nWhen the sign of either of the operands is known, it is possible to\ndetermine what the saturating value will be without having to compute it\nusing the sign bits.\n\nDifferential Revision: https://reviews.llvm.org/D153575\n",
            "commit_timestamp": 1687506636.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687522714.303462,
            "elapsed_time": 7817.262895822525,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5183ca877982a6a5cbe84c9e73f99e1d289e50be",
            "commit_message": "[AMDGPU][AsmParser] Eliminate cvtMtbuf().\n\nNow that we have proper support for optional operands, the standard LLVM\nmachinery can take care of converting parsed instructions to MCInsts.\nThere are likely more cases where the conversion can be done\nautomatically, probably with some additional treatment. The plan is to\naddress them separately.\n\nPart of <https://github.com/llvm/llvm-project/issues/62629>.\n\nReviewed By: arsenm, foad\n\nDifferential Revision: https://reviews.llvm.org/D153565\n",
            "commit_timestamp": 1687520632.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687537280.430674,
            "elapsed_time": 7717.579576253891,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5ddd561cb5e2d2c55f4d42912a96d1e0982697b1",
            "commit_message": "disable execute-only tests which are failing with expensive checks\n\nTemporarily disabling the execute-only tests. We recently added codegen for\narmv6-m, which is still in heavy development (D152795).\n\nDisabling the tests while we're figuring out what's going on is probably the\nleast disruptive option, as a patch dependent on it also already landed.\n",
            "commit_timestamp": 1687534524.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687551626.97492,
            "elapsed_time": 7767.715786218643,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c52268a9afe96078fde9ee778577341645465c38",
            "commit_message": "[ConstraintElim] Add tests to check negated OR simplifications.\n\nAdditional test coverage for D151799.\n",
            "commit_timestamp": 1687550486.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687565752.905847,
            "elapsed_time": 6332.204815864563,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a2a4b605e2aada7fff2d88b830e420f966e0a16e",
            "commit_message": "[RISCV] Split ReadSFB into ReadSFBJmp and ReadSFBALU.\n\nThe operands may need to be available at different times.\n",
            "commit_timestamp": 1687564365.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687580268.945376,
            "elapsed_time": 6568.608646869659,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "68ed9d94720c50a48bc7d5d1321b37a5381a54fd",
            "commit_message": "[GlobalIsel][X86] G_STORE extension\n\nReviewed By: arsenm\n\nDifferential Revision: https://reviews.llvm.org/D153643\n",
            "commit_timestamp": 1687578690.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687594485.60826,
            "elapsed_time": 6157.780821084976,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e5c7904fa0bfa5a24f192cfa7b9116560e1f5d43",
            "commit_message": "[C++20][Modules] Implement P2615R1 revised export diagnostics.\n\nIt has been reported to that the current clang  errors for, specifically,\nstatic_assert in export contexts are a serious blocker to adoption of\nmodules in some cases.\n\nThere is also implementation divergence with GCC and MSVC allowing the\nconstructs mentioned below where clang currently rejects them with an\nerror.\n\nThe category of errors [for declarations in an exported context] is:\n(unnamed, static_assert, empty and asm decls). These are now permitted\nafter P2615R1 which was approved by WG21 as a DR (and thus should be\napplied to C++20 as well).\n\nThis patch removes these diagnostics and amends the testsuite accordingly.\n\nDifferential Revision: https://reviews.llvm.org/D152946\n",
            "commit_timestamp": 1687593719.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687609138.874511,
            "elapsed_time": 7750.430412769318,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "eaaacc3c651e5b2c23bfa9648b6b0d69aab64d00",
            "commit_message": "[gn build] Port 7f6e0052a97f\n",
            "commit_timestamp": 1687604516.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687623592.214873,
            "elapsed_time": 7731.058384895325,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e0e998f8d8ec83e69fb00062fb7a515451e42d8d",
            "commit_message": "[GlobalIsel][X86]] Legalize G_CONSTANT_FOLD_BARRIER\n\nReviewed By: RKSimon\n\nDifferential Revision: https://reviews.llvm.org/D153684\n",
            "commit_timestamp": 1687619991.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687637708.117699,
            "elapsed_time": 6464.326699972153,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "08be7791e195272dca8c9ecb075aa3d86569f9f8",
            "commit_message": "[DWARF] Remove remnant .zdebug section recognition\n\nThere is a minor behavior difference that is not worth testing for the obsoleted\nformat. Previously, llvm-dwarfdump considers .zdebug_info as a debug section but\ndoes not decompress it, leading to a warning when the content cannot be parsed.\nNow llvm-dwarfdump just ignores the section without a warning.\n",
            "commit_timestamp": 1687630032.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687652576.144408,
            "elapsed_time": 7687.849219322205,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "75bd41f61d3247d4394ad0c46d23cc7c62261d63",
            "commit_message": "[mlir][polyapprox] Use llvm::numbers for constants.\n\n Fixes windows build.\n",
            "commit_timestamp": 1687651419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687666526.170608,
            "elapsed_time": 6517.42805147171,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3eee5aa528abd67bb6d057e25ce1980d0d38c445",
            "commit_message": "[COFF] Support -gsplit-dwarf for COFF on Windows\n\nD152340 has split WinCOFFObjectWriter to WinCOFFWriter. This patch adds\nanother WinCOFFWriter as DwoWriter to write Dwo sections to dwo file.\nDriver options are also updated accordingly to support -gsplit-dwarf in\nCL mode.\n\ne.g. $ clang-cl  -c -gdwarf -gsplit-dwarf foo.c\n\nLike what -gsplit-dwarf did in ELF, using this option will create DWARF object\n(.dwo) file. DWARF debug info is split between COFF object and DWARF object\nfile. It can reduce the executable file size especially for large project.\n\nReviewed By: skan, MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D152785\n",
            "commit_timestamp": 1687665279.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687681026.283521,
            "elapsed_time": 6948.637212276459,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3cbd56dca11f2ec4d1131152e3b3ae43ded5432e",
            "commit_message": "[RISCV] Add missing Read classes to some compressed instructions.\n\nReviewed By: wangpc\n\nDifferential Revision: https://reviews.llvm.org/D153669\n",
            "commit_timestamp": 1687679306.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687695389.473335,
            "elapsed_time": 6285.754617929459,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "54210573ae918f6e0cab59bc5955a66bc34b5f6c",
            "commit_message": "[Clang][NFC] Add feature test macro checks for C++2c\n",
            "commit_timestamp": 1687681662.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687709733.559124,
            "elapsed_time": 6193.264384269714,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3e4820b91a3e2a43506f47478ced01a4d683b83a",
            "commit_message": "[ConstraintElim] Add uses to remark tests to make it more robust.\n\nAdd uses of conditions, so the test keeps testing what it is meant to\ntest after D153660.\n",
            "commit_timestamp": 1687708724.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687724321.410574,
            "elapsed_time": 6416.049088716507,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8f124e7302294a5f74ebc158ae1b43e09d85e83b",
            "commit_message": "Revert \"[clang-tidy] Add modernize-printf-to-std-print check\"\n\nThis reverts commit 81418ada06abbeba9fd0ea17282cce542cd07706.\n",
            "commit_timestamp": 1687722052.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687738651.292509,
            "elapsed_time": 6633.334537744522,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c3b27c236d6a495acbe2ba95c43faf9a98e81a46",
            "commit_message": "RegAllocGreedy: Fix assert with remarks on unassigned subregisters\n\nThis tried to query the physical subregister on virtual registers\nif they were left unassigned.\n",
            "commit_timestamp": 1687735585.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687753030.772678,
            "elapsed_time": 6826.981004238129,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d40dd6be00d881a13a881f02ffa10b48d1441615",
            "commit_message": "Revert \"[llvm-exegesis] Introduce SubprocessMemory Utility Class\"\n\nThis reverts commit 0b6b400b98b921279fc08c63a2a68ebfcb12a3e2.\n\nThe sporadic test failures were fixed during this land, but I forgot to\nfix the build failures on certain platforms (seems to mostly be\nAArch64/PPC) that result from them not being able to find the symbols\nfor shm_open and shm_unlink.\n",
            "commit_timestamp": 1687749343.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687782088.075065,
            "elapsed_time": 8632.520146846771,
            "x64": true,
            "actual_files_count": 1695,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f686e4bbc20a837ff5230656431aec1abbd5f872",
            "commit_message": "[Remarks] Make sure -fdiagnostics-hotness-threshold implies -fdiagnostics-show-hotness\n\nWhen asking for -fdiagnostics-hotness-threshold, we currently require\n-fdiagnostics-show-hotness otherwise we silently display nothing.\n\nI don't see a scenario where that makes sense, so have one option impy\nthe other.\n\nDifferential Revision: https://reviews.llvm.org/D153746\n",
            "commit_timestamp": 1687780090.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687796298.088528,
            "elapsed_time": 7348.413031339645,
            "x64": true,
            "actual_files_count": 1698,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3c196f1658f3c5fd368fdaa3c2fb165ed6d7fefa",
            "commit_message": "[mlir][transform] Remove redundant handle check in `replacePayload...`\n\nDifferential Revision: https://reviews.llvm.org/D153766\n",
            "commit_timestamp": 1687795146.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687810917.632162,
            "elapsed_time": 8074.276945114136,
            "x64": true,
            "actual_files_count": 1698,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "aa2a4ce72b19e01c4322ef62d109af08a25f5e3e",
            "commit_message": "[gn] prepare for porting f8927838fa8558702794\n",
            "commit_timestamp": 1687809679.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687825207.842878,
            "elapsed_time": 6551.576022148132,
            "x64": true,
            "actual_files_count": 1698,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6ee1aba8acc1255a6eb9e34788a2376c6357458b",
            "commit_message": "[mlir][bytecode] Fix lazy loading of non-isolated regions\n\nThe bytecode reader currently assumes all regions can be lazy\nloaded, which breaks reading any non-isolated region. This patch\nfixes that by properly handling nested non-lazy regions, and only\nconsiders isolated regions as lazy.\n\nDifferential Revision: https://reviews.llvm.org/D153795",
            "commit_timestamp": 1687822400.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687839404.27819,
            "elapsed_time": 7525.287563085556,
            "x64": true,
            "actual_files_count": 1698,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ebd0b8a0472b865b7eb6e1a32af97ae31d829033",
            "commit_message": "[flang][hlfir] Special handling for temporary LHS in AssignOp.\n\nWhen `AssignOp` is used with LHS that is a compiler generated temporary\nspecial care must be taken to initialize the temporary and avoid\nfinalizations of its components. This change-set adds optional\n`temporary_lhs` attribute for `AssignOp` to convey this information\nto HLFIR-to-FIR conversion pass. Currently, this results in\ncalling `AssignTemporary` runtime for doing the assignment.\n\nReviewed By: jeanPerier, tblah\n\nDifferential Revision: https://reviews.llvm.org/D152482\n",
            "commit_timestamp": 1687829290.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687853837.14942,
            "elapsed_time": 6781.64977145195,
            "x64": true,
            "actual_files_count": 1698,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d98e44b34364f3e039c766adec470c5be517f1b4",
            "commit_message": "[AMDGPU][DAGISel] Be more flexible about what calls are allowed\n\nRemove DAGISel checks on calling conventions. GlobalISel doesn't have\nthese checks either and we prefer it that way (see D152794).\n\nAdd a simple test like the one introduced in D117479 for GlobalISel.\n\nDifferential Revision: https://reviews.llvm.org/D153535\n",
            "commit_timestamp": 1687852178.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687867906.235666,
            "elapsed_time": 4502.770094871521,
            "x64": true,
            "actual_files_count": 1698,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "268032f6f10d595bb723f6b4a21632a9f3b35be8",
            "commit_message": "[clang] Add myself as code owner for the new constant interpreter\n\nAs discussed in the RFC at\nhttps://discourse.llvm.org/t/rfc-proposing-a-code-owner-for-the-experimental-constexpr-interpreter/71514\n",
            "commit_timestamp": 1687865943.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687882588.961381,
            "elapsed_time": 5800.3620092868805,
            "x64": true,
            "actual_files_count": 1698,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d2e7d3e6adc5757b494fba273cbed1c9de7b3247",
            "commit_message": "[gn build] Port 58056ae29963\n",
            "commit_timestamp": 1687880589.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687896908.925449,
            "elapsed_time": 6017.779262065887,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d983e833dcbbad11501203c884959cca6562fd25",
            "commit_message": "[RISCV] Simplify pseudo classes used by v(f)merge [nfc]\n\nThis is mostly hand inlining multiclass definitions, and simplifying for the fact that non-default template values were never actually used.\n",
            "commit_timestamp": 1687896118.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687911632.753958,
            "elapsed_time": 7407.10235118866,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1764924f3940a8a05b58f68cc6b7ce414f2a2f88",
            "commit_message": "[SCEV] Optimize FoldID\n\nImprove compile time\n\nhttps://llvm-compile-time-tracker.com/compare.php?from=773e5dfbc6bf4d4c5be568a039661e9baad80d15&to=7ba15f3a4b59181110e73dc397a9fe56165a2b73&stat=instructions:u\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D144335\n",
            "commit_timestamp": 1687910374.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687925742.378196,
            "elapsed_time": 6260.137188911438,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d39b4ce3ce8a3c256e01bdec2b140777a332a633",
            "commit_message": "[test] Replace aarch64-*-eabi with aarch64\n\nUsing \"eabi\" for aarch64 targets is a common mistake and warned by Clang Driver.\nWe want to avoid it elsewhere as well. Just use the common \"aarch64\" without\nother triple components.\n",
            "commit_timestamp": 1687921372.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687940244.099363,
            "elapsed_time": 6464.04749751091,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b45a73f4d07424b37395f543974ef1ef6dec6332",
            "commit_message": "[InstCombine] Fold binop of shifts with related amounts\n\nFold\n\n  binop(shift(ShiftedC1, ShAmt), shift(ShiftedC2, add(ShAmt, AddC)))\n    ->\n  shift(binop(ShiftedC1, shift(ShiftedC2, AddC)), ShAmt)\n\nwhere both shifts are the same and AddC is a valid shift amount.\n\nProofs: https://alive2.llvm.org/ce/z/PhVVeg\n\nDifferential Revision: https://reviews.llvm.org/D152927\n",
            "commit_timestamp": 1687938876.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687954989.698389,
            "elapsed_time": 8134.085981369019,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8ceb4190fe9baa617bc65e99f0296531c88a5a79",
            "commit_message": "[clangd] Fix some typos, NFC\n",
            "commit_timestamp": 1687953921.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687969128.918379,
            "elapsed_time": 7744.278812646866,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "25b51191ff4f0377ecee1943578e59149e415eab",
            "commit_message": "[doc] Fix link typo\n",
            "commit_timestamp": 1687966061.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687983270.42784,
            "elapsed_time": 5879.851825714111,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "9c7aab362a4579d5ce26f4af2564b04720ec23a2",
            "commit_message": "[SLP] Use vector types for cmp alt instructions costs\n\nSimilar to the other code that costs main/alt instructions, the cmp should be\nusing the VecTy for the costs, not the ScalarTy.\n\nOne of the tests look like it gets worse just because it is not simplified to\n0.\n\nDifferential Revision: https://reviews.llvm.org/D153507\n",
            "commit_timestamp": 1687982549.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1687997739.887377,
            "elapsed_time": 5813.611102342606,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "36999318f09122fa41baff838f46c753db078275",
            "commit_message": "[ConstraintElim] Add tests with phis and different alloc sizes/end ptrs.\n\nExtra tests for D152730\n",
            "commit_timestamp": 1687990326.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1688012201.974327,
            "elapsed_time": 7413.733083248138,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "621fafdaad06889477515de82ed85217ce08ccc6",
            "commit_message": "[ValueTracking] Guaranteed well-defined if parameter has a dereferecable_or_null attribute\n\nReviewed By: nikic\n\nDifferential Revision: https://reviews.llvm.org/D153945\n",
            "commit_timestamp": 1688010304.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1688026696.385631,
            "elapsed_time": 7786.549655675888,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f5f5c4726ca8319af8ffff02e5b36f51f9afb9a7",
            "commit_message": "[FunctionAttrs] Regenerate test checks (NFC)\n",
            "commit_timestamp": 1688025556.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1688041352.896593,
            "elapsed_time": 8230.44091796875,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6cda80b918dd06e7d16ce7adde5304cd33fd14d1",
            "commit_message": "[CSKY][test][NFC] Add tests of ANDI/ORI\n\nThese tests will be optimized with BSETI32/BCLRI32\nin the future.\n\nReviewed By: zixuan-wu\n\nDifferential Revision: https://reviews.llvm.org/D153613\n",
            "commit_timestamp": 1688038309.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1688055445.823925,
            "elapsed_time": 6620.635809659958,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6bf66d839f1386c06e19a3621c02c8fc6a14f94f",
            "commit_message": "[clang-format] Indent Verilog struct literal on new line\n\nBefore:\n```\nc = //\n'{default: 0};\n```\n\nAfter:\n```\nc = //\n    '{default: 0};\n```\n\nIf the line has to be broken, the continuation part should be\nindented.  Before this fix, it was not the case if the continuation\npart was a struct literal.  The rule that caused the problem was added\nin 783bac6b.  It was intended for aligning the field labels in\nProtoBuf.  The type `TT_DictLiteral` was only for colons back then, so\nthe program didn't have to check whether the token was a colon when it\nwas already type `TT_DictLiteral`.  Now the type applies to more\nthings including the braces enclosing a dictionary literal.  In\nVerilog, struct literals start with a quote.  The quote is regarded as\nan identifier by the program.  So the rule for aligning the fields in\nProtoBuf applied to this situation by mistake.\n\nReviewed By: HazardyKnusperkeks\n\nDifferential Revision: https://reviews.llvm.org/D152623\n",
            "commit_timestamp": 1688053124.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688070098.048727,
            "elapsed_time": 7331.522525310516,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "9979417d4db4c2af3e2a722f8d23a385cd1cac8e",
            "commit_message": "Revert D145226 \"[mlir][Transforms][NFC] CSE: Add non-pass entry point\"\n\nThis reverts commit 189033e6bede96de0d74e61715fcd1b48d95e247.\n\nThis commit causes memory leak. See comments on D145226.\n",
            "commit_timestamp": 1688068411.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688084332.582545,
            "elapsed_time": 6967.265494585037,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ad451146e8f59de76e393094d3aafc97a854c40b",
            "commit_message": "Add 'target dump section-load-list' for lldb debugging\n\nA command to dump the Target's SectionLoadList, to debug\npossible issues with the table.\n\nDifferential Revision: https://reviews.llvm.org/D154169\n",
            "commit_timestamp": 1688083374.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688098637.209807,
            "elapsed_time": 7954.234175920486,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b4609b4106f3f12882434ac26d8c1c12f57d8dc7",
            "commit_message": "[RISCV] Mark zvkn* and zvks* extensions as enabled when all their subextensions are.\n\nThese extensions don't contain any instructions on their own, they\nare just aliases for a set of extensions. We should set the preprocessor\ndefine anytime all the sub-extensions are supported.\n\nReviewed By: kito-cheng, eopXD\n\nDifferential Revision: https://reviews.llvm.org/D154171\n",
            "commit_timestamp": 1688097535.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688113075.047026,
            "elapsed_time": 5983.555043458939,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2feac34aeeaf67943492a5adfe45c3f4767bdfe4",
            "commit_message": "[clangd] Replace writeFileAtomically with writeToOutput, NFC\n\nWe're going to deprecate the writeFileAtomically API, in favour of\nwriteToOutput.\n",
            "commit_timestamp": 1688112162.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688127409.357732,
            "elapsed_time": 7638.3548176288605,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b23c8225e8f914d9b0fe987c443eb19fca05344e",
            "commit_message": "[mlir][NFC] Clean up builder usage around constants/non-foldable ops\n\n* Use `create` instead of `createOrFold` for constant ops. Constants cannot be folded any further.\n* Use `create` instead of `createOrFold` for ops that do not have a folder.\n* Use C++ op builders that take an `int` instead of creating a `ConstantIndexOp`.\n* Create `tensor::DimOp` instead of `linalg::createOrFoldDimOp` when it is certain that the operand is a tensor.\n\nDifferential Revision: https://reviews.llvm.org/D154196\n",
            "commit_timestamp": 1688126202.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688142115.507581,
            "elapsed_time": 8029.22966003418,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a8821c8b1ca152827cdab96fe4cb49f3c3c876a1",
            "commit_message": "[NVPTX] added a hidden option to control NVPTXLowerUnreachable pass.\n\nWe've ran into an issue where the pass breaks a handful of our internal tests\nand need a way to temporarily disable the pass while we're investigating.\n\nDifferential Revision: https://reviews.llvm.org/D154106\n",
            "commit_timestamp": 1688140343.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688156264.224324,
            "elapsed_time": 6562.714650154114,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "52a280bb60c20e12df3e1e91701f6338e03595d1",
            "commit_message": "[UBSan] Fix shared library linking in test for Darwin.\n\nWithout rpath information, the test fails on some Darwin platforms since the binary fails to find the shared library.\n\nrdar://110010041\n\nDifferential Revision: https://reviews.llvm.org/D154003\n",
            "commit_timestamp": 1688155229.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688170838.352984,
            "elapsed_time": 8017.688149690628,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b43375bb8195bd451850f42b7b99548aa1ba43fd",
            "commit_message": "[lldb] Add log indicating which kind of data formatter\n\nThe `formatter` logs include a function name, but these functions are mostly templates\nand the template type parameter is not printed, which is useful context.\n\nThis change adds a new log which is printed upon entry of `FormatManager::Get`, which\nshows the formatter context as either `format`, `summary`, or `synthetic`.\n\nDifferential Revision: https://reviews.llvm.org/D154128\n",
            "commit_timestamp": 1688169074.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688185000.398716,
            "elapsed_time": 6320.557685136795,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "afb2743778689b585ce5539ee352e65a918835e2",
            "commit_message": "[AArch64] Remove duplicate code (NFC)\n",
            "commit_timestamp": 1688179071.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688199295.995818,
            "elapsed_time": 6372.730934858322,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "dc6c8b8d1e357acf6440824afaf6b6547b34aeeb",
            "commit_message": "[LTO] Fix a missing comment\n\nAddress a missing code-review comment: https://reviews.llvm.org/D154191#inline-1490951\n",
            "commit_timestamp": 1688193225.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688213722.312472,
            "elapsed_time": 6327.637300252914,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "81ad5a5cb87740c62b30a4f8232770bd5eb7fc45",
            "commit_message": "[libc++] Implement stringbuf members of P0408R7 (Efficient Access to basic_stringbuf's Buffer)\n\nReviewed By: #libc, Mordante\n\nDifferential Revision: https://reviews.llvm.org/D153709\n",
            "commit_timestamp": 1688211788.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688228120.651715,
            "elapsed_time": 6581.002672195435,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "81ad5a5cb87740c62b30a4f8232770bd5eb7fc45",
            "commit_message": "[libc++] Implement stringbuf members of P0408R7 (Efficient Access to basic_stringbuf's Buffer)\n\nReviewed By: #libc, Mordante\n\nDifferential Revision: https://reviews.llvm.org/D153709\n",
            "commit_timestamp": 1688211788.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688242620.149763,
            "elapsed_time": 6335.010083436966,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d0b0dbeae17756f7ba99e0867cfb867fcb375066",
            "commit_message": "[msan] Intercept dladdr1, and refactor dladdr\n\nThis patch adds an msan interceptor for dladdr1 (with support\nfor RTLD_DL_LINKMAP and RTLD_DL_SYMENT) and an accompanying\ntest. It also adds a helper file, msan_dl.cpp, that contains\nUnpoisonDllAddrInfo (refactored out of the dladdr interceptor)\nand UnpoisonDllAddr1ExtraInfo.\n\nDifferential Revision: https://reviews.llvm.org/D154272\n",
            "commit_timestamp": 1688239107.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688257031.240547,
            "elapsed_time": 6191.982011318207,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6e54fccede402c9ed0e8038aa258a99c5a2773e5",
            "commit_message": "[AArch64] Emit fewer CFI instructions for synchronous unwind tables\n\nThe instruction-precise, or asynchronous, unwind tables usually take up\nmuch more space than the synchronous ones. If a user is concerned about\nthe load size of the program and does not need the features provided\nwith the asynchronous tables, the compiler should be able to generate\nthe more compact variant.\n\nThis patch changes the generation of CFI instructions for these cases so\nthat they all come in one chunk in the prolog; it emits only one\n`.cfi_def_cfa*` instruction followed by `.cfi_offset` ones after all\nstack adjustments and register spills, and avoids generating CFI\ninstructions in the epilog(s) as well as any other exceeding CFI\ninstructions like `.cfi_remember_state` and `.cfi_restore_state`.\nEffectively, it reverses the effects of D111411 and D114545 on functions\nwith the `uwtable(sync)` attribute. As a side effect, it also restores\nthe behavior on functions that have neither `uwtable` nor `nounwind`\nattributes.\n\nDifferential Revision: https://reviews.llvm.org/D153098\n",
            "commit_timestamp": 1688254269.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688271535.635651,
            "elapsed_time": 7150.657102584839,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "289828b1c0a6bc6eed8a634376a5152adae2283b",
            "commit_message": "[Driver][MSVC] Move lld specific flags before inputs\n\nCheck linker earlier so that lld specific flags can be append before\ninputs. Just like position of other flags. The intention is to make\nexpanded cmd more consistent and elegent so that user can easily\nlook for inputs when using -###.\n\nReviewed By: mstorsjo\n\nDifferential Revision: https://reviews.llvm.org/D154176\n",
            "commit_timestamp": 1688261349.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688285684.711378,
            "elapsed_time": 5831.0139067173,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ff286d7178db7dfcd92724cf87dd8554213e9f23",
            "commit_message": "[llvm][NFC] Stop plenking in an assertion message\n\nRemove whitespace before an exclamation mark.\n",
            "commit_timestamp": 1688275328.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688300213.220981,
            "elapsed_time": 6141.699929714203,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8269fd2db50bf97ae3b6e928365d157314e491c8",
            "commit_message": "[GlobalIsel][X86] Add initial scalar G_MUL/G_SMULH/G_UMULH instruction selection handling\n\nReuse the existing div/rem selection code to also handle mul/imul to support G_MUL/G_SMULH/G_UMULH, as they have a similar pattern using rDX/rAX for mulh/mul results, plus the AH/AL support for i8 multiplies.\n",
            "commit_timestamp": 1688299001.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688314810.364401,
            "elapsed_time": 7333.303974866867,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8bdcf57e60f508b11b519722ae9529a5301bb567",
            "commit_message": "Revert \"[MC] Allow conversion between ParseStatus and MatchOperandResultTy\"\n\nThis reverts commit 15ef9b26adeb8c9dd98228fc26757966d8355986.\n\nGoing to put it for review with larger set of differences.\n",
            "commit_timestamp": 1688312400.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688329012.235614,
            "elapsed_time": 6334.782678365707,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7b69eabdc18799e4a6c61b7ffff9b52d330c6ada",
            "commit_message": "[C11] Correct global atomic pointer initialization from an integer constant\n\nThis is a follow-up to 2e275e24355cb224981f9beb2b026a3169fc7232 and\n1395cde24b3641e284bb1daae7d56c189a2635e3 which corrects a missed case:\ninitializing an _Atomic(T *) from a null pointer constant in the form\nof the integer literal 0.\n\nFixes https://github.com/llvm/llvm-project/issues/63550\nDifferential Revision: https://reviews.llvm.org/D154284\n",
            "commit_timestamp": 1688323281.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688343585.882238,
            "elapsed_time": 7729.164016962051,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "38785647121cef0adde4d3adbe5c5fe21b83d32b",
            "commit_message": "[mlir] Use reinterpret cast to construct TypedValue from a pointer\n\nValue is not convertible to TypedValue<T>, use explicit constructor from a pointer\n\nDifferential Revision: https://reviews.llvm.org/D154313\n",
            "commit_timestamp": 1688339880.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688358025.978901,
            "elapsed_time": 6763.833055973053,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "9bdf04c8f9d40d0aa4cbaf011b1877d88dc6dbc6",
            "commit_message": "[Coroutines] Prevent infinite loop in simplifyTerminatorLeadingToRet\n\nClose https://github.com/llvm/llvm-project/issues/63639\n\nThis comes from the oversight the refactoring that we missed a `return\nfalse;` in the loop.\n",
            "commit_timestamp": 1688352038.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688372178.044164,
            "elapsed_time": 6046.56241607666,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "653920cb158bf895cdb0b32098a105f26007290a",
            "commit_message": "[Tooling][Rewriter] Remove the redundant AtomicallyMovedFile Implementation.\n\nReplace it with llvm::writeToOutput.\n\nReviewed By: avl\n\nDifferential Revision: https://reviews.llvm.org/D153741\n",
            "commit_timestamp": 1688369891.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688386560.147744,
            "elapsed_time": 5613.50511431694,
            "x64": true,
            "actual_files_count": 1700,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "783222efded0ac5f7d76ea41ec03eb2bf83ff918",
            "commit_message": "[flang] Fix codegen of subcomponents' indexing\n\nIdentify multidimensional array indices in subcomponents and\nconvert them from column-major to row-major ordering.\n\nThis fixes codegen for fircg.ext_array_coor, fircg.ext_embox and,\npossibly, fircg.ext_rebox.\n\nFixes https://github.com/llvm/llvm-project/issues/62038\n\nReviewed By: jeanPerier\n\nDifferential Revision: https://reviews.llvm.org/D154214\n",
            "commit_timestamp": 1688385593.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688401038.642215,
            "elapsed_time": 6207.0449655056,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "aa82b562b7b4b36f4a3d04e80e5743028bddd577",
            "commit_message": "[CodeGen] MRI call back in TargetMachine\n\nIt is needed for target specific initializatons.\n\nReviewed By: qcolombet\n\nDifferential Revision: https://reviews.llvm.org/D143758\n",
            "commit_timestamp": 1688399977.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688415508.833224,
            "elapsed_time": 6963.9703278541565,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b288e668626bed43662669acb578fe05b14a355a",
            "commit_message": "[Polly][FIX] Adjust enum after D153305\n",
            "commit_timestamp": 1688413768.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688429949.508097,
            "elapsed_time": 6156.2783052921295,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cff99b76ac4f502ceba897a62db658667f1237f3",
            "commit_message": "Add a flag to disable \"duplicate definition of category\" warnings\n\nDifferential Revision: https://reviews.llvm.org/D154251\n",
            "commit_timestamp": 1688426722.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688444384.651923,
            "elapsed_time": 8002.557789325714,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7aebe4eaaa10155dc3c36196a8ce8424beefa6da",
            "commit_message": "[CodeGen] Move lowerCopy from expandPostRA to TII\n\nThis will allow targets to lower their 'copy' instructions easily.\n\nReviewed By: arsenm\n\nDifferential Revision: https://reviews.llvm.org/D152261\n",
            "commit_timestamp": 1688441689.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688458874.340116,
            "elapsed_time": 7956.613182544708,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "14d073b50f960674a62ef8ad2c34f6fc1e9b0061",
            "commit_message": "Revert \"[mlir][transform] Allow arbitrary indices to be scalable\"\n\nThis reverts commit 048764f23a380fd6f8cc562a0008dcc6095fb594.\n\nBreaks https://lab.llvm.org/buildbot/#/builders/61/builds/45451\n",
            "commit_timestamp": 1688456452.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688473048.090572,
            "elapsed_time": 7568.164654970169,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f8e59b09f42ccc4d386b0563fc89807e4d5b35a2",
            "commit_message": "[mlir][arith] Move getNeutralElement from Linalg utils to arith\n\nThis consolidates where this kind of implementations lives and\nrefactor the code to have more code sharing.\n\nNFC\n\nDifferential Revision: https://reviews.llvm.org/D154362\n",
            "commit_timestamp": 1688471988.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688487524.993975,
            "elapsed_time": 7682.072260141373,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0d40973644ba7f3efe666735306646579a7ffe5e",
            "commit_message": "[clang][Interp][NFC] Move CastFP to Interp.h\n\nIt's not a Check* function, so try to stay consistent and move this to\nthe header.\n",
            "commit_timestamp": 1688484928.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688502038.666828,
            "elapsed_time": 8845.028197050095,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b4b532a9562a1ebca347edc566363fba0531115b",
            "commit_message": "[RISCV] Replace OperandMatchResultTy with ParseStatus (NFC)\n\nParseStatus is slightly more convenient to use due to implicit\nconversion from bool, which allows to do something like:\n```\n  return Error(L, \"msg\");\n```\nwhen with MatchOperandResultTy it had to be:\n```\n  Error(L, \"msg\");\n  return MatchOperand_ParseFail;\n```\nIt also has more appropriate name since parse* methods are not only for\nparsing operands.\n\nReviewed By: asb\n\nDifferential Revision: https://reviews.llvm.org/D154291\n",
            "commit_timestamp": 1688499142.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688516153.899831,
            "elapsed_time": 6317.9965279102325,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f171c76b68ef465bf49a0f193feb9e43c819b859",
            "commit_message": "[ASanAbi][Darwin] Build ios stable ABI library\n\nIn the initially commit, we limited the static archive to osx.\n\nThis patch removes that limitation.\n\nDifferential Revision: https://reviews.llvm.org/D153789\n",
            "commit_timestamp": 1688506379.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688530525.787701,
            "elapsed_time": 5928.398044586182,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b89b3cdb612f43e91c7330a13c3f60a1ad251e50",
            "commit_message": "[mlir][TestDialect] Fix invalid custom op printers\n\nThis fixes a few custom printers which were printing IR that couldn't be\nround-tripped.\n\nReviewed By: rriddle\n\nDifferential Revision: https://reviews.llvm.org/D150080\n",
            "commit_timestamp": 1688527780.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688545061.58118,
            "elapsed_time": 7039.4704349040985,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "dacbf4a7094a72e7651737ac1f137b03b5d5b2d8",
            "commit_message": "[llvm][TableGen][Jupyter] Note an easily encountered error\n\nWhen using VSCode it'll default to the Python kernel the first\ntime you open the notebook. Mention this in the readme, as the fix\nis simple but only if you know what to look for.\n",
            "commit_timestamp": 1688543998.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688559482.576622,
            "elapsed_time": 6872.875727415085,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8a3fdf7b908978625e9a7e57fbb443e4e6f98976",
            "commit_message": "[UTC] Add fallback support for specific metadata, and check their defs\n\nThis prevents update_cc_tests.py from emitting hard-coded identifiers\nfor metadata (global variable checkers still check hard-coded\nidentifiers). Instead it emits regex checkers that match even if the\nidentifiers change. Also adds a new mode for --check-globals: instead of\nsimply being on or off, it now has the options 'none', 'smart' and\n'all', with 'none' and 'all' corresponding to the previous modes.\n\nThe 'smart' mode only emits checks for global definitions referenced\nin the IR or other metadata that itself has a definition checker\nemitted, making the rule transitive. It does not emit checks for\nattribute sets, since that is better checked by --check-attributes. This\nmode is made the new default. To make the change in default mode\nbackwards compatible a version bump is introduced (to v3), and the\ndefault remains 'none' in v1 & v2.\n\nThis will result in metadata checks being emitted more often, so filters\nare added to not check absolute file paths and compiler version git\nhashes.\n\nrdar://105239218\n",
            "commit_timestamp": 1688558690.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688573826.890743,
            "elapsed_time": 6889.063606500626,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "20f99278dbb81e880c23c65688e9752ce7ad019a",
            "commit_message": "[lldb][NFCI] Deprecate SBValue::GetOpaqueType\n\nThis method, as far as I can ascertain, is non-trivial to actually use\nto work with (if not impossible). It doesn't make sense to use from\nPython and you do not have access to the accompanying TypeSystem, so it\ndoesn't really do anything useful.\n\nA possible follow-up is to gut the implementation and have it return `nullptr`.\n\nDifferential Revision: https://reviews.llvm.org/D153918\n",
            "commit_timestamp": 1688572352.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688588427.61695,
            "elapsed_time": 7474.421847581863,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4b5ca175431c559a91ffd40333a0fae9e8ac424c",
            "commit_message": "Remove unused test file\n\npth.h hasn't been used since we removed support for PTH in\n0a6b5b653ee47234674614fecc213c1d73bb1e28\n",
            "commit_timestamp": 1688587162.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688602600.780591,
            "elapsed_time": 5918.9885160923,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3ff080b53b0a7f5bccfabd11254e255669892a67",
            "commit_message": "[Sanitizers][Darwin][Test] Mark symbolize_pc test unsupported in Darwin/LSan context\n\nLSan is unsupported on Darwin anyway, and this test fals on public Darwin bots\n\nDifferential Revision: https://reviews.llvm.org/D154389\n",
            "commit_timestamp": 1688601260.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688617206.871191,
            "elapsed_time": 7591.9172286987305,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "9e7a052eef285fceda8eda818993e7c860fa6888",
            "commit_message": "[XRay][AArch64] Implement __xray_ArgLoggerEntry\n",
            "commit_timestamp": 1688615760.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688631555.714789,
            "elapsed_time": 6929.079988718033,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7c9230c4f2ad267c716520fb25c4037acd2204fd",
            "commit_message": "[RISCV] Add trunc instruction to the __builtin_riscv_ctz_64/__builtin_riscv_clz_64 IR.\n\nThese builtins were recently changed to return 'int' like the\nsimilar __builtin_clz/__builtin_ctz builtins, but the IR generation\nwas not updated to use a truncate.\n",
            "commit_timestamp": 1688630116.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688645673.277379,
            "elapsed_time": 5714.820197105408,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "626c789d92bc917e7db30478e9b6d4c9b567ee17",
            "commit_message": "Fix compile error in UnresolvedSetTest.cpp, hopefully the last one\n\nThis test is failing to compile when LLVM_ENABLE_MODULES=ON due to\nNamedDecl being multiply defined. Fix this by avoiding declaring our\nown NamedDecl in the test and instead cast a struct of appropriate\nsize and alignment to NamedDecl.\n",
            "commit_timestamp": 1688640885.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688660317.947476,
            "elapsed_time": 7575.390125989914,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6685fd82391d3e654d3b05f2d54cdcdec6e6d887",
            "commit_message": "[mlir] Add support for TF32 as a Builtin FloatType\n\nThis diff adds support for TF32 as a Builtin floating point type. This\nsupplements the recent addition of the TF32 semantic to the LLVM APFloat class\nby extending usage to MLIR.\n\nhttps://reviews.llvm.org/D151923\n\nMore information on the TF32 type can be found here:\n\nhttps://blogs.nvidia.com/blog/2020/05/14/tensorfloat-32-precision-format/\n\nReviewed By: jpienaar\n\nDifferential Revision: https://reviews.llvm.org/D153705\n",
            "commit_timestamp": 1688658967.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688674506.087814,
            "elapsed_time": 6179.562292337418,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a9f5119a78aaa1fc63347a89aee50922bbb8c99c",
            "commit_message": "[DebugInfo] Enable debug info emission for extern variables in C++\n\nDebug info emission for extern variables in C++ was previously disabled\nwhen the functionality was added in https://reviews.llvm.org/D71818 and\noriginally in https://reviews.llvm.org/D70696, because there was no use\ncase. We are enabling it now, as we start to deploy BPF programs\ncompiled from C++, leveraging C++ features like templates to reduce code\ncomplexity. This patch is required so that we can still use kconfig in\nsuch BPF programs compiled from C++.\n\nReviewed By: rnk, dblaikie, MaskRay, yonghong-song\n\nDifferential Revision: https://reviews.llvm.org/D153898\n",
            "commit_timestamp": 1688673545.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688688968.941419,
            "elapsed_time": 6525.278360843658,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8ea586b82e49c18a73e2b855c7d32fc85e4394a5",
            "commit_message": "[BOLT][DWARF] Fix references in tests\n\nFixed invalid assembly, where references were not correct.\n\nReviewed By: rafauler\n\nDifferential Revision: https://reviews.llvm.org/D154667\n",
            "commit_timestamp": 1688687169.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688703550.115618,
            "elapsed_time": 7365.3291451931,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1614805eeb15204874e2c85ae351369ca0baf944",
            "commit_message": "Register new assumption in a cache\n\nWhen new assumption is created it should be registered in assumption cache\nor cache should be invalidated.\n\nReviewed By: nikic\nDifferential Revision: https://reviews.llvm.org/D154601\n",
            "commit_timestamp": 1688701983.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688718001.956995,
            "elapsed_time": 7617.289110660553,
            "x64": true,
            "actual_files_count": 1701,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "336d7281ad61fbd4a14fa2ef3d2bde5a63d10417",
            "commit_message": "[InstCombine] Preserve inbounds when folding select of GEP\n\nThe select base, (gep base, offset) to gep base, select (0, offset)\nfold used to drop inbounds, because the gep base, 0 this introduces\nmight not be inbounds. After the semantics change in D154051, such\na GEP is always considered inbounds, in which allows us to preserve\nthe flag here.\n\nAs the PhaseOrdering test demonstrates, this can result in major\noptimization improvements in some cases.\n\nDifferential Revision: https://reviews.llvm.org/D154055\n",
            "commit_timestamp": 1688716593.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688732267.288968,
            "elapsed_time": 7499.829288482666,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d679c904c2d79a939ead994242a282d95ae0bb58",
            "commit_message": "[OpenMP][OMPT] Rename callback master to masked in ompt-multiplex.h\n\nOpenMP 5.1 replaced callback ompt_callback_master_t by\nompt_callback_masked_t. In order to stick to the standard,\nthe implementation is updated accordingly.\n\nPatch prepared by Semih Burak\n\nDifferential Revision: https://reviews.llvm.org/D112798\n",
            "commit_timestamp": 1688731300.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688746571.657813,
            "elapsed_time": 5810.4728899002075,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6f90808074c4241775e111d8aca61889b10d8d0a",
            "commit_message": "[RISCV] Add a guard condition to orc_b/brev8 handling in ReplaceNodeResults.\n\nThe orc_b and brev8 intrinsics are type overloaded, but only\ni32 and XLen are supported types. The type legalization code in\nReplaceNodeResults only handles the i32 case on RV64. Add some\nchecks so we will fail type legalization for other types.\n",
            "commit_timestamp": 1688745106.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688760676.567931,
            "elapsed_time": 4384.7653465271,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "399eb5632f4ad201bfe4f0bbe1f8ce302c711726",
            "commit_message": "[scudo] Explicit casting for u16 arithmetic operation\n\nThis fixes the werror from https://lab.llvm.org/buildbot/#/builders/165/builds/38829\n\nReviewed By: enh\n\nDifferential Revision: https://reviews.llvm.org/D154733\n",
            "commit_timestamp": 1688759882.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688775571.812514,
            "elapsed_time": 7105.538609027863,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1575063db259dc601d25b29cfb573505bd82f51f",
            "commit_message": "[RISCV] Match shl_vl (ext_vl v, splat 1) to vwadd_vl\n\nSimiler to: D153112, match shl (v, splat 1) to vwadd\n\nReviewed By: craig.topper\n\nDifferential Revision: https://reviews.llvm.org/D154726\n",
            "commit_timestamp": 1688774595.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688789815.828148,
            "elapsed_time": 6459.434271335602,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1e02158666e0be2b1b5facf07842f9c15bf347b1",
            "commit_message": "[libc++] Implement LWG3843 (std::expected<T,E>::value() & assumes E is copy constructible)\n\nImplement LWG3843 (std::expected<T,E>::value() & assumes E is copy constructible)\nhttps://wg21.link/LWG3843\n\nReviewed By: #libc, ldionne\n\nDifferential Revision: https://reviews.llvm.org/D154110\n",
            "commit_timestamp": 1688788620.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688804106.142708,
            "elapsed_time": 6693.783696889877,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "681cb54a54bb60dea9034b4b0b45ccc392875b9a",
            "commit_message": "[Driver] Fix duplicate -L after D150013\n\nD150013 is to render -L for AMDGPU but updating tools::AddLinkerInputs is wrong\nand causes many non-isCrossCompiling targets to have duplicate -L options\nbecause they do `Args.AddAllArgs(CmdArgs, options::OPT_L);`.\n\nRevert the change and add a `Args.AddAllArgs(CmdArgs, options::OPT_L);` instead.\n",
            "commit_timestamp": 1688799465.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688818359.791165,
            "elapsed_time": 4680.011758565903,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cf6b3315f22acaef99dd2b99dc7a47c6231ed294",
            "commit_message": "libcxx: Bring back unsigned return from wcstoull_l\n\nGot removed here:\n21d9282ae2b6e1e7dfbabfd87f6208c3bdff8ea4#diff-e41832b8aa26da45585a57c5111531f2e1d07e91a67c4f8bf1cd6d566ae45a2bR40\n\nReviewed By: #libc, philnik\n\nDifferential Revision: https://reviews.llvm.org/D148056\n",
            "commit_timestamp": 1688817270.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688832945.988161,
            "elapsed_time": 6242.917968988419,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "820be30ad96591de2d7e651b3ec9cc0253ca6344",
            "commit_message": "[OpenMP][OMPT] Introduce VERBOSE_INIT in ompt-multiplex.h\n\nOpenMP 5.1 added OMP_TOOL_VERBOSE_INIT. This env variable is\nextremely helpful to understand the issue when loading a tool fails\nunexpectedly (e.g., errors from dlopen, when the libc available at\nruntime is older than libc used at compile time of the tool -> missed\nto load the right gcc module).\n\nThis patch replicates the verbose init code from libomp watching\nout for a different env variable. Similar to\nCLIENT_TOOL_LIBRARIES_VAR, a tool can define the name of\nthe env var by defining CLIENT_TOOL_VERBOSE_INIT_VAR\nbefore including ompt-multiplex.h.\nAlternatively, a tool can define OMPT_MULTIPLEX_TOOL_NAME\nto specify the tool name which will be the prefix for both\n_TOOL_LIBRARIES and _VERBOSE_INIT var.\nFinally, if none of the two macros is defined, the header will\nprint a compiler warning and look at OMP_TOOL_VERBOSE_INIT.\n\nPatch prepared by Semih Burak\n\nDifferential Revision: https://reviews.llvm.org/D112809\n",
            "commit_timestamp": 1688828997.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688847446.477086,
            "elapsed_time": 6583.940421104431,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3f370a2af59f83134cf1de405358506be9280251",
            "commit_message": "[test] Add more instantiation cases to visibility.cpp\n",
            "commit_timestamp": 1688844649.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688861878.243973,
            "elapsed_time": 6411.0070424079895,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "9e362e5e3fe0b7f85160c3a06e9c646e1c75e8e0",
            "commit_message": "Fix -Wunused-vairable on release build, NFC\n",
            "commit_timestamp": 1688849823.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688876253.455554,
            "elapsed_time": 7757.828397274017,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "643b7bcdb40433958e7c7022278748b77fe038c4",
            "commit_message": "[libc++] Fix simple cases of locale name construction\n\nWhen using the following constructors:\n\n```\nlocale(const locale& other, const char* std_name, category cat);\nlocale(const locale& other, const string& std_name, category cat);\nlocale(const locale& other, const locale& one, category cats);\n```\nThe new locale name is always \"*\". Locale names formed from parts of two named locales (that is, C++ locales having names) are supposed to have names in turn (see C++20 subclause 28.3.1.1 [locale.general] paragraph 8). This patch fixes the name construction for cases when either of locales are unnamed, when the category is locale::none, and when the two locale names are the same.\n\nReviewed By: #libc, ldionne\n\nDifferential Revision: https://reviews.llvm.org/D119441\n",
            "commit_timestamp": 1688868176.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688890542.32087,
            "elapsed_time": 6356.569326877594,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "dbaa5838c13e5593b9de37b8f3daffe4cb914a17",
            "commit_message": "[libc][NFC] Move memfunction's byte per byte implementations to a separate header\n\nThere will be subsequent patches to move things around and make the file layout more principled.\n\nDifferential Revision: https://reviews.llvm.org/D154770\n",
            "commit_timestamp": 1688887318.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688905011.91138,
            "elapsed_time": 6333.9233729839325,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "758c4640c95cbfec78fda4132aa5335dd54b1813",
            "commit_message": "[CGP] Enable CodeGenPrepares phi type convertion.\n\nThis is a recommit of 67121d7, enabling the CodeGenPrepare OptimizePhiTypes\noption that can help with the type of phi instructions into ISel.\n",
            "commit_timestamp": 1688895131.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688919296.550504,
            "elapsed_time": 6308.422134637833,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b4e09c0dea866e48be83eae8c2f269162f6f04e0",
            "commit_message": "[RISCV] Update test case riscv-attr-builtin-alias.c (NFC)\n",
            "commit_timestamp": 1688917319.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688933913.129764,
            "elapsed_time": 7845.574423313141,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "9ec5dc6944781b0c233e874a4ed8d12106df14ac",
            "commit_message": "[clang-format] Add note directive generation for docs\n\nGenerate a ..note:: directive when the \\note is encountered in Format.h.\n\nDifferential Revision: https://reviews.llvm.org/D154552\n",
            "commit_timestamp": 1688930695.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688948333.404336,
            "elapsed_time": 7159.326214551926,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ba7cc56782dbf4a26c0a043dd33c7949366e2b0d",
            "commit_message": "[Attributor] Port AANoRecurse to the isImpliedByIR interface\n",
            "commit_timestamp": 1688943862.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688962707.818502,
            "elapsed_time": 6850.925667285919,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "df38792efbdf8947bbf733ef81f183c0a11ffc97",
            "commit_message": "[Attributor][FIX] Add missing check lines for test\n",
            "commit_timestamp": 1688960544.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688976927.143052,
            "elapsed_time": 6322.35412979126,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3a80bdb3169192361a6113397d9967a880de44bd",
            "commit_message": "[GlobalISel] Remove an erroneous oneuse check in the G_ADD reassociation combine.\n\nThis check was unnecessary/incorrect, it was already being done by the target\nhook default implementation, and the one in the matcher was checking for a\ncompletely different thing. This change:\n 1) Removes the check and updates affected tests which now do some more reassociations.\n 2) Modifies the AMDGPU hooks which were stubbed with \"return true\" to also do the oneuse\n    check. Not sure why I didn't do this the first time.\n",
            "commit_timestamp": 1688976192.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1688991487.443942,
            "elapsed_time": 7480.508595705032,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4c6f95be29c6ce0f89663a5103c58ee63d76cda3",
            "commit_message": "Revert \"[IRCE] Parse range checks in the form of 'LHS - RHS vs Limit'\"\n\nThis reverts commit e16c5c092205f68825466c25a1dd30783c4820f3.\n\nRevert due to Buildbot failure https://lab.llvm.org/buildbot/#/builders/193\n",
            "commit_timestamp": 1688990362.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689006021.031185,
            "elapsed_time": 7490.137391805649,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "86943d863ef66d68bf79d3e2f0ec2c205814b235",
            "commit_message": "Formula.h - fix MSVC \"'clang::dataflow::Formula::numOperands': not all control paths return a value\". NFC.\n",
            "commit_timestamp": 1689004552.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689020184.394861,
            "elapsed_time": 5903.085319280624,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a042a6502c17fe9a29be191298ca76d2c5394fc8",
            "commit_message": "[mlir] Add a parameter for passing default values to `StringRefParameter`\n\n**For an explanation of these patches see D154153.**\n\nCommit message:\nCurrently the `StringRefParameter` parameter doesn't support default values,\nthis patch allows the usage of them, eg:\n`StringRefParameter<\"description\", [{\"default_value\"}]>`\n\nReviewed By: mehdi_amini\n\nDifferential Revision: https://reviews.llvm.org/D154097\n",
            "commit_timestamp": 1689019316.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689034506.672326,
            "elapsed_time": 4865.596316337585,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b4a82b62258c5f650a1cccf5b179933e6bae4867",
            "commit_message": "[MemProf] Use new option/pass for profile feedback and matching\n\nPreviously the MemProf profile was expected to be in the same profile\nfile as a normal PGO profile, passed via the usual -fprofile-use=\noption, and was matched in the same pass. To simplify profile\npreparation, since the raw MemProf profile requires the binary for\nsymbolization and may be simpler to index separately from the raw PGO\nprofile, and also to enable providing a MemProf profile for a SamplePGO\nbuild, separate out the MemProf feedback option and matching pass.\n\nThis patch adds the -fmemory-profile-use=${file} option, and the\nprovided file is passed down to LLVM and ultimately used in a new\nMemProfUsePass which performs the matching of just the memory profile\ncontents of that file.\n\nNote that a single profile file containing both normal PGO and MemProf\nprofile data is still supported, and the relevant profile data is\nmatched by the appropriate matching pass(es) based on which option(s)\nthe profile is provided with (the same profile file can be supplied to\nboth feedback options).\n\nDifferential Revision: https://reviews.llvm.org/D154856\n",
            "commit_timestamp": 1689032576.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689049073.626749,
            "elapsed_time": 7896.6736080646515,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "abe9ae6d414e2b729f320626245e03b8bbde6143",
            "commit_message": "[TableGen] Extract functions to resolve arguments [nfc]\n\nThe code to resolve class/multiclass arguments are similar, we\nextract them to `resolveArguments`s to simplify code.\n\nReviewed By: tra, reames\n\nDifferential Revision: https://reviews.llvm.org/D154065\n",
            "commit_timestamp": 1689046071.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689063269.095461,
            "elapsed_time": 5830.184913158417,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7b72920af63d86242fa4a92ffa40d24d4c98f754",
            "commit_message": "[BOLT] Fix warning message\n\nAdd missing EOL in a warning message.\n\nReviewed By: rafauler\n\nDifferential Revision: https://reviews.llvm.org/D154895\n",
            "commit_timestamp": 1689062408.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689077912.820856,
            "elapsed_time": 7852.686666250229,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "142faf56f50054adf088e86993121fee381b6c60",
            "commit_message": "[OpenMP] [OMPT] [amdgpu] [5/8] Implemented device init/fini/load callbacks\n\nAdded support in the generic plugin to invoke registered callbacks.\n\nDepends on D124070\n\nPatch from John Mellor-Crummey <johnmc@rice.edu>\n(With contributions from Dhruva Chakrabarti <Dhruva.Chakrabarti@amd.com>)\n\nDifferential Revision: https://reviews.llvm.org/D124652\n",
            "commit_timestamp": 1689074002.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689092171.492652,
            "elapsed_time": 6413.374578475952,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "425c57489283adcaa28e916c5b1c2826e7a0e042",
            "commit_message": "[flang][openacc] Support ieor reduction operator\n\nAdd support for `ieor` reduction operator in\nOpenACC lowering.\n\nDepends on D154887\n\nReviewed By: razvanlupusoru\n\nDifferential Revision: https://reviews.llvm.org/D154888\n",
            "commit_timestamp": 1689091116.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689106490.364802,
            "elapsed_time": 6099.996742010117,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4a63264daa5b68210f83c97705db5dc4cf227638",
            "commit_message": "[flang] Use fir.type_desc in nullify\n\nDo not look for the global early in nullify codegen. The type descriptor\ncan be emitted later and it would raise an error as it could not be found.\nUse `fir.type_desc` instead so it delays the type descriptor lookup until\nevrything is emitted.\n\nhttps://github.com/llvm/llvm-project/issues/63775\n\nReviewed By: vzakhari\n\nDifferential Revision: https://reviews.llvm.org/D154982\n",
            "commit_timestamp": 1689104513.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689120952.807688,
            "elapsed_time": 6338.579768419266,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b10899d869954e1426684cbc20a43d7303075d49",
            "commit_message": "[clang] Fix -Wlogical-op-parentheses in Clang.cpp (NFC)\n\n/Users/jiefu/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:7345:56: error: '&&' within '||' [-Werror,-Wlogical-op-parentheses]\n      (WholeProgramVTables || SanitizeArgs.needsLTO()) &&\n      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/Users/jiefu/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:7345:56: note: place parentheses around the '&&' expression to silence this warning\n      (WholeProgramVTables || SanitizeArgs.needsLTO()) &&\n                                                       ^\n      (\n1 error generated.\n",
            "commit_timestamp": 1689119630.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689135402.724436,
            "elapsed_time": 6821.248302221298,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5b6b2caf3c6ec3cdf5565f935263361fbb2013cd",
            "commit_message": "[mlir][vector] Handle memory space conflicts in VectorTransferSplit patterns\n\nCurrently the transfer splitting patterns will generate an invalid cast\nwhen the source memref for a transfer op has a non-default memory space.\nThis is handled by first introducing a `memref.memory_space_cast` in\nsuch cases.\n\nDifferential Revision: https://reviews.llvm.org/D154515\n",
            "commit_timestamp": 1689130703.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689149843.450252,
            "elapsed_time": 7962.315145254135,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6d9fcc2ad874e4ee9b94eef4b85ffece18e501b1",
            "commit_message": "[clang][clangd] Don't crash/assert on -gsplit-dwarf=single without output\n\nThe crash happens in clang::driver::tools::SplitDebugName when Output is\nInputInfo::Nothing. It doesn't happen with standalone clang driver because\noutput is created in Driver::BuildJobsForActionNoCache.\n\nExample backtrace:\n```\n* thread #1, name = 'clangd', stop reason = hit program assert\n  * frame #0: 0x00007ffff5c4eacf libc.so.6`raise + 271\n    frame #1: 0x00007ffff5c21ea5 libc.so.6`abort + 295\n    frame #2: 0x00007ffff5c21d79 libc.so.6`__assert_fail_base.cold.0 + 15\n    frame #3: 0x00007ffff5c47426 libc.so.6`__assert_fail + 70\n    frame #4: 0x000055555dc0923c clangd`clang::driver::InputInfo::getFilename(this=0x00007fffffff9398) const at InputInfo.h:84:5\n    frame #5: 0x000055555dcd0d8d clangd`clang::driver::tools::SplitDebugName(JA=0x000055555f6c6a50, Args=0x000055555f6d0b80, Input=0x00007fffffff9678, Output=0x00007fffffff9398) at CommonArgs.cpp:1275:40\n    frame #6: 0x000055555dc955a5 clangd`clang::driver::tools::Clang::ConstructJob(this=0x000055555f6c69d0, C=0x000055555f6c64a0, JA=0x000055555f6c6a50, Output=0x00007fffffff9398, Inputs=0x00007fffffff9668, Args=0x000055555f6d0b80, LinkingOutput=0x0000000000000000) const at Clang.cpp:5690:33\n    frame #7: 0x000055555dbf6b54 clangd`clang::driver::Driver::BuildJobsForActionNoCache(this=0x00007fffffffb5e0, C=0x000055555f6c64a0, A=0x000055555f6c6a50, TC=0x000055555f6c4be0, BoundArch=(Data = 0x0000000000000000, Length = 0), AtTopLevel=true, MultipleArchs=false, LinkingOutput=0x0000000000000000, CachedResults=size=1, TargetDeviceOffloadKind=OFK_None) const at Driver.cpp:5618:10\n    frame #8: 0x000055555dbf4ef0 clangd`clang::driver::Driver::BuildJobsForAction(this=0x00007fffffffb5e0, C=0x000055555f6c64a0, A=0x000055555f6c6a50, TC=0x000055555f6c4be0, BoundArch=(Data = 0x0000000000000000, Length = 0), AtTopLevel=true, MultipleArchs=false, LinkingOutput=0x0000000000000000, CachedResults=size=1, TargetDeviceOffloadKind=OFK_None) const at Driver.cpp:5306:26\n    frame #9: 0x000055555dbeb590 clangd`clang::driver::Driver::BuildJobs(this=0x00007fffffffb5e0, C=0x000055555f6c64a0) const at Driver.cpp:4844:5\n    frame #10: 0x000055555dbe6b0f clangd`clang::driver::Driver::BuildCompilation(this=0x00007fffffffb5e0, ArgList=ArrayRef<const char *> @ 0x00007fffffffb268) at Driver.cpp:1496:3\n    frame #11: 0x000055555b0cc0d9 clangd`clang::createInvocation(ArgList=ArrayRef<const char *> @ 0x00007fffffffbb38, Opts=CreateInvocationOptions @ 0x00007fffffffbb90) at CreateInvocationFromCommandLine.cpp:53:52\n    frame #12: 0x000055555b378e7b clangd`clang::clangd::buildCompilerInvocation(Inputs=0x00007fffffffca58, D=0x00007fffffffc158, CC1Args=size=0) at Compiler.cpp:116:44\n    frame #13: 0x000055555895a6c8 clangd`clang::clangd::(anonymous namespace)::Checker::buildInvocation(this=0x00007fffffffc760, TFS=0x00007fffffffe570, Contents= Has Value=false ) at Check.cpp:212:9\n    frame #14: 0x0000555558959cec clangd`clang::clangd::check(File=(Data = \"build/test.cpp\", Length = 64), TFS=0x00007fffffffe570, Opts=0x00007fffffffe600) at Check.cpp:486:34\n    frame #15: 0x000055555892164a clangd`main(argc=4, argv=0x00007fffffffecd8) at ClangdMain.cpp:993:12\n    frame #16: 0x00007ffff5c3ad85 libc.so.6`__libc_start_main + 229\n    frame #17: 0x00005555585bbe9e clangd`_start + 46\n```\n\nTest Plan: ninja ClangDriverTests && tools/clang/unittests/Driver/ClangDriverTests\n\nDifferential Revision: https://reviews.llvm.org/D154602\n",
            "commit_timestamp": 1689148661.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689164551.208525,
            "elapsed_time": 8881.64424943924,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fe6cddef2020c8e103cff8180540d4e2e9102c6d",
            "commit_message": "[DWARF] Allow op-index in line number programs\n\nThis extends DWARFDebugLine to properly parse line number programs with\nmaximum_operations_per_instruction > 1 for VLIW targets.\n\nNo functions that use that parsed output to retrieve line information\nhave been extended to support multiple op-indexes. This means that when\nretrieving information for an address with multiple op-indexes, e.g.\nwhen using llvm-addr2line, the penultimate row for that address will be\nused, which in most cases is the row for the second largest op-index.\nThis will be addressed in further changes, but this patch at least\nallows us to correctly parse such line number programs, with a warning\nsaying that the line number information may be incorrect (incomplete).\n\nReviewed By: StephenTozer\n\nDifferential Revision: https://reviews.llvm.org/D152536\n",
            "commit_timestamp": 1689162389.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689178492.348022,
            "elapsed_time": 6496.502560853958,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a70ce8cb0e4b45841726347c723147af591b054a",
            "commit_message": "[libc++][PSTL] Fix double-move in std::transform_reduce\n\nReviewed By: #libc, ldionne\n\nSpies: h-vetinari, libcxx-commits\n\nDifferential Revision: https://reviews.llvm.org/D154913\n",
            "commit_timestamp": 1689177370.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689193102.742811,
            "elapsed_time": 7987.130672454834,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0e543747ab42b49bf7ca2e78a76639ac9bc1fda8",
            "commit_message": "[flang][openacc] Support .eqv. reduction operator\n\nAdd support for the `.eqv.` reduction operator for\nFlang/OpenACC lowering.\n\nDepends on D154898\n\nReviewed By: razvanlupusoru\n\nDifferential Revision: https://reviews.llvm.org/D154900\n",
            "commit_timestamp": 1689192010.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689207485.299451,
            "elapsed_time": 6431.543771982193,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "677a1da6fafddb13aebd4c170c8452029a05858d",
            "commit_message": "[clang] Fix crash caused by PseudoObjectExprBitfields::NumSubExprs overflow\n\nThis patch makes the bit-fields wider, and also implement a small optimization for `PseudoObjectExprBitfields`, when there is no result in `PseudoObjectExpr`, we use 32 bits to store the number of subexpressions, otherwise, we use 16 bits to store the number of subexpressions, and use 16 bits to store the result indexes.\n\nFixes https://github.com/llvm/llvm-project/issues/63169\n\nReviewed By: aaron.ballman\n\nDifferential Revision: https://reviews.llvm.org/D154784\n",
            "commit_timestamp": 1689206288.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689221771.256459,
            "elapsed_time": 6285.756520986557,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "020cdaff615acbdc9ef6a801075a484ef74d5070",
            "commit_message": "[Asan][Darwin][GCD] Add interceptor for dispatch_mach_create_f\n\nWhen enabling DriverKit, Address Sanitizer was unable to\nintercept thread creation directly for dispatch workerthreads.\n\nBecause of this calls to GetStackTraceFromID failed and ASan was\nunable to capture a meaningful stack trace.\n\nThis patch adds an interceptor for a dispatch function as a proxy\nthat is \"close enough\" to thread creation so that ASan is able\nto meaningfully capture and register the dispatched thread.\n\nNote: I propose not adding a test for this change.\nBecause this change is only meaningful in such a narrow usecase on Darwin\nand is incredibly difficult to add a meaningful test.\n\nDifferential Revision: https://reviews.llvm.org/D154753\n",
            "commit_timestamp": 1689220330.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689236415.234798,
            "elapsed_time": 7319.710772752762,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8ecc6c9378399bf8b7a0cec72e73138ac686a1bb",
            "commit_message": "[IR] Partially remove pointer element types from intrinsic signatures (NFC)\n\nAs typed pointers are no longer supported, we should no longer\nspecify element types in intrinsic signatures.\n\nThe only meaningful pointer types are now:\n\n    llvm_ptr_ty -> ptr\n    llvm_anyptr_ty -> ptr addrspace(any)\n    LLVMQualPointerType<N> -> ptr addrspace(N)\n\nThis is only \"partially\" because we also have a bunch of special\nIIT descriptors like LLVMPointerTo, LLVMPointerToElt and\nLLVMAnyPointerToElt, which I'll leave for a later revision.\n\nDifferential Revision: https://reviews.llvm.org/D155086\n",
            "commit_timestamp": 1689235251.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689250810.954249,
            "elapsed_time": 7607.229573726654,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "245d10b7a2c12ec25e7b5860a38c61991543a739",
            "commit_message": "[clang][Interp][NFC] Trim Source.h includes\n",
            "commit_timestamp": 1689247563.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689265150.791984,
            "elapsed_time": 9356.067201137543,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c660a2f0ab1297b178fd06853c4991d0f07d8fa0",
            "commit_message": "[X86] Fold ANDNP(X,NOT(Y)) -> NOT(OR(X,Y))\n\nRemoving the x86-specific node helps further folding and improves commutativity\n",
            "commit_timestamp": 1689263780.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689279733.51929,
            "elapsed_time": 8431.89232969284,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7972b9c829966bb9541e1ae1f39c884efebc1d5a",
            "commit_message": "[AMDGPU] Move SIEncodingFamily into SIDefines.h. NFC.\n\nI need this for future patch in the MC, while TII is not available\nin the llvm-mc. Besides this is not a first time I want it there.\n\nDifferential Revision: https://reviews.llvm.org/D155228\n",
            "commit_timestamp": 1689277348.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689495398.969087,
            "elapsed_time": 8040.062523841858,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "48ee3193787840801314eae627c37444ed697c2e",
            "commit_message": "Revert \"[RISCV] Move comments before 'if' instead of after. NFC\"\n\nThis reverts commit ef1ccc493e6167488ac10da2842fa7cac2746565.\n\nCommitted by mistake.\n",
            "commit_timestamp": 1689486846.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689509937.228248,
            "elapsed_time": 9236.384525299072,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5708add6df24dcd7398e79ee0adfeee56962cc25",
            "commit_message": "[gn] port f0dfe682bca0 (no more _LIBCPP_ENABLE_ASSERTIONS_DEFAULT)\n",
            "commit_timestamp": 1689506755.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689524136.664688,
            "elapsed_time": 6771.259792804718,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6ed40418914b6439edd995298268d60e2df0cce4",
            "commit_message": "[libc++] Implement ostringstream members of P0408R7 (Efficient Access to basic_stringbuf's Buffer)\n\nReviewed By: #libc, Mordante\n\nDifferential Revision: https://reviews.llvm.org/D155276\n",
            "commit_timestamp": 1689513935.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689538566.130847,
            "elapsed_time": 7430.682577371597,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cc4f86562127f29560abb54d0c11f277b3373a2a",
            "commit_message": "[clang-tidy] Improve build-in type handling in bugprone-swapped-arguments\n\nImproved detection of argument swaps involving integral and floating-point\ntypes by enhancing handling of implicit conversions. Now implicit casts\nfrom float to double are also considered, same for integers.\nImproved documentation.\n\nFixes: #62926\n\nReviewed By: carlosgalvezp\n\nDifferential Revision: https://reviews.llvm.org/D151495\n",
            "commit_timestamp": 1689532169.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689555442.324424,
            "elapsed_time": 6515.170094490051,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "199034e8acd602d5a2475d537ae8265c4e3ee5a7",
            "commit_message": "[ORC] In defineMaterializing, error out early if tracker is defunct.\n\nAn in-flight materialization may try to claim responsibility for new symbols\n(via MaterializationResponsibility::defineMaterializing) after the tracker that\nis associated with the materialization is removed, leaving the tracker defunct.\n\nFailure to error out early here could leave the JITDylib in an invalid state,\nwith defineMaterializing associating new symbols with the already-defunct\ntracker. Erroring out early prevents this.\n",
            "commit_timestamp": 1689554276.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689567806.520265,
            "elapsed_time": 7144.922644853592,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7ce4e933eab28d7a6b7a54ef96bee8853cc30bbc",
            "commit_message": "[RISCV] Implement prefetch locality by NTLH\n\nWe add the MemOperand then backend will generate NTLH automatically.\n\n```\n__builtin_prefetch(ptr,  0 /* rw==read */, 0 /* locality */); => ntl.all + prefetch.r (ptr)\n__builtin_prefetch(ptr,  0 /* rw==read */, 1 /* locality */); => ntl.pall + prefetch.r (ptr)\n__builtin_prefetch(ptr,  0 /* rw==read */, 2 /* locality */); => ntl.p1 + prefetch.r (ptr)\n__builtin_prefetch(ptr,  0 /* rw==read */, 3 /* locality */); => prefetch.r (ptr)\n```\n\nReviewed By: craig.topper\n\nDifferential Revision: https://reviews.llvm.org/D154691\n",
            "commit_timestamp": 1689564766.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689582353.065115,
            "elapsed_time": 7715.90022110939,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fdf36c3d4b467a48b628c96cc7e34c2f4bf090da",
            "commit_message": "[lldb][AArch64] Fix flakiness in TestSVEThreadedDynamic\n\nThis test runs to a breakpoint on thread 0. Thread 0 then starts\nthread 2 and 3, which both have breakpoints in them.\n\nIn https://lab.llvm.org/buildbot/#/builders/96/builds/41674\nI think that we managed to do the first check on thread 2 before\nthread 3 had started. Therefore \"thread continue 3\" failed.\n\nSo wait for all three to startup before we check their status.\n\nI considered putting a timeout on the while like the wait_for... methods,\nbut the test itself already has a global timeout. Plus, I'd rather\nnot be tuning a timeout per piece of hardware this runs on.\n\n99% of the time we will already have 3 threads when the check is done.\n\nReviewed By: omjavaid\n\nDifferential Revision: https://reviews.llvm.org/D154705\n",
            "commit_timestamp": 1689581475.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689597354.322326,
            "elapsed_time": 9399.69318819046,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "92542f2a400024e8a878242afe8231e17df345e5",
            "commit_message": "[AMDGPU] Add targets gfx1150 and gfx1151\n\nThis is the target definition only. Currently they are treated the same\nas GFX 11.0.x.\n\nDifferential Revision: https://reviews.llvm.org/D155429\n",
            "commit_timestamp": 1689595572.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689611129.237642,
            "elapsed_time": 7019.629465103149,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7583c73bc4faf2b37f6c75ec64eddaa99f058b65",
            "commit_message": "[libc++][format] Fixes an off by one error.\n\nThe post-condition on the functions is that the buffer is not full.\nThis post-conditon is used as pre-condition of the push_back function.\nWhen a copy, fill, of transform function exactly fit in the buffer this\npost-condition was validated.\n\nReviewed By: #libc, ldionne\n\nDifferential Revision: https://reviews.llvm.org/D155397\n",
            "commit_timestamp": 1689609679.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689625244.387349,
            "elapsed_time": 7136.5321588516235,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "71f95ecff27e4032ff1c5d196230b42f76a6eb5f",
            "commit_message": "[libc++] Move _LIBCPP_NO_THREAD_SAFETY_ANALYSIS to __config\n\nThis makes __threading_support contain nothing but the base threading\nAPI provided by the system.\n\nDifferential Revision: https://reviews.llvm.org/D155458\n",
            "commit_timestamp": 1689624406.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689642933.46552,
            "elapsed_time": 8579.3740067482,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a5cee3e386bde28ce21ff2ead3fc420f018604ca",
            "commit_message": "[mlir][linalg] Add a padding case for `ComplexType`\n\nIf the paddingAttr is an ArrayAttr with two values we know that\nthe element type is a `ComplexType` and we should pad the value\naccordingly.\n\nReviewed By: mravishankar\n\nDifferential Revision: https://reviews.llvm.org/D154908\n",
            "commit_timestamp": 1689639638.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689654132.463895,
            "elapsed_time": 6978.240034580231,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "31263211c6a4ef454216f2edbf9b2083a4c1474d",
            "commit_message": "[sanitizer][asan][win] Intercept _strdup on Windows instead of strdup\n\nIntercept `_strdup` on windows, instead of the nonexistent `strdup`.\n",
            "commit_timestamp": 1689653210.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1689668753.596433,
            "elapsed_time": 9091.609967708588,
            "x64": true,
            "actual_files_count": 1704,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "447bb5bee402eab94987ebbd8f29d696f946ba9e",
            "commit_message": "[mlir][ArmSME] Introduce new lowering layer (Vector -> ArmSME)\n\nAt the moment, the lowering from the Vector dialect to SME looks like\nthis:\n\n  * Vector --> SME LLVM IR intrinsics\n\nThis patch introduces a new lowering layer between the Vector dialect\nand the Arm SME extension:\n\n  * Vector --> ArmSME dialect (custom Ops) --> SME LLVM IR intrinsics.\n\nThis is motivated by 2 considerations:\n1. Storing `ZA` to memory (e.g. `vector.transfer_write`) requires an\n   `scf.for` loop over all rows of `ZA`. Similar logic will apply to\n   \"load to ZA from memory\". This is a rather complex transformation and\n   a custom Op seems justified.\n2. As discussed in [1], we need to prevent the LLVM type converter from\n   having to convert types unsupported in LLVM, e.g.\n   `vector<[16]x[16]xi8>`. A dedicated abstraction layer with custom Ops\n   opens a path to some fine tuning (e.g. custom type converters) that\n   will allow us to avoid this.\n\nTo facilitate this change, two new custom SME Op are introduced:\n\n  * `TileStoreOp`, and\n  * `ZeroOp`.\n\nNote that no new functionality is added - these Ops merely model what's\nalready supported. In particular, the following tile size is assumed\n(dimension and element size are fixed):\n\n  * `vector<[16]x[16]xi8>`\n\nThe new lowering layer is introduced via a conversion pass between the\nVector and the SME dialects. You can use the `-convert-vector-to-sme`\nflag to run it. The following function:\n```\nfunc.func @example(%arg0 : memref<?x?xi8>) {\n  // (...)\n  %cst = arith.constant dense<0> : vector<[16]x[16]xi8>\n  vector.transfer_write %cst, %arg0 : vector<[16]x[16]xi8>, memref<?x?xi8>\n  return\n}\n```\nwould be lowered to:\n```\n  func.func @example(%arg0: memref<?x?xi8>) {\n    // (...)\n    %0 = arm_sme.zero : vector<[16]x[16]xi8>\n    arm_sme.tile_store %arg0[%c0, %c0], %0 : memref<?x?xi8>, vector<[16]x[16]xi8>\n    return\n  }\n```\n\nLater, a mechanism will be introduced to guarantee that `arm_sme.zero`\nand `arm_sme.tile_store` operate on the same virtual tile. For `i8`\nelements this is not required as there is only one tile.\n\nIn order to lower the above output to LLVM, use\n  * `-convert-vector-to-llvm=\"enable-arm-sme\"`.\n\n[1] https://github.com/openxla/iree/issues/14294\n\nReviewed By: WanderAway\n\nDifferential Revision: https://reviews.llvm.org/D154867\n",
            "commit_timestamp": 1689667499.0
        }
    ]
}