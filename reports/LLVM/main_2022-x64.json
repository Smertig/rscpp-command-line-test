{
    "v1": [
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1684603737.956203,
            "elapsed_time": 1686.055385351181,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": null
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1684610077.385662,
            "elapsed_time": 4011.8417756557465,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": null
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684617782.754098,
            "elapsed_time": 4125.218888044357,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684632365.571352,
            "elapsed_time": 4131.389887332916,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684646507.460228,
            "elapsed_time": 4050.072568655014,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684660783.781127,
            "elapsed_time": 3890.4404566287994,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "287dd0142c08caad5b32628f3842dfd5d5c59d03",
            "commit_message": "[X86][MC] Simplify some code in X86AsmBackend.cpp, NFCI\n",
            "commit_timestamp": 1684647829.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684675244.317621,
            "elapsed_time": 3994.0369441509247,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8b1727f8d9104df5ced4bdfdc065dea85ff84baf",
            "commit_message": "[NFC] remove duplicated dash in release note for #62447\n",
            "commit_timestamp": 1684661176.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684689611.651695,
            "elapsed_time": 3978.406282186508,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3b272039a88cc9952e5bad71b6b02a62b2c22098",
            "commit_message": "[ubsan][test] Unsupport function.cpp in Android non-x86 on sanitizer-x86_64-linux-android after D148573\n\nThe qemu environment cannot run an executable with a link-time shared\nobject built during the test?\n```\nInput was:\n<<<<<<\n            1: CANNOT LINK EXECUTABLE \"/data/local/tmp/Output/var/lib/buildbot/sanitizer-buildbot6/sanitizer-x86_64-linux-android/build/compiler_rt_build_android_aarch64/test/ubsan/Standalone-aarch64/TestCases/TypeCheck/Function/Output/function.cpp.tmp\": library \"/var/lib/buildbot/sanitizer-buildbot6/sanitizer-x86_64-linux-android/build/compiler_rt_build_android_aarch64/test/ubsan/Standalone-aarch64/TestCases/TypeCheck/Function/Output/function.cpp.tmp-so.so\" not found: needed by main executable\n```\n",
            "commit_timestamp": 1684684234.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684704257.900953,
            "elapsed_time": 3932.433120250702,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4aa1cadf3c67c61b394051630896f06f35b562ca",
            "commit_message": "[Driver] Disable -fsanitize=function for ppc64be after D148573\n\nELFObjectWriter.cpp may report\n```\nerror: Cannot represent a difference across sections\n```\non some ppc64be configurations, likely related to some interaction\nbetween the obsoleted ELFv1 and MC.\nUnfortunately I cannot reproduce this locally with --target=powerpc64-linux-gnu.\n",
            "commit_timestamp": 1684685680.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684718710.596186,
            "elapsed_time": 4178.199296951294,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f81ccb520927247b02708873567428d6988e2a07",
            "commit_message": "[ExecutionEngine] Re-enable JIT tests on PowerPC.\n\nThese were previously re-enabled in d771f54107c, but had to be disabled again\nin 2060a72b4d7 due to test failures.\n\nThis is a next step to landing https://reviews.llvm.org/D148192, which adds\na skeleton JITLink backend for PowerPC.\n\nThe fixes for those failures were (1) to explicitly specify IsLittleEndian =\ntrue for the MachO YAML testcases, (2) disable some example tests for examples\nthat aren't supported on PowerPC yet, and (3) fixing the endianness of a\nrelocation read/write (for ELF R_AARCH64_TSTBR14) in RuntimeDyldELF.\n",
            "commit_timestamp": 1684710726.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684733689.769472,
            "elapsed_time": 4721.939621925354,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f6fb639c76ce255e2f5b3e2c8550270243e7e7ab",
            "commit_message": "Fix memoery leak in MLIR use-def list ordering test\n",
            "commit_timestamp": 1684725090.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684747398.519781,
            "elapsed_time": 3987.354939222336,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5e92298f76875e1a89ad58bab042cd7abe9fc004",
            "commit_message": "[2/11][POC][Clang][RISCV] Define RVV tuple types\n\nFor the cover letter of this patch-set, please checkout D146872.\n\nDepends on D146872.\n\nThis is the 2nd patch of the patch-set. This patch originates from\nD97264. This patch further allows local variable declaration and\nfunction parameter passing by adjustment in clang lowering.\n\nTest cases are provided to demonstrate the LLVM IR generated.\n\nNote: This patch is currently only a proof-of-concept with only a\nsingle RVV tuple type declared here, the rest will be added when\nthe concept of this patch-set is accepted.\n\nAuthored-by: eop Chen <eop.chen@sifive.com>\nCo-Authored-by: Hsiangkai Wang <kai.wang@sifive.com>\n\nReviewed By: craig.topper\n\nDifferential Revision: https://reviews.llvm.org/D146873\n",
            "commit_timestamp": 1684741840.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684763171.460235,
            "elapsed_time": 5403.340304374695,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c7e06ce4b74789818155e0cc932f8dad4a899312",
            "commit_message": "[MLIR][LLVM] Allow inlining llvm.intr.assume.\n\nThis operation is not marked pure because it needs to survive DCE, but\nis otherwise safe to inline.\n\nReviewed By: Dinistro\n\nDifferential Revision: https://reviews.llvm.org/D151070\n",
            "commit_timestamp": 1684756831.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684776568.040729,
            "elapsed_time": 4424.899654865265,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "986cbd80d1dc838c61abff24b8d7ac28dcf4ac2a",
            "commit_message": "[clang][AST] TextNodeDumper should not evaluate the initializer of constexpr variable declaration when it has a dependent type\n\n`TextNodeDumper` enabed through `-ast-dump` flag should not evlauate the initializer when it visits a constexpr `VarDecl` node if it has a dependent type.\n\nI found a crashing case fixed by this change and added it as a test case.\n`template <typename T> constexpr T call_init(0);`\nLink: https://godbolt.org/z/3bG9Pjj5E\n\nThis is a fix for the regression caused by D146358\n\nDifferential Revision: https://reviews.llvm.org/D151033\n",
            "commit_timestamp": 1684771058.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684791348.144096,
            "elapsed_time": 4673.364530086517,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ca2666548085b3f4e61b1722272c4fa0eadd2d4e",
            "commit_message": "Revert \"[PostOrderIterator] Store end iterator (NFC)\"\n\nThis reverts commit 50f0ee8fbfc1f597ae7d2d49e0996c4338e5652f.\n\nThis breaks the bots.\n\nhttps://green.lab.llvm.org/green/view/LLDB/job/lldb-cmake/lastFailedBuild/consoleFull#-1141050806a1ca8a51-895e-46c6-af87-ce24fa4cd561\n",
            "commit_timestamp": 1684785683.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684805785.035755,
            "elapsed_time": 4676.531354188919,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c1fe1474d27f6fe7b8e5bfedcc9066e9a90ad85e",
            "commit_message": "[llvm-mca] Print InstructionInfoView using Instrument information.\n\nPrevious reports calculated the overall report using Instrument\ninformation but did not print out per-instruction data using\nInstrument information. This patch fixes that.\n\nDifferential Revision: https://reviews.llvm.org/D150459\n",
            "commit_timestamp": 1684798879.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684820189.376108,
            "elapsed_time": 4728.655710220337,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "61bc3ada1f9088a852126d5556f837f24683160b",
            "commit_message": "[test] precommit tests for D141188\n",
            "commit_timestamp": 1684812626.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684834595.853444,
            "elapsed_time": 4869.501857280731,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f5af7d2d987b0b16d7a641b7aa9086a75d533944",
            "commit_message": "Revert \"[clang][ExprConstant] fix __builtin_object_size for flexible array members\"\n\nThis reverts commit 57c5c1ab2a188b7962c9de5ac0f95e3c7441940a.\n\nCauses an assertion failure: https://reviews.llvm.org/D150892#4363080\n",
            "commit_timestamp": 1684828778.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684848898.505857,
            "elapsed_time": 4677.364478588104,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "68baaca61dfad1179a61d99cbf0fe23a6894849d",
            "commit_message": "[clang][dataflow] Use `Strict` accessors in comma operator and no-op cast.\n\nThis patch is part of the ongoing migration to strict handling of value\ncategories (see https://discourse.llvm.org/t/70086 for details).\n\nDepends On D150775\n\nReviewed By: gribozavr2\n\nDifferential Revision: https://reviews.llvm.org/D150776\n",
            "commit_timestamp": 1684843080.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684864505.797193,
            "elapsed_time": 5698.660797357559,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e826762a0826c11dc62696e46068c61c57a00aa9",
            "commit_message": "[libc] More efficiently send bytes via `send_n` and `recv_n`\n\nCurrently we have the `send_n` and `recv_n` routines to stream data,\nsuch as a string to print, to the other side. The first operation is to\nsend the size so the other side knows the number of bytes to recieve.\nHowever, this wasted 56 bytes that could've been sent. This meant that\nsmall values, like the arguments to a function to call on the host for\nexample, needed to perform an extra send. This patch sends the first 56\nbytes in the first packet and continues if necessary.\n\nDepends on D150992\n\nReviewed By: JonChesterfield\n\nDifferential Revision: https://reviews.llvm.org/D151041\n",
            "commit_timestamp": 1684857587.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684877458.360438,
            "elapsed_time": 4645.468456268311,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4edaacf04baa44b07394319781aacfb39311d498",
            "commit_message": "[MLIR] Update Bazel build to remove references to PybindUtils.cpp\n\nThis file has been removed in https://reviews.llvm.org/D151167.\n\nReviewed By: aartbik\n\nDifferential Revision: https://reviews.llvm.org/D151242\n",
            "commit_timestamp": 1684870822.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684892023.345853,
            "elapsed_time": 4659.00946521759,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f6c4808d95221a5838e14474d95c6fe85bb1488a",
            "commit_message": "[compiler-rt] Allow 64-bit sanitizer allocator to be used if using RISCV64 and Fuchsia\n\nThis way, Fuchsia can use the 64-bit allocator settings in D151157 without changing the default behavior for others.\n\nDifferential Revision: https://reviews.llvm.org/D151159\n",
            "commit_timestamp": 1684885109.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684906443.506249,
            "elapsed_time": 4633.001081466675,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "597dd1f91d9f3823e4184f1fe73d8125fa16c026",
            "commit_message": "[NFC] Fix the warning for dangling pointer for c0d6f85e3ae8bc\n\nThe bot notes a warning-converted-error for the dangling pointer. And\nthe patch fixes that.\n",
            "commit_timestamp": 1684899775.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684920716.360784,
            "elapsed_time": 4597.1598863601685,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "82082b7da075b9f3571ab5b26248578e6d98ee52",
            "commit_message": "[LVI] Don't compute range on not guaranteed not to be undef condition in SelectInst\n\nFixes:https://github.com/llvm/llvm-project/issues/62901\n\nReviewed By: nikic\n\nDifferential Revision: https://reviews.llvm.org/D151295\n",
            "commit_timestamp": 1684915333.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684935438.486588,
            "elapsed_time": 4719.073246240616,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "44bb442fd5be3860e7819cb216621b5ea59970c3",
            "commit_message": "[lldb][DataFormatter] Add dereference support to libstdcpp std::shared_ptr formatter\n\nThis mimicks the implementation of the libstdcpp std::unique_ptr\nformatter.\n\nThis has been attempted several years ago in\n`0789722d85cf1f1fdbe2ffb2245ea0ba034a9f94` but was reverted in\n`e7dd3972094c2f2fb42dc9d4d5344e54a431e2ce`.\n\nThe difference to the original patch is that we now maintain\na `$$dereference$$` member and we only store weak pointers\nto the other children inside the synthetic frontend. This is\nwhat the libc++ formatters do to prevent the recursion mentioned\nin the revert commit.\n",
            "commit_timestamp": 1684929671.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684950882.910849,
            "elapsed_time": 5546.6628677845,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f74bb326949aec0cac8e54ff00fc081f746ff35d",
            "commit_message": "AMDGPU: Add some new tests for class undef/poison handling\n",
            "commit_timestamp": 1684943679.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684964186.130574,
            "elapsed_time": 4747.4885766506195,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6006d43e2d7dda56844f1c3867baa981cfefb8ea",
            "commit_message": "LLVM_FALLTHROUGH => [[fallthrough]]. NFC\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D150996\n",
            "commit_timestamp": 1684957210.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684978460.44625,
            "elapsed_time": 4591.600812673569,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5f84641901398dd96d6097a57ad84670bdc7476f",
            "commit_message": "[Clang][RISCV] Update vaadd.c test case with new script. NFC\n",
            "commit_timestamp": 1684973019.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684994956.076661,
            "elapsed_time": 6546.936139822006,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4374026d6da23dbb6b9c2e4fca65cdf198ee1e0f",
            "commit_message": "[MIPS] Check if register is non-null before calling isSuperOrSubRegisterEq (NFCI)\n\nD151036 adds an assertions that prohibits iterating over sub- and\nsuper-registers of a null register. This is already the case when\niterating over register units of a null register, and worked by\naccident for sub- and super-registers.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D151288\n",
            "commit_timestamp": 1684985621.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685007345.8991,
            "elapsed_time": 4728.322458267212,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0c23dc20bcfbe77b42fc3515c41432e4a2f5ce3f",
            "commit_message": "Reapply [SCEV] Replace IsAvailableOnEntry with block disposition\n\nThis exposed an issue in SCEVExpander/LCSSA, which has been fixed\nin D150681.\n\n-----\n\nAs far as I understand, the IsAvailableOnEntry() function basically\nimplements the same functionality as the properlyDominates() block\ndisposition. The primary difference (apart from a weaker\nimplementation) seems to be in this comment at the top:\n\n    // Checks if the SCEV S is available at BB.  S is considered available at BB\n    // if S can be materialized at BB without introducing a fault.\n\nHowever, I don't really understand why there would be such a\nrequirement. It's my understanding that SCEV explicitly does not\ncare about trapping udiv instructions itself, and it's the job of\nSCEVExpander's isSafeToExpand() to make sure these don't get\nexpanded if they may trap.\n\nDifferential Revision: https://reviews.llvm.org/D149344\n",
            "commit_timestamp": 1685001738.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685021665.65852,
            "elapsed_time": 4722.008229255676,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4c46c7cef3791a410cf226f7f005231be35dd8b9",
            "commit_message": "[sanitizer_common] Fix StripFunctionName() on Windows\n\nAlso implement StripFunctionName() on Windows to properly strip\ninterceptor prefixes.\n\nReported-by: https://lab.llvm.org/buildbot#builders/127/builds/48810\n",
            "commit_timestamp": 1685013547.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685035943.928274,
            "elapsed_time": 4611.545478582382,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6f026ff029853431ee535e6a361edd059da3ab27",
            "commit_message": "Discussion: Darwin Sanitizers Stable ABI\n\n# Darwin Sanitizers Stable ABI\n\nWe wish to make it possible to include the AddressSanitizer (ASan) runtime implementation in OSes and for this we need a stable ASan ABI. Based on previous discussions about this topic, our understanding is that freezing the present ABI would impose an excessive burden on other sanitizer developers and for unrelated platforms. Therefore, we propose adding a secondary stable ABI for our use and anyone else in the community seeking the same. We believe that we can define a stable ABI with minimal burden on the community, expecting only to keep existing tests running and implementing stubs when new features are added. We are okay with trading performance for stability with no impact for existing users of ASan while minimizing the maintenance burden for ASan maintainers. We wish to commit this functionality to the LLVM project to maintain it there. This new and stable ABI will abstract away the implementation details allowing new and novel approaches to ASan for developers, researchers and others.\n\n## Details\n\nRather than adding a lot of conditional code to the LLVM instrumentation phase, which would incur excessive complexity and maintenance cost of adding conditional code into all places that emit a runtime call, we propose a \u201cshim\u201d layer which will map the unstable ABI to the stable ABI:\n\n* A static library (.a library) shim that maps the existing ASan ABI to a generalized, smaller and stable ABI. The library would implement the __asan functions and call into the new ABI. For example:\n    * `void __asan_load1(uptr p) { __asan_abi_loadn(p, 1, true); }`\n    * `void __asan_load2(uptr p) { __asan_abi_loadn(p, 2, true); }`\n    * `void __asan_noabort_load16(uptr p) { __asan_abi_loadn(p, 16, false); }`\n    * `void __asan_poison_cxx_array_cookie(uptr p) { __asan_abi_pac(p); }`\n* This \u201cshim\u201d library would only be used by people who opt in: A compilation flag in the Clang driver will be used to gate the use of the stable ABI workflow.\n* Utilize the existing ability for the ASan instrumentation to prefer runtime calls instead of inlined direct shadow memory accesses.\n* Pursue (under the new driver flag) a better separation of abstraction and implementation with:\n    * LLVM instrumentation: Calling out for all poisoning, checking and unpoisoning.\n    * Runtime: Implementing the stable ABI and being responsible of implementation details of the shadow memory.\n\n## Maintenance\n\nOur aim is that the maintenance burden on the sanitizer developer community be negligible. Stable ABI tests will always pass for non-Darwin platforms. Changes to the existing ABI which would require a change to the shim have been infrequent as the ASan ABI is already relatively stable. Rarely, a change that impacts the contract between LLVM and the shim will occur. Among such foreseeable changes are: 1) changes to a function signature, 2) additions of new functions, or 3) deprecation of an existing function. Following are some examples of reasonable responses to those changes:\n\n* Example: An existing ABI function is changed to return the input parameter on success or NULL on failure. In this scenario, a reasonable change to the shim would be to modify the function signature appropriately and to simply guess at a common-sense implementation.\n    * `uptr __asan_load1(uptr p) { __asan_abi_loadn(p, 1, true); return p; }`\n* Example: An additional function is added for performance reasons. It has a very similar function signature to other similarly named functions and logically is an extension of that same pattern. In this case it would make sense to apply the same logic as the existing entry points:\n    * `void __asan_load128(uptr p) { __asan_abi_loadn(p, 128, true); }`\n* Example: An entry point is added to the existing ABI for which there is no obvious stable ABI implementation: In this case, doing nothing in a no-op stub would be acceptable, assuming existing features of ASan can still work without an actual implementation of this new function.\n    * `void __asan_prefetch(uptr p) { }`\n* Example: An entrypoint in the existing ABI is deprecated and/or deleted:\n    * (Delete the entrypoint from the shim.)\n\nWe\u2019re looking for buy-in for this level of support.\n\n(Note: Upon acceptance of the general concepts herein, we will add a controlling clang flag, cmake integration, contract for the stable ABI, and the appropriate test infrastructure.)\n\nReviewed By: eugenis, vitalybuka, MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D143675\n",
            "commit_timestamp": 1685030261.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685051566.796912,
            "elapsed_time": 5641.269615411758,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "91689744477843a588f701fdc598ccff3cbbc8fb",
            "commit_message": "Reapply: [clang][diagnostics] Adding -Wpacked-non-pod to -Wall\n\nUsers will be informed when non-POD is not packed using -Wall. This\nis also consistent with GCC.\n\nFixes PR#60832.\n\nDifferential Revision: https://reviews.llvm.org/D151162\n",
            "commit_timestamp": 1685044920.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685064809.232041,
            "elapsed_time": 4616.838412761688,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e86defd588e79de60d19a101a43b0c8c86dff37b",
            "commit_message": "[mlir][tosa] Add type checking traits to the appropriate ops\n\nAdd the trait `SameOperandsAndResultElementType` and\n`SameOperandsElementType` to verify ops that are known\nto have the same input and output type rather than generate\nan invalid tosa IR with mixed data types like:\n\n  \"tosa.add\"(%0, %1) : (tensor<nxbf16>, tensor<nxf32>) -> tensor<nxf32>\n\nThus apply tosa.cast prior if needed.\n\nChange-Id: Ie866b84e371e3b571ec04f7abb090c216dd39c33\n\nReviewed By: jpienaar\n\nDifferential Revision: https://reviews.llvm.org/D150472\n",
            "commit_timestamp": 1685058690.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685081139.712436,
            "elapsed_time": 6316.496200084686,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bb9a0c736b57f405c6fee598ce8043d0d35a5790",
            "commit_message": "Revert \"[MLIR] Add native Bytecode support for properties\"\n\nThis reverts commit ca5a12fd69d4acf70c08f797cbffd714dd548348\nand follow-up fixes:\n\ndf34c288c428eb4b867c8075def48b3d1727d60b\n07dc906883af660780cf6d0cc1044f7e74dab83e\nab80ad0095083fda062c23ac90df84c40b4332c8\n837d1ce0dc8eec5b17255291b3462e6296cb369b\n\nThe first commit was incomplete and broken, I'll prepare a new version\nlater, in the meantime pull this work out of tree.\n",
            "commit_timestamp": 1685073751.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685093595.283524,
            "elapsed_time": 4603.9289290905,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c80fe251d869d5304448cfa3bb855c653285de7f",
            "commit_message": "[ASAN] Support memory checks on vp.gather/scatter.\n\nThe patch supports vp.gather/scatter by allowing addresses being pointer vectors.\nAnd then we just need to check each active pointer element of those pointer vectors.\n\nReviewed By: reames\n\nDifferential Revision: https://reviews.llvm.org/D149245\n",
            "commit_timestamp": 1685086120.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685107729.334311,
            "elapsed_time": 4280.759508371353,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "00480189847e89e10f6333c28d65377906316c0f",
            "commit_message": "[mlir] Make sure mlir-opt is in the list of substituted tools\n\notherwise it gets picked up from $PATH, which is not always working\nproperly.\n",
            "commit_timestamp": 1685102434.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685136952.355767,
            "elapsed_time": 4715.218818187714,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "23da2106246edd445b5eae105cbefe0493f4fd1d",
            "commit_message": "[PseudoProbe] Do not force the calliste debug loc to inlined probes from __nodebug__ functions.\n\nFor pseudo probes we would like to keep their original dwarf discriminator (either a zero or null) until the first FS-discriminator pass. The inliner is a violation of that, given that it assigns inlinee instructions with no debug info with the that of the callsite. This is being disabled in this patch.\n\nReviewed By: wenlei\n\nDifferential Revision: https://reviews.llvm.org/D151568\n",
            "commit_timestamp": 1685131216.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685151399.6484,
            "elapsed_time": 4668.837718963623,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0508ac32cfcc1a9fc5a81d16de8d418dc5a0666b",
            "commit_message": "[Vectorize] Fix a warning\n\nThis patch fixes:\n\n  llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp:1429:23:\n  error: comparison of integers of different signs: 'int' and 'const\n  size_t' (aka 'const unsigned long') [-Werror,-Wsign-compare]\n",
            "commit_timestamp": 1685145754.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685165958.637722,
            "elapsed_time": 4927.626342058182,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "273303ad66a32e5e599bef5ee18c3a9f589e530d",
            "commit_message": "[Sema] Remove unused declaration startLambdaDefinition\n\nThe corresponding function definition was removed by:\n\n  commit 93d7002dc4644b0a6f15a998dff0d55c72012e87\n  Author: Corentin Jabot <corentinjabot@gmail.com>\n  Date:   Sun Feb 6 22:58:43 2022 +0100\n",
            "commit_timestamp": 1685157563.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685179891.819798,
            "elapsed_time": 4629.475900650024,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fe01c084249969518bcd69aa2fedffc9f017f43a",
            "commit_message": "[mlir][bazel] Port for 660f714e26999d266232a1fbb02712bb879bd34e, second\nattempt.\n",
            "commit_timestamp": 1685169465.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685195384.169872,
            "elapsed_time": 5512.546324968338,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "48985f58b41a74d012bc08ba3e2c14a3eb171314",
            "commit_message": "[libc++][format][test] Adds Windows support.\n\nThese tests pass on Windows without additional changes. This has been\ntested in D150593.\n",
            "commit_timestamp": 1685188646.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685209002.740974,
            "elapsed_time": 4748.9169590473175,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1845d9de187b726dfe074218377c3d77ce43277a",
            "commit_message": "[CGP] Disable default copy ctor and copy assignment operator for InstructionRemover\n\nclass InstructionRemover manages resources such as dynamically allocated memory, it's generally a good practice to either implement a custom copy constructor or disable the default one.\n\nReviewed By: pengfei\n\nDifferential Revision: https://reviews.llvm.org/D151543\n",
            "commit_timestamp": 1685200833.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685224476.734805,
            "elapsed_time": 5881.673288106918,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cf44847b4d1edb43de7ee917ddccf7fa397c63cb",
            "commit_message": "[mlir][gpu][sparse] adding cusparse sddmm support\n\nDifferential Revision: https://reviews.llvm.org/D151279\n",
            "commit_timestamp": 1685217701.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685233012.067647,
            "elapsed_time": 4522.00386929512,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bdc2771911cb181fe0144800000b4c19d94ff52e",
            "commit_message": "[StaticAnalyzer] Remove unused declaration handleLVectorSplat\n\nThe corresponding function definition was removed by:\n\n  commit 55662b24a4755680e4fd34dc22a3dd555fdb1291\n  Author: Balazs Benics <balazs.benics@sigmatechnology.se>\n  Date:   Thu Jul 1 10:54:28 2021 +0200\n",
            "commit_timestamp": 1685224434.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685247362.556475,
            "elapsed_time": 4896.871234416962,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bdc2771911cb181fe0144800000b4c19d94ff52e",
            "commit_message": "[StaticAnalyzer] Remove unused declaration handleLVectorSplat\n\nThe corresponding function definition was removed by:\n\n  commit 55662b24a4755680e4fd34dc22a3dd555fdb1291\n  Author: Balazs Benics <balazs.benics@sigmatechnology.se>\n  Date:   Thu Jul 1 10:54:28 2021 +0200\n",
            "commit_timestamp": 1685224434.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685261705.25882,
            "elapsed_time": 4546.777031421661,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "65f40cb455f8eaf83c163793d19640b56393c1e5",
            "commit_message": "[ModuleInliner] Remove an inapplicable comment\n\nThe module inliner has its own logic in deciding the order in which\ncall sites are inlined, so the comment is inapplicable.\n",
            "commit_timestamp": 1685251597.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685276390.855926,
            "elapsed_time": 5417.11806845665,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f8536fb11e3d71d009c9002b5aa2ef32983ac7dc",
            "commit_message": "[clang][HeaderSearch] Fix implicit module when using header maps\n\nPreviously, if a header was found via in a header map, and not just remapped.\nwe wouldn't also find the module it maps to when using implicit modules (for\nmodule maps that were explicitly loaded).\n\nThis diff just updates these code paths to also locate the owning module via\n`findUsableModuleForHeader`.\n\nReviewed By: benlangmuir\n\nDifferential Revision: https://reviews.llvm.org/D103930\n",
            "commit_timestamp": 1685270991.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685290656.244879,
            "elapsed_time": 4763.871718883514,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8a4e3675d88ecd0413d89dea1e3578a4696b05da",
            "commit_message": "[Hexagon] Explicitly make vector subregs have unknown size and offset\n\nVector length depends on the HVX mode, so make the size and offset unknown\ninstead using values for some specific mode.\n",
            "commit_timestamp": 1685287963.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685305037.627622,
            "elapsed_time": 4605.88134765625,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fb250b8295b9f65590017c5b13d6de0b4f4617c1",
            "commit_message": "[clang][c++20][NFC] `ComparisonCategoryType` - updated comment, removed `std:*_equality`\n\n`weak_equality` and `strong_equality` are removed from the standard:\n- https://wg21.link/P1959R0\n- https://eel.is/c++draft/cmp.categories.pre\n\nReviewed By: rsmith\n\nDifferential Revision: https://reviews.llvm.org/D151627\n",
            "commit_timestamp": 1685301916.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685319401.256471,
            "elapsed_time": 4595.53854227066,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "53be2e0f59730671eac24c9e9ce615d20250d917",
            "commit_message": "[MLIR] NFC. JitRunner - use range-based for\n\nAddress clang-tidy warning in JitRunner.cpp. Use range-based for.\n",
            "commit_timestamp": 1685305490.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685333950.358057,
            "elapsed_time": 5953.094482898712,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b6a5aeadb5588dedc09eacc3b98b0278d6d53529",
            "commit_message": "[NFC][CLANG] Fix issue with dereference null return value in EvaluateBuiltinClassifyType()\n\nThis patch uses cast instead of dyn_cast which will assert if the type doesn't match.\n\nReviewed By: erichkeane\n\nDifferential Revision: https://reviews.llvm.org/D151469\n",
            "commit_timestamp": 1685329749.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685348190.633635,
            "elapsed_time": 4590.754618644714,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e20931b2ccd10de2fd25d9a6fbe9c166e7430f23",
            "commit_message": "[clang] Restrict Inline Builtin to non-static, non-odr linkage\n\nInline builtins have a very special behavior compared to other\nfunctions, it's better if we keep them restricted to a minimal set of\nfunctions.\n\nAdd a linkage check which prevents considering ODR definitions as inline\nbuiltins.\n\nFix #62958\n\nDifferential Revision: https://reviews.llvm.org/D148723\n",
            "commit_timestamp": 1685347338.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685362571.909074,
            "elapsed_time": 4745.620724439621,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "061e368fe213bd0701261a3e59f796c7439484fc",
            "commit_message": "[SelectionDAG] Implement soft FP legalisation for bf16 FP_EXTEND and BF16_TO_FP\n\nAs discussed in D151436, it's safe to do this as a simple shift (as is\ndone in LegalizeDAG.cpp) rather than needing a libcall. The added test\ncases for RISC-V previously just triggered an assertion.\n\nCodegen for bfloat_to_double will be slightly improved by D151434.\n\nDifferential Revision: https://reviews.llvm.org/D151563\n",
            "commit_timestamp": 1685352748.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685376737.502253,
            "elapsed_time": 3328.4386444091797,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a3a8cbffcf00bdbf19a15a070313b60c0a9ce342",
            "commit_message": "[AMDGPU][AsmParser][NFC] Refine parsing of NamedOperandU32 operands.\n\nEliminates the need for the custom code in parseCustomOperand().\n\nPart of <https://github.com/llvm/llvm-project/issues/62629>.\n\nReviewed By: dp\n\nDifferential Revision: https://reviews.llvm.org/D150980\n",
            "commit_timestamp": 1685376104.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685391438.488309,
            "elapsed_time": 4556.994585752487,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "40af06ccc7bf9989b8deb410ed78a4795c22aa73",
            "commit_message": "[clang-tidy] Update UnusedReturnValueCheck types\n\nUpdate the types for UnusedReturnValueCheck after D151383.\n\n1. Add std::errc, std:error_condition\n2. Remove `absl::Status` - it's marked as `[[nodiscard]]` anyway so it's redundant (and might create double warnings) to check it.\n\nReviewed By: PiotrZSL\n\nDifferential Revision: https://reviews.llvm.org/D151650\n",
            "commit_timestamp": 1685390552.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685406021.953417,
            "elapsed_time": 5735.7667191028595,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b936816fb305cc16d2d1cd6d424c08c39a681a32",
            "commit_message": "MLIR/Cuda: Add the appropriate \"HINTS\" on CMake find_library and mark these REQUIRED\n\nThe cmake logic to find cuda paths exposes some paths to search for the cuda\nlibrary, we need to propagate this through the call for find_library.\nThis was already done for cuSparse but not for cuda.\n\nDifferential Revision: https://reviews.llvm.org/D151645\n",
            "commit_timestamp": 1685395944.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685420073.265778,
            "elapsed_time": 4351.925969362259,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8f386ff69ab8e012c1716ae05e70fd5288435835",
            "commit_message": "[ms-inline asm] Add error check for `getAsInteger`\n\n.Imm can get lexed as a real, but a real doesn't equal to .Imm, e.g.,\n2.5 or .123e+8. We should report error for it rather than silently ignore.\n\nReviewed By: skan\n\nDifferential Revision: https://reviews.llvm.org/D151652\n",
            "commit_timestamp": 1685416857.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685434563.722161,
            "elapsed_time": 4685.979875087738,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c7592c7714c2796715e6460fc5fd19e5a930c427",
            "commit_message": "[mlir][scf] NFC - Add debug information to scf pipelining\n",
            "commit_timestamp": 1685433771.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685449104.706987,
            "elapsed_time": 4691.464245080948,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "48339d0fbbdb2ba4610173ad1e792e9c2272c887",
            "commit_message": "[CodeGen] Add pre-commit tests for D148558\n\nThis patch adds four new tests for upcoming functionality in LLVM:\n* complex-deinterleaving-add-mull-fixed-contract.ll\n* complex-deinterleaving-add-mull-scalable-contract.ll\n* complex-deinterleaving-add-mull-fixed-fast.ll\n* complex-deinterleaving-add-mull-scalable-fast.ll.\n\nThese tests were generated from the IR of vectorizable loops, which were\ncompiled from C++ code using different optimization flags in Clang. Each pair\nof tests corresponds to Neon and SVE architectures, respectively, and\neach pair contains tests compiled with -Ofast and -O3 -ffp-contract=fast\n-ffinite-math-only optimization flags.\nThe tests were stripped of nnan and ninf flags as they have no impact on the\noutput.\nThe primary objective of these tests is to show the various sequences of\ncomplex computations that may be encountered and to demonstrate the ability\nof ComplexDeinterleaving to support any ordering.\n\nDepends on D147451\n\nDifferential Revision: https://reviews.llvm.org/D148550\n",
            "commit_timestamp": 1685447399.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685463603.346701,
            "elapsed_time": 6479.250331163406,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7cdb875d4dcd5bb65708521dc121e3c969c561b9",
            "commit_message": "[mlir] silence msvc warning\n",
            "commit_timestamp": 1685462359.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685477907.417637,
            "elapsed_time": 4978.376668691635,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d81ce04587c006b6731198956c522c93d0df1050",
            "commit_message": "[Driver] Report error for unsupported -mlarge-endian/-mlittle-endian\n",
            "commit_timestamp": 1685475921.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685492346.018709,
            "elapsed_time": 4682.1873297691345,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "aaa33b6a98de2be7cdc827b13e60c103206d6461",
            "commit_message": "Fix assert \"DeclRefExpr for Decl not entered in LocalDeclMap?\"\n\nCurrently compiler assert when passing variable \"memspace\" in\nomp_init_allocator.\n\nomp_allocator_handle_t alloc=omp_init_allocator(memspace,1,traits)\n\nThe problem is memspace is not mapping to the target region.  During\nthe call to emitAllocatorInit, calls to EmitVarDecl for \"alloc\", then\nemit initialization of \"alloc\" that cause to assert.\n\nIf I understant correct, it is not necessary to emit variable\ninitialization, since \"allocator\" is private to target region.\n\nTo fix this call CGF.EmitAutoVarAlloca(allocator) instead\nCGF.EmitVarDecl(allocator).\n\nDifferential Revision: https://reviews.llvm.org/D151743\n",
            "commit_timestamp": 1685490006.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685506512.163422,
            "elapsed_time": 4526.102992534637,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0442d08fdb173d89b0779d32eb929957a344f5e6",
            "commit_message": "[clang][Sema] Improve diagnostics for auto return type\n\nCurrently when clang fails to deduce auto return type of a function,\nit does not emit any notes about why it fails. This causes difficulty\nfor users to fix such errors.\n\nActually, clang already generates the information for emitting notes\nabout the failed deduction. There is a TODO for actually emitting\nthem.\n\nThis patch tries to implement the TODO. Basically it passes the\nfailed template specialization candidate set from the point of\nspecialization failure back to the point where the deduction starts.\n\nIt is not comprehensive but would be a start for further improvement.\n\nReviewed by: Richard Smith, Matheus Izvekov\n\nDifferential Revision: https://reviews.llvm.org/D150212\n\nFixes: SWDEV-354278\n",
            "commit_timestamp": 1685504159.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685520866.22536,
            "elapsed_time": 4699.46359205246,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bb6c036ef378de321d5b7fc0ada317f91c88570d",
            "commit_message": "[clang][Diagnostics][NFC] Use getFileID() directly\n\nInstead of calling getDecomposedLoc() and then only using the FileID.\n",
            "commit_timestamp": 1685519836.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685535403.401662,
            "elapsed_time": 4709.391610622406,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "981766a3d6cf043b0fa7efc69d227287f7a909aa",
            "commit_message": "[mlir][bazel] Disable Transform/test-repro-dump.mlir test in bazel build.\n",
            "commit_timestamp": 1685533848.0
        }
    ]
}