{
    "v1": [
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1684603737.956203,
            "elapsed_time": 1686.055385351181,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": null
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1684610077.385662,
            "elapsed_time": 4011.8417756557465,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": null
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684617782.754098,
            "elapsed_time": 4125.218888044357,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684632365.571352,
            "elapsed_time": 4131.389887332916,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684646507.460228,
            "elapsed_time": 4050.072568655014,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684660783.781127,
            "elapsed_time": 3890.4404566287994,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "287dd0142c08caad5b32628f3842dfd5d5c59d03",
            "commit_message": "[X86][MC] Simplify some code in X86AsmBackend.cpp, NFCI\n",
            "commit_timestamp": 1684647829.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684675244.317621,
            "elapsed_time": 3994.0369441509247,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8b1727f8d9104df5ced4bdfdc065dea85ff84baf",
            "commit_message": "[NFC] remove duplicated dash in release note for #62447\n",
            "commit_timestamp": 1684661176.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684689611.651695,
            "elapsed_time": 3978.406282186508,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3b272039a88cc9952e5bad71b6b02a62b2c22098",
            "commit_message": "[ubsan][test] Unsupport function.cpp in Android non-x86 on sanitizer-x86_64-linux-android after D148573\n\nThe qemu environment cannot run an executable with a link-time shared\nobject built during the test?\n```\nInput was:\n<<<<<<\n            1: CANNOT LINK EXECUTABLE \"/data/local/tmp/Output/var/lib/buildbot/sanitizer-buildbot6/sanitizer-x86_64-linux-android/build/compiler_rt_build_android_aarch64/test/ubsan/Standalone-aarch64/TestCases/TypeCheck/Function/Output/function.cpp.tmp\": library \"/var/lib/buildbot/sanitizer-buildbot6/sanitizer-x86_64-linux-android/build/compiler_rt_build_android_aarch64/test/ubsan/Standalone-aarch64/TestCases/TypeCheck/Function/Output/function.cpp.tmp-so.so\" not found: needed by main executable\n```\n",
            "commit_timestamp": 1684684234.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684704257.900953,
            "elapsed_time": 3932.433120250702,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4aa1cadf3c67c61b394051630896f06f35b562ca",
            "commit_message": "[Driver] Disable -fsanitize=function for ppc64be after D148573\n\nELFObjectWriter.cpp may report\n```\nerror: Cannot represent a difference across sections\n```\non some ppc64be configurations, likely related to some interaction\nbetween the obsoleted ELFv1 and MC.\nUnfortunately I cannot reproduce this locally with --target=powerpc64-linux-gnu.\n",
            "commit_timestamp": 1684685680.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684718710.596186,
            "elapsed_time": 4178.199296951294,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f81ccb520927247b02708873567428d6988e2a07",
            "commit_message": "[ExecutionEngine] Re-enable JIT tests on PowerPC.\n\nThese were previously re-enabled in d771f54107c, but had to be disabled again\nin 2060a72b4d7 due to test failures.\n\nThis is a next step to landing https://reviews.llvm.org/D148192, which adds\na skeleton JITLink backend for PowerPC.\n\nThe fixes for those failures were (1) to explicitly specify IsLittleEndian =\ntrue for the MachO YAML testcases, (2) disable some example tests for examples\nthat aren't supported on PowerPC yet, and (3) fixing the endianness of a\nrelocation read/write (for ELF R_AARCH64_TSTBR14) in RuntimeDyldELF.\n",
            "commit_timestamp": 1684710726.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684733689.769472,
            "elapsed_time": 4721.939621925354,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f6fb639c76ce255e2f5b3e2c8550270243e7e7ab",
            "commit_message": "Fix memoery leak in MLIR use-def list ordering test\n",
            "commit_timestamp": 1684725090.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684747398.519781,
            "elapsed_time": 3987.354939222336,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5e92298f76875e1a89ad58bab042cd7abe9fc004",
            "commit_message": "[2/11][POC][Clang][RISCV] Define RVV tuple types\n\nFor the cover letter of this patch-set, please checkout D146872.\n\nDepends on D146872.\n\nThis is the 2nd patch of the patch-set. This patch originates from\nD97264. This patch further allows local variable declaration and\nfunction parameter passing by adjustment in clang lowering.\n\nTest cases are provided to demonstrate the LLVM IR generated.\n\nNote: This patch is currently only a proof-of-concept with only a\nsingle RVV tuple type declared here, the rest will be added when\nthe concept of this patch-set is accepted.\n\nAuthored-by: eop Chen <eop.chen@sifive.com>\nCo-Authored-by: Hsiangkai Wang <kai.wang@sifive.com>\n\nReviewed By: craig.topper\n\nDifferential Revision: https://reviews.llvm.org/D146873\n",
            "commit_timestamp": 1684741840.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684763171.460235,
            "elapsed_time": 5403.340304374695,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c7e06ce4b74789818155e0cc932f8dad4a899312",
            "commit_message": "[MLIR][LLVM] Allow inlining llvm.intr.assume.\n\nThis operation is not marked pure because it needs to survive DCE, but\nis otherwise safe to inline.\n\nReviewed By: Dinistro\n\nDifferential Revision: https://reviews.llvm.org/D151070\n",
            "commit_timestamp": 1684756831.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684776568.040729,
            "elapsed_time": 4424.899654865265,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "986cbd80d1dc838c61abff24b8d7ac28dcf4ac2a",
            "commit_message": "[clang][AST] TextNodeDumper should not evaluate the initializer of constexpr variable declaration when it has a dependent type\n\n`TextNodeDumper` enabed through `-ast-dump` flag should not evlauate the initializer when it visits a constexpr `VarDecl` node if it has a dependent type.\n\nI found a crashing case fixed by this change and added it as a test case.\n`template <typename T> constexpr T call_init(0);`\nLink: https://godbolt.org/z/3bG9Pjj5E\n\nThis is a fix for the regression caused by D146358\n\nDifferential Revision: https://reviews.llvm.org/D151033\n",
            "commit_timestamp": 1684771058.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684791348.144096,
            "elapsed_time": 4673.364530086517,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ca2666548085b3f4e61b1722272c4fa0eadd2d4e",
            "commit_message": "Revert \"[PostOrderIterator] Store end iterator (NFC)\"\n\nThis reverts commit 50f0ee8fbfc1f597ae7d2d49e0996c4338e5652f.\n\nThis breaks the bots.\n\nhttps://green.lab.llvm.org/green/view/LLDB/job/lldb-cmake/lastFailedBuild/consoleFull#-1141050806a1ca8a51-895e-46c6-af87-ce24fa4cd561\n",
            "commit_timestamp": 1684785683.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684805785.035755,
            "elapsed_time": 4676.531354188919,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c1fe1474d27f6fe7b8e5bfedcc9066e9a90ad85e",
            "commit_message": "[llvm-mca] Print InstructionInfoView using Instrument information.\n\nPrevious reports calculated the overall report using Instrument\ninformation but did not print out per-instruction data using\nInstrument information. This patch fixes that.\n\nDifferential Revision: https://reviews.llvm.org/D150459\n",
            "commit_timestamp": 1684798879.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684820189.376108,
            "elapsed_time": 4728.655710220337,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "61bc3ada1f9088a852126d5556f837f24683160b",
            "commit_message": "[test] precommit tests for D141188\n",
            "commit_timestamp": 1684812626.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684834595.853444,
            "elapsed_time": 4869.501857280731,
            "x64": true,
            "actual_files_count": 1661,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f5af7d2d987b0b16d7a641b7aa9086a75d533944",
            "commit_message": "Revert \"[clang][ExprConstant] fix __builtin_object_size for flexible array members\"\n\nThis reverts commit 57c5c1ab2a188b7962c9de5ac0f95e3c7441940a.\n\nCauses an assertion failure: https://reviews.llvm.org/D150892#4363080\n",
            "commit_timestamp": 1684828778.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684848898.505857,
            "elapsed_time": 4677.364478588104,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "68baaca61dfad1179a61d99cbf0fe23a6894849d",
            "commit_message": "[clang][dataflow] Use `Strict` accessors in comma operator and no-op cast.\n\nThis patch is part of the ongoing migration to strict handling of value\ncategories (see https://discourse.llvm.org/t/70086 for details).\n\nDepends On D150775\n\nReviewed By: gribozavr2\n\nDifferential Revision: https://reviews.llvm.org/D150776\n",
            "commit_timestamp": 1684843080.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684864505.797193,
            "elapsed_time": 5698.660797357559,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e826762a0826c11dc62696e46068c61c57a00aa9",
            "commit_message": "[libc] More efficiently send bytes via `send_n` and `recv_n`\n\nCurrently we have the `send_n` and `recv_n` routines to stream data,\nsuch as a string to print, to the other side. The first operation is to\nsend the size so the other side knows the number of bytes to recieve.\nHowever, this wasted 56 bytes that could've been sent. This meant that\nsmall values, like the arguments to a function to call on the host for\nexample, needed to perform an extra send. This patch sends the first 56\nbytes in the first packet and continues if necessary.\n\nDepends on D150992\n\nReviewed By: JonChesterfield\n\nDifferential Revision: https://reviews.llvm.org/D151041\n",
            "commit_timestamp": 1684857587.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684877458.360438,
            "elapsed_time": 4645.468456268311,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4edaacf04baa44b07394319781aacfb39311d498",
            "commit_message": "[MLIR] Update Bazel build to remove references to PybindUtils.cpp\n\nThis file has been removed in https://reviews.llvm.org/D151167.\n\nReviewed By: aartbik\n\nDifferential Revision: https://reviews.llvm.org/D151242\n",
            "commit_timestamp": 1684870822.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684892023.345853,
            "elapsed_time": 4659.00946521759,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f6c4808d95221a5838e14474d95c6fe85bb1488a",
            "commit_message": "[compiler-rt] Allow 64-bit sanitizer allocator to be used if using RISCV64 and Fuchsia\n\nThis way, Fuchsia can use the 64-bit allocator settings in D151157 without changing the default behavior for others.\n\nDifferential Revision: https://reviews.llvm.org/D151159\n",
            "commit_timestamp": 1684885109.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684906443.506249,
            "elapsed_time": 4633.001081466675,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "597dd1f91d9f3823e4184f1fe73d8125fa16c026",
            "commit_message": "[NFC] Fix the warning for dangling pointer for c0d6f85e3ae8bc\n\nThe bot notes a warning-converted-error for the dangling pointer. And\nthe patch fixes that.\n",
            "commit_timestamp": 1684899775.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684920716.360784,
            "elapsed_time": 4597.1598863601685,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "82082b7da075b9f3571ab5b26248578e6d98ee52",
            "commit_message": "[LVI] Don't compute range on not guaranteed not to be undef condition in SelectInst\n\nFixes:https://github.com/llvm/llvm-project/issues/62901\n\nReviewed By: nikic\n\nDifferential Revision: https://reviews.llvm.org/D151295\n",
            "commit_timestamp": 1684915333.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684935438.486588,
            "elapsed_time": 4719.073246240616,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "44bb442fd5be3860e7819cb216621b5ea59970c3",
            "commit_message": "[lldb][DataFormatter] Add dereference support to libstdcpp std::shared_ptr formatter\n\nThis mimicks the implementation of the libstdcpp std::unique_ptr\nformatter.\n\nThis has been attempted several years ago in\n`0789722d85cf1f1fdbe2ffb2245ea0ba034a9f94` but was reverted in\n`e7dd3972094c2f2fb42dc9d4d5344e54a431e2ce`.\n\nThe difference to the original patch is that we now maintain\na `$$dereference$$` member and we only store weak pointers\nto the other children inside the synthetic frontend. This is\nwhat the libc++ formatters do to prevent the recursion mentioned\nin the revert commit.\n",
            "commit_timestamp": 1684929671.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684950882.910849,
            "elapsed_time": 5546.6628677845,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f74bb326949aec0cac8e54ff00fc081f746ff35d",
            "commit_message": "AMDGPU: Add some new tests for class undef/poison handling\n",
            "commit_timestamp": 1684943679.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684964186.130574,
            "elapsed_time": 4747.4885766506195,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6006d43e2d7dda56844f1c3867baa981cfefb8ea",
            "commit_message": "LLVM_FALLTHROUGH => [[fallthrough]]. NFC\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D150996\n",
            "commit_timestamp": 1684957210.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684978460.44625,
            "elapsed_time": 4591.600812673569,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5f84641901398dd96d6097a57ad84670bdc7476f",
            "commit_message": "[Clang][RISCV] Update vaadd.c test case with new script. NFC\n",
            "commit_timestamp": 1684973019.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1684994956.076661,
            "elapsed_time": 6546.936139822006,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4374026d6da23dbb6b9c2e4fca65cdf198ee1e0f",
            "commit_message": "[MIPS] Check if register is non-null before calling isSuperOrSubRegisterEq (NFCI)\n\nD151036 adds an assertions that prohibits iterating over sub- and\nsuper-registers of a null register. This is already the case when\niterating over register units of a null register, and worked by\naccident for sub- and super-registers.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D151288\n",
            "commit_timestamp": 1684985621.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685007345.8991,
            "elapsed_time": 4728.322458267212,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0c23dc20bcfbe77b42fc3515c41432e4a2f5ce3f",
            "commit_message": "Reapply [SCEV] Replace IsAvailableOnEntry with block disposition\n\nThis exposed an issue in SCEVExpander/LCSSA, which has been fixed\nin D150681.\n\n-----\n\nAs far as I understand, the IsAvailableOnEntry() function basically\nimplements the same functionality as the properlyDominates() block\ndisposition. The primary difference (apart from a weaker\nimplementation) seems to be in this comment at the top:\n\n    // Checks if the SCEV S is available at BB.  S is considered available at BB\n    // if S can be materialized at BB without introducing a fault.\n\nHowever, I don't really understand why there would be such a\nrequirement. It's my understanding that SCEV explicitly does not\ncare about trapping udiv instructions itself, and it's the job of\nSCEVExpander's isSafeToExpand() to make sure these don't get\nexpanded if they may trap.\n\nDifferential Revision: https://reviews.llvm.org/D149344\n",
            "commit_timestamp": 1685001738.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685021665.65852,
            "elapsed_time": 4722.008229255676,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4c46c7cef3791a410cf226f7f005231be35dd8b9",
            "commit_message": "[sanitizer_common] Fix StripFunctionName() on Windows\n\nAlso implement StripFunctionName() on Windows to properly strip\ninterceptor prefixes.\n\nReported-by: https://lab.llvm.org/buildbot#builders/127/builds/48810\n",
            "commit_timestamp": 1685013547.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685035943.928274,
            "elapsed_time": 4611.545478582382,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6f026ff029853431ee535e6a361edd059da3ab27",
            "commit_message": "Discussion: Darwin Sanitizers Stable ABI\n\n# Darwin Sanitizers Stable ABI\n\nWe wish to make it possible to include the AddressSanitizer (ASan) runtime implementation in OSes and for this we need a stable ASan ABI. Based on previous discussions about this topic, our understanding is that freezing the present ABI would impose an excessive burden on other sanitizer developers and for unrelated platforms. Therefore, we propose adding a secondary stable ABI for our use and anyone else in the community seeking the same. We believe that we can define a stable ABI with minimal burden on the community, expecting only to keep existing tests running and implementing stubs when new features are added. We are okay with trading performance for stability with no impact for existing users of ASan while minimizing the maintenance burden for ASan maintainers. We wish to commit this functionality to the LLVM project to maintain it there. This new and stable ABI will abstract away the implementation details allowing new and novel approaches to ASan for developers, researchers and others.\n\n## Details\n\nRather than adding a lot of conditional code to the LLVM instrumentation phase, which would incur excessive complexity and maintenance cost of adding conditional code into all places that emit a runtime call, we propose a \u201cshim\u201d layer which will map the unstable ABI to the stable ABI:\n\n* A static library (.a library) shim that maps the existing ASan ABI to a generalized, smaller and stable ABI. The library would implement the __asan functions and call into the new ABI. For example:\n    * `void __asan_load1(uptr p) { __asan_abi_loadn(p, 1, true); }`\n    * `void __asan_load2(uptr p) { __asan_abi_loadn(p, 2, true); }`\n    * `void __asan_noabort_load16(uptr p) { __asan_abi_loadn(p, 16, false); }`\n    * `void __asan_poison_cxx_array_cookie(uptr p) { __asan_abi_pac(p); }`\n* This \u201cshim\u201d library would only be used by people who opt in: A compilation flag in the Clang driver will be used to gate the use of the stable ABI workflow.\n* Utilize the existing ability for the ASan instrumentation to prefer runtime calls instead of inlined direct shadow memory accesses.\n* Pursue (under the new driver flag) a better separation of abstraction and implementation with:\n    * LLVM instrumentation: Calling out for all poisoning, checking and unpoisoning.\n    * Runtime: Implementing the stable ABI and being responsible of implementation details of the shadow memory.\n\n## Maintenance\n\nOur aim is that the maintenance burden on the sanitizer developer community be negligible. Stable ABI tests will always pass for non-Darwin platforms. Changes to the existing ABI which would require a change to the shim have been infrequent as the ASan ABI is already relatively stable. Rarely, a change that impacts the contract between LLVM and the shim will occur. Among such foreseeable changes are: 1) changes to a function signature, 2) additions of new functions, or 3) deprecation of an existing function. Following are some examples of reasonable responses to those changes:\n\n* Example: An existing ABI function is changed to return the input parameter on success or NULL on failure. In this scenario, a reasonable change to the shim would be to modify the function signature appropriately and to simply guess at a common-sense implementation.\n    * `uptr __asan_load1(uptr p) { __asan_abi_loadn(p, 1, true); return p; }`\n* Example: An additional function is added for performance reasons. It has a very similar function signature to other similarly named functions and logically is an extension of that same pattern. In this case it would make sense to apply the same logic as the existing entry points:\n    * `void __asan_load128(uptr p) { __asan_abi_loadn(p, 128, true); }`\n* Example: An entry point is added to the existing ABI for which there is no obvious stable ABI implementation: In this case, doing nothing in a no-op stub would be acceptable, assuming existing features of ASan can still work without an actual implementation of this new function.\n    * `void __asan_prefetch(uptr p) { }`\n* Example: An entrypoint in the existing ABI is deprecated and/or deleted:\n    * (Delete the entrypoint from the shim.)\n\nWe\u2019re looking for buy-in for this level of support.\n\n(Note: Upon acceptance of the general concepts herein, we will add a controlling clang flag, cmake integration, contract for the stable ABI, and the appropriate test infrastructure.)\n\nReviewed By: eugenis, vitalybuka, MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D143675\n",
            "commit_timestamp": 1685030261.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685051566.796912,
            "elapsed_time": 5641.269615411758,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "91689744477843a588f701fdc598ccff3cbbc8fb",
            "commit_message": "Reapply: [clang][diagnostics] Adding -Wpacked-non-pod to -Wall\n\nUsers will be informed when non-POD is not packed using -Wall. This\nis also consistent with GCC.\n\nFixes PR#60832.\n\nDifferential Revision: https://reviews.llvm.org/D151162\n",
            "commit_timestamp": 1685044920.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685064809.232041,
            "elapsed_time": 4616.838412761688,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e86defd588e79de60d19a101a43b0c8c86dff37b",
            "commit_message": "[mlir][tosa] Add type checking traits to the appropriate ops\n\nAdd the trait `SameOperandsAndResultElementType` and\n`SameOperandsElementType` to verify ops that are known\nto have the same input and output type rather than generate\nan invalid tosa IR with mixed data types like:\n\n  \"tosa.add\"(%0, %1) : (tensor<nxbf16>, tensor<nxf32>) -> tensor<nxf32>\n\nThus apply tosa.cast prior if needed.\n\nChange-Id: Ie866b84e371e3b571ec04f7abb090c216dd39c33\n\nReviewed By: jpienaar\n\nDifferential Revision: https://reviews.llvm.org/D150472\n",
            "commit_timestamp": 1685058690.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685081139.712436,
            "elapsed_time": 6316.496200084686,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bb9a0c736b57f405c6fee598ce8043d0d35a5790",
            "commit_message": "Revert \"[MLIR] Add native Bytecode support for properties\"\n\nThis reverts commit ca5a12fd69d4acf70c08f797cbffd714dd548348\nand follow-up fixes:\n\ndf34c288c428eb4b867c8075def48b3d1727d60b\n07dc906883af660780cf6d0cc1044f7e74dab83e\nab80ad0095083fda062c23ac90df84c40b4332c8\n837d1ce0dc8eec5b17255291b3462e6296cb369b\n\nThe first commit was incomplete and broken, I'll prepare a new version\nlater, in the meantime pull this work out of tree.\n",
            "commit_timestamp": 1685073751.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685093595.283524,
            "elapsed_time": 4603.9289290905,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c80fe251d869d5304448cfa3bb855c653285de7f",
            "commit_message": "[ASAN] Support memory checks on vp.gather/scatter.\n\nThe patch supports vp.gather/scatter by allowing addresses being pointer vectors.\nAnd then we just need to check each active pointer element of those pointer vectors.\n\nReviewed By: reames\n\nDifferential Revision: https://reviews.llvm.org/D149245\n",
            "commit_timestamp": 1685086120.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685107729.334311,
            "elapsed_time": 4280.759508371353,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "00480189847e89e10f6333c28d65377906316c0f",
            "commit_message": "[mlir] Make sure mlir-opt is in the list of substituted tools\n\notherwise it gets picked up from $PATH, which is not always working\nproperly.\n",
            "commit_timestamp": 1685102434.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685136952.355767,
            "elapsed_time": 4715.218818187714,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "23da2106246edd445b5eae105cbefe0493f4fd1d",
            "commit_message": "[PseudoProbe] Do not force the calliste debug loc to inlined probes from __nodebug__ functions.\n\nFor pseudo probes we would like to keep their original dwarf discriminator (either a zero or null) until the first FS-discriminator pass. The inliner is a violation of that, given that it assigns inlinee instructions with no debug info with the that of the callsite. This is being disabled in this patch.\n\nReviewed By: wenlei\n\nDifferential Revision: https://reviews.llvm.org/D151568\n",
            "commit_timestamp": 1685131216.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685151399.6484,
            "elapsed_time": 4668.837718963623,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0508ac32cfcc1a9fc5a81d16de8d418dc5a0666b",
            "commit_message": "[Vectorize] Fix a warning\n\nThis patch fixes:\n\n  llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp:1429:23:\n  error: comparison of integers of different signs: 'int' and 'const\n  size_t' (aka 'const unsigned long') [-Werror,-Wsign-compare]\n",
            "commit_timestamp": 1685145754.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685165958.637722,
            "elapsed_time": 4927.626342058182,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "273303ad66a32e5e599bef5ee18c3a9f589e530d",
            "commit_message": "[Sema] Remove unused declaration startLambdaDefinition\n\nThe corresponding function definition was removed by:\n\n  commit 93d7002dc4644b0a6f15a998dff0d55c72012e87\n  Author: Corentin Jabot <corentinjabot@gmail.com>\n  Date:   Sun Feb 6 22:58:43 2022 +0100\n",
            "commit_timestamp": 1685157563.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685179891.819798,
            "elapsed_time": 4629.475900650024,
            "x64": true,
            "actual_files_count": 1665,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fe01c084249969518bcd69aa2fedffc9f017f43a",
            "commit_message": "[mlir][bazel] Port for 660f714e26999d266232a1fbb02712bb879bd34e, second\nattempt.\n",
            "commit_timestamp": 1685169465.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685195384.169872,
            "elapsed_time": 5512.546324968338,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "48985f58b41a74d012bc08ba3e2c14a3eb171314",
            "commit_message": "[libc++][format][test] Adds Windows support.\n\nThese tests pass on Windows without additional changes. This has been\ntested in D150593.\n",
            "commit_timestamp": 1685188646.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685209002.740974,
            "elapsed_time": 4748.9169590473175,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1845d9de187b726dfe074218377c3d77ce43277a",
            "commit_message": "[CGP] Disable default copy ctor and copy assignment operator for InstructionRemover\n\nclass InstructionRemover manages resources such as dynamically allocated memory, it's generally a good practice to either implement a custom copy constructor or disable the default one.\n\nReviewed By: pengfei\n\nDifferential Revision: https://reviews.llvm.org/D151543\n",
            "commit_timestamp": 1685200833.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685224476.734805,
            "elapsed_time": 5881.673288106918,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cf44847b4d1edb43de7ee917ddccf7fa397c63cb",
            "commit_message": "[mlir][gpu][sparse] adding cusparse sddmm support\n\nDifferential Revision: https://reviews.llvm.org/D151279\n",
            "commit_timestamp": 1685217701.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685233012.067647,
            "elapsed_time": 4522.00386929512,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bdc2771911cb181fe0144800000b4c19d94ff52e",
            "commit_message": "[StaticAnalyzer] Remove unused declaration handleLVectorSplat\n\nThe corresponding function definition was removed by:\n\n  commit 55662b24a4755680e4fd34dc22a3dd555fdb1291\n  Author: Balazs Benics <balazs.benics@sigmatechnology.se>\n  Date:   Thu Jul 1 10:54:28 2021 +0200\n",
            "commit_timestamp": 1685224434.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685247362.556475,
            "elapsed_time": 4896.871234416962,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bdc2771911cb181fe0144800000b4c19d94ff52e",
            "commit_message": "[StaticAnalyzer] Remove unused declaration handleLVectorSplat\n\nThe corresponding function definition was removed by:\n\n  commit 55662b24a4755680e4fd34dc22a3dd555fdb1291\n  Author: Balazs Benics <balazs.benics@sigmatechnology.se>\n  Date:   Thu Jul 1 10:54:28 2021 +0200\n",
            "commit_timestamp": 1685224434.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685261705.25882,
            "elapsed_time": 4546.777031421661,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "65f40cb455f8eaf83c163793d19640b56393c1e5",
            "commit_message": "[ModuleInliner] Remove an inapplicable comment\n\nThe module inliner has its own logic in deciding the order in which\ncall sites are inlined, so the comment is inapplicable.\n",
            "commit_timestamp": 1685251597.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685276390.855926,
            "elapsed_time": 5417.11806845665,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f8536fb11e3d71d009c9002b5aa2ef32983ac7dc",
            "commit_message": "[clang][HeaderSearch] Fix implicit module when using header maps\n\nPreviously, if a header was found via in a header map, and not just remapped.\nwe wouldn't also find the module it maps to when using implicit modules (for\nmodule maps that were explicitly loaded).\n\nThis diff just updates these code paths to also locate the owning module via\n`findUsableModuleForHeader`.\n\nReviewed By: benlangmuir\n\nDifferential Revision: https://reviews.llvm.org/D103930\n",
            "commit_timestamp": 1685270991.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685290656.244879,
            "elapsed_time": 4763.871718883514,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8a4e3675d88ecd0413d89dea1e3578a4696b05da",
            "commit_message": "[Hexagon] Explicitly make vector subregs have unknown size and offset\n\nVector length depends on the HVX mode, so make the size and offset unknown\ninstead using values for some specific mode.\n",
            "commit_timestamp": 1685287963.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685305037.627622,
            "elapsed_time": 4605.88134765625,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fb250b8295b9f65590017c5b13d6de0b4f4617c1",
            "commit_message": "[clang][c++20][NFC] `ComparisonCategoryType` - updated comment, removed `std:*_equality`\n\n`weak_equality` and `strong_equality` are removed from the standard:\n- https://wg21.link/P1959R0\n- https://eel.is/c++draft/cmp.categories.pre\n\nReviewed By: rsmith\n\nDifferential Revision: https://reviews.llvm.org/D151627\n",
            "commit_timestamp": 1685301916.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685319401.256471,
            "elapsed_time": 4595.53854227066,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "53be2e0f59730671eac24c9e9ce615d20250d917",
            "commit_message": "[MLIR] NFC. JitRunner - use range-based for\n\nAddress clang-tidy warning in JitRunner.cpp. Use range-based for.\n",
            "commit_timestamp": 1685305490.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685333950.358057,
            "elapsed_time": 5953.094482898712,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b6a5aeadb5588dedc09eacc3b98b0278d6d53529",
            "commit_message": "[NFC][CLANG] Fix issue with dereference null return value in EvaluateBuiltinClassifyType()\n\nThis patch uses cast instead of dyn_cast which will assert if the type doesn't match.\n\nReviewed By: erichkeane\n\nDifferential Revision: https://reviews.llvm.org/D151469\n",
            "commit_timestamp": 1685329749.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685348190.633635,
            "elapsed_time": 4590.754618644714,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e20931b2ccd10de2fd25d9a6fbe9c166e7430f23",
            "commit_message": "[clang] Restrict Inline Builtin to non-static, non-odr linkage\n\nInline builtins have a very special behavior compared to other\nfunctions, it's better if we keep them restricted to a minimal set of\nfunctions.\n\nAdd a linkage check which prevents considering ODR definitions as inline\nbuiltins.\n\nFix #62958\n\nDifferential Revision: https://reviews.llvm.org/D148723\n",
            "commit_timestamp": 1685347338.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685362571.909074,
            "elapsed_time": 4745.620724439621,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "061e368fe213bd0701261a3e59f796c7439484fc",
            "commit_message": "[SelectionDAG] Implement soft FP legalisation for bf16 FP_EXTEND and BF16_TO_FP\n\nAs discussed in D151436, it's safe to do this as a simple shift (as is\ndone in LegalizeDAG.cpp) rather than needing a libcall. The added test\ncases for RISC-V previously just triggered an assertion.\n\nCodegen for bfloat_to_double will be slightly improved by D151434.\n\nDifferential Revision: https://reviews.llvm.org/D151563\n",
            "commit_timestamp": 1685352748.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685376737.502253,
            "elapsed_time": 3328.4386444091797,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a3a8cbffcf00bdbf19a15a070313b60c0a9ce342",
            "commit_message": "[AMDGPU][AsmParser][NFC] Refine parsing of NamedOperandU32 operands.\n\nEliminates the need for the custom code in parseCustomOperand().\n\nPart of <https://github.com/llvm/llvm-project/issues/62629>.\n\nReviewed By: dp\n\nDifferential Revision: https://reviews.llvm.org/D150980\n",
            "commit_timestamp": 1685376104.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685391438.488309,
            "elapsed_time": 4556.994585752487,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "40af06ccc7bf9989b8deb410ed78a4795c22aa73",
            "commit_message": "[clang-tidy] Update UnusedReturnValueCheck types\n\nUpdate the types for UnusedReturnValueCheck after D151383.\n\n1. Add std::errc, std:error_condition\n2. Remove `absl::Status` - it's marked as `[[nodiscard]]` anyway so it's redundant (and might create double warnings) to check it.\n\nReviewed By: PiotrZSL\n\nDifferential Revision: https://reviews.llvm.org/D151650\n",
            "commit_timestamp": 1685390552.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685406021.953417,
            "elapsed_time": 5735.7667191028595,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b936816fb305cc16d2d1cd6d424c08c39a681a32",
            "commit_message": "MLIR/Cuda: Add the appropriate \"HINTS\" on CMake find_library and mark these REQUIRED\n\nThe cmake logic to find cuda paths exposes some paths to search for the cuda\nlibrary, we need to propagate this through the call for find_library.\nThis was already done for cuSparse but not for cuda.\n\nDifferential Revision: https://reviews.llvm.org/D151645\n",
            "commit_timestamp": 1685395944.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685420073.265778,
            "elapsed_time": 4351.925969362259,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8f386ff69ab8e012c1716ae05e70fd5288435835",
            "commit_message": "[ms-inline asm] Add error check for `getAsInteger`\n\n.Imm can get lexed as a real, but a real doesn't equal to .Imm, e.g.,\n2.5 or .123e+8. We should report error for it rather than silently ignore.\n\nReviewed By: skan\n\nDifferential Revision: https://reviews.llvm.org/D151652\n",
            "commit_timestamp": 1685416857.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685434563.722161,
            "elapsed_time": 4685.979875087738,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c7592c7714c2796715e6460fc5fd19e5a930c427",
            "commit_message": "[mlir][scf] NFC - Add debug information to scf pipelining\n",
            "commit_timestamp": 1685433771.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685449104.706987,
            "elapsed_time": 4691.464245080948,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "48339d0fbbdb2ba4610173ad1e792e9c2272c887",
            "commit_message": "[CodeGen] Add pre-commit tests for D148558\n\nThis patch adds four new tests for upcoming functionality in LLVM:\n* complex-deinterleaving-add-mull-fixed-contract.ll\n* complex-deinterleaving-add-mull-scalable-contract.ll\n* complex-deinterleaving-add-mull-fixed-fast.ll\n* complex-deinterleaving-add-mull-scalable-fast.ll.\n\nThese tests were generated from the IR of vectorizable loops, which were\ncompiled from C++ code using different optimization flags in Clang. Each pair\nof tests corresponds to Neon and SVE architectures, respectively, and\neach pair contains tests compiled with -Ofast and -O3 -ffp-contract=fast\n-ffinite-math-only optimization flags.\nThe tests were stripped of nnan and ninf flags as they have no impact on the\noutput.\nThe primary objective of these tests is to show the various sequences of\ncomplex computations that may be encountered and to demonstrate the ability\nof ComplexDeinterleaving to support any ordering.\n\nDepends on D147451\n\nDifferential Revision: https://reviews.llvm.org/D148550\n",
            "commit_timestamp": 1685447399.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685463603.346701,
            "elapsed_time": 6479.250331163406,
            "x64": true,
            "actual_files_count": 1667,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7cdb875d4dcd5bb65708521dc121e3c969c561b9",
            "commit_message": "[mlir] silence msvc warning\n",
            "commit_timestamp": 1685462359.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685477907.417637,
            "elapsed_time": 4978.376668691635,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d81ce04587c006b6731198956c522c93d0df1050",
            "commit_message": "[Driver] Report error for unsupported -mlarge-endian/-mlittle-endian\n",
            "commit_timestamp": 1685475921.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685492346.018709,
            "elapsed_time": 4682.1873297691345,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "aaa33b6a98de2be7cdc827b13e60c103206d6461",
            "commit_message": "Fix assert \"DeclRefExpr for Decl not entered in LocalDeclMap?\"\n\nCurrently compiler assert when passing variable \"memspace\" in\nomp_init_allocator.\n\nomp_allocator_handle_t alloc=omp_init_allocator(memspace,1,traits)\n\nThe problem is memspace is not mapping to the target region.  During\nthe call to emitAllocatorInit, calls to EmitVarDecl for \"alloc\", then\nemit initialization of \"alloc\" that cause to assert.\n\nIf I understant correct, it is not necessary to emit variable\ninitialization, since \"allocator\" is private to target region.\n\nTo fix this call CGF.EmitAutoVarAlloca(allocator) instead\nCGF.EmitVarDecl(allocator).\n\nDifferential Revision: https://reviews.llvm.org/D151743\n",
            "commit_timestamp": 1685490006.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685506512.163422,
            "elapsed_time": 4526.102992534637,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0442d08fdb173d89b0779d32eb929957a344f5e6",
            "commit_message": "[clang][Sema] Improve diagnostics for auto return type\n\nCurrently when clang fails to deduce auto return type of a function,\nit does not emit any notes about why it fails. This causes difficulty\nfor users to fix such errors.\n\nActually, clang already generates the information for emitting notes\nabout the failed deduction. There is a TODO for actually emitting\nthem.\n\nThis patch tries to implement the TODO. Basically it passes the\nfailed template specialization candidate set from the point of\nspecialization failure back to the point where the deduction starts.\n\nIt is not comprehensive but would be a start for further improvement.\n\nReviewed by: Richard Smith, Matheus Izvekov\n\nDifferential Revision: https://reviews.llvm.org/D150212\n\nFixes: SWDEV-354278\n",
            "commit_timestamp": 1685504159.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685520866.22536,
            "elapsed_time": 4699.46359205246,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bb6c036ef378de321d5b7fc0ada317f91c88570d",
            "commit_message": "[clang][Diagnostics][NFC] Use getFileID() directly\n\nInstead of calling getDecomposedLoc() and then only using the FileID.\n",
            "commit_timestamp": 1685519836.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685535403.401662,
            "elapsed_time": 4709.391610622406,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "981766a3d6cf043b0fa7efc69d227287f7a909aa",
            "commit_message": "[mlir][bazel] Disable Transform/test-repro-dump.mlir test in bazel build.\n",
            "commit_timestamp": 1685533848.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685549847.773432,
            "elapsed_time": 4712.781037330627,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a88f496f8f3baa6c3b15532e37e3bdbb1c4ea0d0",
            "commit_message": "[Sema] Remove unused function getFloat128Identifier\n\nThe last use was removed by:\n\n  commit bb1ea2d6139a72340b426e114510c46d938645a6\n  Author: Nemanja Ivanovic <nemanja.i.ibm@gmail.com>\n  Date:   Mon May 9 08:52:33 2016 +0000\n\nDifferential Revision: https://reviews.llvm.org/D151608\n",
            "commit_timestamp": 1685548775.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685564389.178147,
            "elapsed_time": 5586.922463417053,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5a0d53ce41486225fd8be6b1d13f338d19c29f62",
            "commit_message": "[Tooling] Remove unused function setRestoreWorkingDir\n\nThe last use was removed by:\n\n  commit 146ec74a8382dc820809d0a2bf4b918d0b5e6603\n  Author: Jan Svoboda <jan_svoboda@apple.com>\n  Date:   Fri Sep 10 10:24:16 2021 +0200\n\nOnce I remove the function, RestoreCWD is always true, so this patch\nremoves the variable and propagates the constant.\n\nDifferential Revision: https://reviews.llvm.org/D151786\n",
            "commit_timestamp": 1685562217.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685592772.674521,
            "elapsed_time": 3396.984817504883,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ff471dcf7669b1ad7903a44d0773bef4eb175eb9",
            "commit_message": "[SCEV] Fix verification of SCEV multiples.\n",
            "commit_timestamp": 1685592022.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685607458.579249,
            "elapsed_time": 4954.338002443314,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4f0436dd1532d7534d77e6fc211a7a50bbdd0c49",
            "commit_message": "[clang][analyzer] Merge apiModeling.StdCLibraryFunctions and StdCLibraryFunctionArgs checkers into one.\n\nMain reason for this change is that these checkers were implemented in the same class\nbut had different dependency ordering. (NonNullParamChecker should run before StdCLibraryFunctionArgs\nto get more special warning about null arguments, but the apiModeling.StdCLibraryFunctions was a modeling\nchecker that should run before other non-modeling checkers. The modeling checker changes state in a way\nthat makes it impossible to detect a null argument by NonNullParamChecker.)\nTo make it more simple, the modeling part is removed as separate checker and can be only used if\nchecker StdCLibraryFunctions is turned on, that produces the warnings too. Modeling the functions\nwithout bug detection (for invalid argument) is not possible. The modeling of standard functions\ndoes not happen by default from this change on.\n\nReviewed By: Szelethus\n\nDifferential Revision: https://reviews.llvm.org/D151225\n",
            "commit_timestamp": 1685606075.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685621858.931423,
            "elapsed_time": 4910.697793722153,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a26bd95325f120d9737a0b03c80eabddb56f46db",
            "commit_message": "[LinkerWrapper] Fix static library symbol resolution\n\nThe linker wrapper performs its own very basic symbol resolution for the\npurpose of supporting standard static library semantics. We do this here\nbecause the Nvidia `nvlink` wrapper does not support static linking and\nwe have some offloading specific extensions.\n\nCurrently, we always place symbols in the \"table\" even if they aren't\nextracted. This caused the logic to fail when many files were used that\nreferenced the same undefined variable. This patch changes the pass to\nonly add the symbols to the global \"table\" if the file is actually\nextracted.\n\nReviewed By: tra\n\nDifferential Revision: https://reviews.llvm.org/D151839\n",
            "commit_timestamp": 1685620311.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685650679.335121,
            "elapsed_time": 4823.740854740143,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c20a9bb001855da5d14721ce2894e3be77a999fe",
            "commit_message": "Allow configuring InlinerThreshold in C bindings for the new pass manager\n\nC bindings for the new pass manager seem to allow to set any option from LLVMPassBuilderOptions, except InlinerThreshold. Allow to configure it as well.\n\nReviewed By: aeubanks\n\nDifferential Revision: https://reviews.llvm.org/D151832\n",
            "commit_timestamp": 1685649635.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685722484.998794,
            "elapsed_time": 4693.178010225296,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5c2072e74b42d55e8bf7a9c8fee8800bad591f12",
            "commit_message": "[clang-tidy] Fix docs.\n",
            "commit_timestamp": 1685719915.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685737190.8817,
            "elapsed_time": 4808.725058555603,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "18ccca4da8dec5fbfd1072a1c1544ce25f528627",
            "commit_message": "[UBSan] Consider zero input to __builtin_clz/ctz to be undefined independent of the target.\n\nPreviously we checked isCLZForZeroUndef and only added UBSan checks\nif it returned true.\n\nThe builtin should be considered undefined for 0 regardless of\nthe target so that code using it is portable. The isCLZForZeroUndef\nwas only intended to disable optimizations in the middle end and\nbackend.\n\nSee https://discourse.llvm.org/t/should-ubsan-detect-0-input-to-builtin-clz-ctz-regardless-of-target/71060\n\nReviewed By: nikic\n\nDifferential Revision: https://reviews.llvm.org/D152023\n",
            "commit_timestamp": 1685736065.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685751496.408202,
            "elapsed_time": 4718.239347219467,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0a168131b4f420d9f561926c643c143c84c97535",
            "commit_message": "[scudo] Add 'inline' to static secondary.h function\n\nThis patches an error flaged by Fuchsia builds e.g.\nhttps://ci.chromium.org/ui/p/turquoise/builders/global.try/core.x64-asan/b8779376650819379137/overview)\n\n```\nbuild failed:\n\n[87176/332302](525) CXX user.libc_x64-asan-ubsan/obj/zircon/system/ulib/c/scudo/gwp-asan-info.gwp_asan_info.cc.o\nFAILED: user.libc_x64-asan-ubsan/obj/zircon/system/ulib/c/scudo/gwp-asan-info.gwp_asan_info.cc.o\n../../prebuilt/third_party/python3/linux-x64/bin/python3.8 -S ../../build/rbe/cxx_remote_wrapper.py --exec_strategy=remote_local_fallback --  ../../prebuilt/third_party/clang/linux-x64/bin/clang++ -MD -MF user.libc_x64-asan-ubsan/obj/zircon/system/ulib/c/scudo/gwp-asan-info.gwp_asan_info.cc.o.d -o user.libc_x64-asan-ubsan/obj/zircon/system/ulib/c/scudo/gwp-asan-info.gwp_asan_info.cc.o -D_LIBCPP...\nIn file included from ../../zircon/system/ulib/c/scudo/gwp_asan_info.cc:7:\nIn file included from ../../third_party/scudo/src/allocator_config.h:12:\nIn file included from ../../third_party/scudo/src/combined.h:22:\n../../third_party/scudo/src/secondary.h:67:13: error: 'static' function 'unmap' declared in header file should be declared 'static inline' [-Werror,-Wunneeded-internal-declaration]\nstatic void unmap(LargeBlock::Header *H) {\n            ^\n1 error generated.\n```\n\nDifferential Revision: https://reviews.llvm.org/D152038\n",
            "commit_timestamp": 1685749647.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685765768.179946,
            "elapsed_time": 4537.205727338791,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "84ee08c6a89a96c29e7be7e62f91f4bcdcde48ae",
            "commit_message": "[RISCV] Avoid illegal DAG combination for strict-fp nodes.\n\nThose combines may change the exception behavior and rounding behavior.\n\nReviewed By: craig.topper\n\nDifferential Revision: https://reviews.llvm.org/D151992\n",
            "commit_timestamp": 1685759370.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685794307.065448,
            "elapsed_time": 3422.137099981308,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0beffb854209a41f31beb18f9631258349a99299",
            "commit_message": "[CMake] Ensure `CLANG_RESOURCE_DIR` is respected.\n\nre-commit of 39aa0f5c434b463520ac39a8dbe933ee8c4c5ea7 with missing file:\ncmake/Modules/GetClangResourceDir.cmake.\n",
            "commit_timestamp": 1685791295.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685809033.393142,
            "elapsed_time": 5792.0157170295715,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "684f3c968d6bbf124014128b9f5e4f03a50f28c5",
            "commit_message": "[Clang] Fix status of P0960\n\nP0960R3 and P1975R0 were marked not implemented because\nof #61145,\n\nThis issue has been fixed and backported to LLVM 16,\nthe status page should reflect that.\n\nReviewed By: #clang-language-wg, ayzhao, erichkeane\n\nDifferential Revision: https://reviews.llvm.org/D150122\n",
            "commit_timestamp": 1685804622.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685823303.569216,
            "elapsed_time": 4907.474210262299,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4b9764959dc4b8783e18747c1742ab164e4bc4ee",
            "commit_message": "[clang-format] Fix overlapping replacements before PPDirectives\n\nIf the first token of an annotated line is finalized, reuse its\nNewlinesBefore value to avoid potential overlapping whitespace\nreplacements before preprocessor branching directives.\n\nFixes #62892.\n\nDifferential Revision: https://reviews.llvm.org/D151954\n",
            "commit_timestamp": 1685820783.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685837670.181027,
            "elapsed_time": 4673.910643577576,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ea8f4b98419750c8cc7c60ea43b570adf47b3f78",
            "commit_message": "[libc][CMake] Place archives in build/lib/<target-triple>\n\nThis patch moves the location of libllvmlibc.a within the build tree to\nwithin ./lib/<target triple>. This more closely matches the behavior of\nother runtime builds and allows for clang in the same build tree to\nautomatically be able to link against llvmlibc since this path is by\ndefault included by the driver.\n\nAlso removes the LIBC_BINARY_DIR CMake flag since it isn't used anywhere\nin the tree (based on a quick grep).\n\nReviewed By: phosek\n\nDifferential Revision: https://reviews.llvm.org/D151624\n",
            "commit_timestamp": 1685832003.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685852112.979246,
            "elapsed_time": 4631.908277273178,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ff75a2be34fd76350216c36b7ea4c3f338df6215",
            "commit_message": "[AVR] Fix incorrect operands of pseudo instruction 'ROLBRd'\n\nFixes https://github.com/llvm/llvm-project/issues/63098\n\nReviewed by: benshi001\n\nDifferential Revision: https://reviews.llvm.org/D152063\n",
            "commit_timestamp": 1685848137.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685866573.351386,
            "elapsed_time": 4750.886167049408,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fbdcd54442ef9435d753ae974d33992f99d85ad8",
            "commit_message": "[GlobalISel] Fix DIVREM combine from inserting a divrem before its operands' defs.\n\nIn some rare corner cases where in between the div/rem pair there's a def of\nthe second instruction's source (but a different vreg due to the combine's\neqivalence checks), it will place the DIVREM at the first instruction's point,\ncausing a use-before-def. There wasn't an obvious fix that stood out to me\nwithout doing more involved analysis than a combine should really be doing.\n\nFixes issue #60516\n\nI'm open to new suggestions on how to approach this, as I'm not too happy\nat bailing out here. It's not the first time we run into issues with value liveness\nthat the DAG world isn't affected by.\n\nDifferential Revision: https://reviews.llvm.org/D144336\n",
            "commit_timestamp": 1685863478.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685881131.689841,
            "elapsed_time": 6182.352350473404,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3a458256ee22a0e7c31529de42fa6caa263d88fe",
            "commit_message": "[gn build] Port 66e5678fece3\n",
            "commit_timestamp": 1685878605.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685895601.863855,
            "elapsed_time": 5859.253249406815,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0702d4e04df906cf011950b2aa8ba08bc63d463e",
            "commit_message": "[GlobalIsel][X86] Move G_ICMP legalization before legacy handling and merge 32-bit/64-bit handling\n\nI've kept the legalForCartesianProduct call, but this requires us to maintain 32-bit/64-bit integer lists - we might want to just use legalIf and perform the type pair set matching manually.\n",
            "commit_timestamp": 1685894517.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685909747.047491,
            "elapsed_time": 3766.5247972011566,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "9d531c2dcfa791301f39848a13f199f22d1471dd",
            "commit_message": "[bazel] Port 36f351098cd5\n",
            "commit_timestamp": 1685907592.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685924266.698108,
            "elapsed_time": 4679.373460054398,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1f8a33c19c79fd4649a07eb70ea394c60a8ce316",
            "commit_message": "[mlir][bytecodegen] Add list helper methods.\n\nPreviously the SignedVarInt was incorrectly defined. Follow up work\nneeded for improving Array printing/parsing, but correcting the\ndefinitions for now.\n",
            "commit_timestamp": 1685919157.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685938770.180399,
            "elapsed_time": 5932.58207988739,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "29663e2b8c4edcd850a4245b1f9509f974220906",
            "commit_message": "[clang][CodeGen] Account for VTT address space\n\nCorrectly account for the fact that certain targets do not use the generic address space for the implicit VTT argument. This entails adjusting `ItaniumCXXABI::buildStructorSignature`, `ItaniumCXXABI::addImplicitStructorParams` and `ItaniumCXXABI::getImplicitConstructorArgs` to use the target's global variable address space. The associated test is temporarily marked `XFAIL` as additional fixes are needed.\n\nReviewed By: rjmccall\n\nDifferential Revision: https://reviews.llvm.org/D150746\n",
            "commit_timestamp": 1685930785.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685953217.018542,
            "elapsed_time": 6228.792032718658,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "225cf64e03b4e394c32e95fe1d6414e6e16be094",
            "commit_message": "fix failures caused by https://reviews.llvm.org/D148490\n\nbuildbot: https://lab.llvm.org/buildbot/#/builders/214/builds/7823\n",
            "commit_timestamp": 1685952026.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1685967673.403861,
            "elapsed_time": 6146.401790380478,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fc4a8bf7da7d3837d371fda24d3f2c0f9ef54a5b",
            "commit_message": "[clang-tidy] Move the misc system header dir to Inputs subdir, NFC.\n\nFollows the existing patterns, and makes life easier for bazel build\nsystem.\n",
            "commit_timestamp": 1685966221.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1685981866.842973,
            "elapsed_time": 4659.663987636566,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4cb5e436ae713579cfee00cfc8e516cf965b91e9",
            "commit_message": "[clangd] Show size, offset and padding for bit fields on hover\n\nExamle:\n```\nstruct test {\n\tchar a;\n\tchar b : 3;\n\tchar c : 5;\n\tint d;\n\tint e : 27;\n};\n```\n\n{F27617774}\n{F27617776}\n{F27617777}\n{F27617780}\n\nReviewed By: sammccall\n\nDifferential Revision: https://reviews.llvm.org/D151128\n",
            "commit_timestamp": 1685980354.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1685996459.270467,
            "elapsed_time": 6097.16751241684,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "db98ac082744880a6e352b2d4a97d8896d9a7694",
            "commit_message": "[Demangle] convert microsoftDemangle to take a std::string_view\n\nThis should be last of the \"bottom-up conversions\" of various demanglers\nto accept std::string_view.  After this, D149104 may be revisited.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D152176\n",
            "commit_timestamp": 1685995220.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686010698.809303,
            "elapsed_time": 4574.208325386047,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d3777f20c59373a0075d0d9de3bfdc1429888879",
            "commit_message": "test/AMDGPU: REQUIRES asserts (D148184)\n",
            "commit_timestamp": 1686009346.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686024905.991892,
            "elapsed_time": 4643.764991283417,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "116670d192c619e2233e092e210c920d004dbe33",
            "commit_message": "[InstCombine] add overflow checking on Add ~X + C --> (C-1) - X\nDifferential Revision: https://reviews.llvm.org/D152088\n",
            "commit_timestamp": 1686021885.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686039343.967205,
            "elapsed_time": 5021.1848974227905,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "10e7899818803029d2f91a20c67f5a1d75781b8a",
            "commit_message": "[FPEnv] Get rid of extra moves in fpenv calls\n\nIf intrinsic `get_fpenv` or `set_fpenv` is lowered to the form where FP\nenvironment is represented as a region in memory, extra moves can\nappear. For example the code:\n\n  define void @func_01(ptr %ptr) {\n    %env = call i256 @llvm.get.fpenv.i256()\n    store i256 %env, ptr %ptr\n    ret void\n  }\n\nproduces DAG:\n\n  ch = get_fpenv_mem ch, memory_region\n  val: i256, ch = load ch, memory_region\n  ch = store ch, ptr, val\n\nIn this case the extra moves can be avoided if `get_fpenv_mem` got\npointer to the memory where the FP environment should be finally placed.\n\nThis change implement such optimization for this use case.\n\nDifferential Revision: https://reviews.llvm.org/D150437\n",
            "commit_timestamp": 1686038092.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686054047.199489,
            "elapsed_time": 6666.311804771423,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6d5a653dda628250b373ec89e0e11cdd27603c24",
            "commit_message": "[AMDGPU] New PAL metadata updates to ps_extra_lds_size and float_mode\n\nNew metadata format contains full calculation of field contents for\nps_extra_lds_size (vs old format where the value in RSRC register is used by PAL\nto calculate the value required).\n\nAlso stop updating float_mode and rely on front end settings for this field.\n\nDifferential Revision: https://reviews.llvm.org/D152247\n",
            "commit_timestamp": 1686050301.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686068345.930998,
            "elapsed_time": 5964.756800889969,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "540294845babbb2be909ea456323d7bc8a1763df",
            "commit_message": "[Clang] Reject increment of bool value in unevaluated contexts after C++17\n\nClang now incorrectly allowed increment of bool in unevaluated contexts, we set `diagnostic::ext_increment_bool` to be SFINAEFailure to fix this issue.\n\n```\ntemplate<class T> auto f(T t) -> decltype(++t);\nauto f(...) -> void;\nvoid g() {\n  f(true);  // Clang wrongly makes this a hard error\n}\n```\n\n```\ntemplate <class T>\nconcept can_increment = requires(T t) { ++t; };\n\ntemplate <class T> void f() {\n  static_assert(requires(T t) { ++t; }); // Incorrectly allowed\n}\n\nint main() {\n  f<bool>();\n\n  static_assert(!can_increment<bool>); // Incorrectly fails\n\n  bool b = false;\n  ++b; // Correctly rejected\n}\n```\nFix issue: https://github.com/llvm/llvm-project/issues/47517\n\nReviewed By: erichkeane\n\nDifferential Revision: https://reviews.llvm.org/D152259\n",
            "commit_timestamp": 1686067117.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686082603.071847,
            "elapsed_time": 5444.456151008606,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7cd1d4231a7c83e719b83c6abbe2d479baa03808",
            "commit_message": "[lldb] Remove __FUNCTION__ from log messages in lldbHost (NFC)\n\nLLDB's logging infrastructure supports prepending log messages with the\nname of the file and function that generates the log (see help log\nenable). Therefore it's unnecessary to include the current __FUNCTION__\nin the log message itself. This patch removes __FUNCTION__ from log\nmessages in the Host library.\n\nDifferential revision: https://reviews.llvm.org/D151762\n",
            "commit_timestamp": 1686081763.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686097069.92603,
            "elapsed_time": 5481.5487496852875,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7056ad7e97347f6af65c1e4ccaffcc8dfd5ba1d2",
            "commit_message": "[gn build] Port 1117b9a284aa\n",
            "commit_timestamp": 1686095994.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686111391.655221,
            "elapsed_time": 5076.951601982117,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c6a69446e152975c66594061ee542ca8e4e98b6f",
            "commit_message": "[M68k,MSP430,VE,Xtensa] Migrate to new encodeInstruction that uses SmallVectorImpl<char>. NFC\n",
            "commit_timestamp": 1686110572.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686125906.788304,
            "elapsed_time": 5676.438613176346,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d19a3834dce5f9e8c84835ea14e8b434e8aa5fa7",
            "commit_message": "[NFC][RFC][TableGen] Split GlobalISelEmitter.cpp\n\nThis patch splits the GlobalISelEmitter.cpp file, which imports DAG ISel patterns for GISel, into separate \"GISelMatchTable.h/cpp\" files.\n\nThe main motive is readability & maintainability. GlobalISelEmitter.cpp was about 6400 lines of mixed code, some bits implementing the match table codegen, some others dedicated to importing DAG patterns.\n\nNow it's down to  2700 + a 2150 header + 2000 impl.\nIt's a tiny bit more lines overall but that's to be expected - moving\ninline definitions to out-of-line, adding comments in the .cpp, etc. all of that takes additional space, but I think the tradeoff is worth it.\n\nI did as little unrelated code changes as possible, I would say the biggest change is the introduction of the `gi` namespace used to prevent name conflicts/ODR violations with type common names such as `Matcher`.\nIt was previously not an issue because all of the code was in an anonymous namespace.\n\nThis moves all of the \"match table\" code out of the file, so predicates,\nrules, and actions are all separated now. I believe this helps separating concerns, now `GlobalISelEmitter.cpp` is more focused on importing DAG patterns into GI, instead of also containing the whole match table internals as well.\n\nNote: the new files have a \"GISel\" prefix to make them distinct from the other \"GI\" files in the same folder, which are for the combiner.\n\nReviewed By: aemerson\n\nDifferential Revision: https://reviews.llvm.org/D151432\n",
            "commit_timestamp": 1686123297.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686140212.40274,
            "elapsed_time": 5428.234884023666,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cda46cc4f921f6b288c57a68b901ec2f57134606",
            "commit_message": "[Clang][OpenMP][IRBuilder] Move registerTargetGlobalVariable & getAddrOfDeclareTargetVar into the OMPIRBuilder\n\nThis change tries to move registerTargetglobalVariable and\ngetAddrOfDeclareTargetVar out of Clang's CGOpenMPRuntime\nand into the OMPIRBuilder for shared use with MLIR's OpenMPDialect\nand Flang (or other languages that may want to utilise it).\n\nThis primarily does this by trying to hoist the Clang specific\ntypes into arguments or callback functions in the form of\nlambdas, replacing it with LLVM equivelants and\nutilising shared OMPIRBuilder enumerators for\nthe clauses, rather than Clang's own variation.\n\nReviewers: jsjodin, jdoerfert\n\nDifferential Revision: https://reviews.llvm.org/D149162\n",
            "commit_timestamp": 1686139345.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686154658.788628,
            "elapsed_time": 5335.938840866089,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7fdf2b282d175b55bc36913366ea2b8f98229d00",
            "commit_message": "[gn] port 66a562d22e7 more (libc++ _LIBCPP_HAS_NO_FILESYSTEM)\n",
            "commit_timestamp": 1686153642.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686169190.866537,
            "elapsed_time": 5472.598975896835,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5aea839ab3edeb58bb0eea833ad9427d0ae7ef67",
            "commit_message": "[AMDGPU] Switch to backwards scavenging in eliminateFrameIndex\n\nFrame index elimination runs backwards so we must use backwards\nscavenging. Otherwise, when a scavenged register is spilled, the\nscavenger will remember that the register is in use until the restore\npoint, but it will never reach that restore point. The result is that in\nsome cases it will keep scavenging different registers instead of\nreusing the same one.\n\nDifferential Revision: https://reviews.llvm.org/D152394\n",
            "commit_timestamp": 1686167945.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686183462.369621,
            "elapsed_time": 5397.227828025818,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b7f5f48973898d997e18b06974aec88acddc4ba7",
            "commit_message": "[RISCV] Use Selection::getElementCount to simplify code. NFC\n",
            "commit_timestamp": 1686182521.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686197792.996593,
            "elapsed_time": 4976.8885662555695,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "46aba711ab8311b427cac8ad8235642d86c7f7d6",
            "commit_message": "[InstCombine] (icmp eq A, -1) & (icmp eq B, -1) --> (icmp eq (A&B), -1)\n\nThis patch add another icmp fold for -1 case.\n\nThis fixes https://github.com/llvm/llvm-project/issues/62311,\nwhere we want instcombine to merge all compare intructions together so\nlater passes like simplifycfg and slpvectorize can better optimize this\nchained comparison.\n\nReviewed By: goldstein.w.n\n\nDifferential Revision: https://reviews.llvm.org/D151660\n",
            "commit_timestamp": 1686195005.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686212301.71875,
            "elapsed_time": 5296.143295049667,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d3d5cdbfa8a9f2838531466d321feb82f3c08b9d",
            "commit_message": "[Clang] Convert some tests to opaque pointers (NFC)\n",
            "commit_timestamp": 1686211288.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686226618.318728,
            "elapsed_time": 5156.586681127548,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6a3fe0f121fac1a55ead649cc25bcc92d038472f",
            "commit_message": "X86: Add more is.fpclass lowering tests\n",
            "commit_timestamp": 1686225266.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686240817.490714,
            "elapsed_time": 5055.330767869949,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cd18efb61d759405956dbd30e4b5f2720d8e1783",
            "commit_message": "[Driver] Make -G TargetSpecific\n\nso that we report `unsupported option '-G' for target ...` on\nunsupported targets (most targets).\nThis error is tested by one target in aix-err-options.c.\n\nFollow-up to D89897 and D90063.\n",
            "commit_timestamp": 1686240132.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686255219.27266,
            "elapsed_time": 4047.9484889507294,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7a52f79126a59717012d8039ef875f68e3c637fd",
            "commit_message": "[mlir][transform] Add support for expressing scalable vector sizes\n\nThis patch enables specifying scalable vector sizes when using the\nTransform dialect to drive vectorisation, e.g.:\n```\ntransform.structured.masked_vectorize %0 vector_sizes [8, 16, [4]]\n```\nThis is implemented by extending the MaskedVectorizeOp with a dedicated\nattribute for \"scalability\" and by overloading `parseDynamicIndexList`\nso that MaskedVectorizeOp can continue using the auto-generated parser\nand printer.\n\nAt the moment, only the trailing vec size can be scalable. The following\nis not yet supported:\n```\ntransform.structured.masked_vectorize %0 vector_sizes [8, [16], [4]]\n```\n\nAs the vectoriser does not support scalable vectorisation just yet, a\nwarning is issues when scalable vector sizes are used. You can also use\nthe debug output, `--debug-only=linalg-vectorization`, to check whether\nscalable vectorisation has been switched on.\n\nThis change is a part of a larger effort to enable scalable\nvectorisation in Linalg. See this RFC for more context:\n  * https://discourse.llvm.org/t/rfc-scalable-vectorisation-in-linalg/\nSimilar patch for tiling: https://reviews.llvm.org/D150944\n\nDifferential Revision: https://reviews.llvm.org/D151892\n",
            "commit_timestamp": 1686254057.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686270063.354516,
            "elapsed_time": 5598.8303871154785,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "90073e8de3871776c4df1da78d19019990241f4d",
            "commit_message": "[WebAssembly] Error out on invalid personality functions\n\nWithout explicitly checking and erroring out, an invalid personality\nfunction, which is not `__gxx_wasm_personality_v0`, caused\na segmentation fault down the line because `WasmEHFuncInfo` was not\ncreated. This explicitly checks the validity of personality functions in\nfunctions with EH pads and errors out explicitly with a helpful error\nmessage. This also adds some more assertions to ensure `WasmEHFuncInfo`\nis correctly created and non-null.\n\nInvalid personality functions wouldn't be generated by our Clang, but\ncan be present in handwritten ll files, and more often, in files\ntransformed by passes like `metarenamer`, which is often used with\n`bugpoint` to simplify names in `bugpoint`-reduced files.\n\nReviewed By: dschuff\n\nDifferential Revision: https://reviews.llvm.org/D152203\n",
            "commit_timestamp": 1686268789.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686298551.282557,
            "elapsed_time": 5241.783594608307,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "96962d5512fbc6af0ada0f13e6be332c026529cb",
            "commit_message": "[clang] set python3 as required build dependency\n\nThe required HTMLLogger include file needs python3 to run\nresource_bundle.py to bundle all the html/css/js resources. However, if\nuser sets -DLLVM_INCLUDE_TESTS=OFF, CMake will not find python3 and the\nresource bundler will never be executed. This patch set the python3 as a\nrequired build dependency to fix this problem.\n\nPatch By: Avimitin\n\nDifferential Revision: https://reviews.llvm.org/D152418\n",
            "commit_timestamp": 1686297168.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686313118.785582,
            "elapsed_time": 6418.979030847549,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "90431ca2e01489eeff22e141714bb294315d6a3c",
            "commit_message": "Reland [AMDGPU] New PAL metadata updates to ps_extra_lds_size and float_mode\n\nNew metadata format contains full calculation of field contents for\nps_extra_lds_size (vs old format where the value in RSRC register is used by PAL\nto calculate the value required).\n\nAlso stop updating float_mode and rely on front end settings for this field.\n\nDifferential Revision: https://reviews.llvm.org/D152247\n",
            "commit_timestamp": 1686310440.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686327715.392041,
            "elapsed_time": 6694.786968231201,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2c0e6cfb8af59a291c2b446a02a2f8ebd930f07d",
            "commit_message": "[gn build] Port 6adb1ca555ec\n",
            "commit_timestamp": 1686325453.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686341793.414476,
            "elapsed_time": 3867.53191447258,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c0ad1b459742117990d38186deaeb49e75bb26f3",
            "commit_message": "[NewGVN] Fold equivalent freeze instructions\n\nDifferential Revision: https://reviews.llvm.org/D152529\n",
            "commit_timestamp": 1686340656.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686356180.631366,
            "elapsed_time": 5416.987868309021,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "10e83005367c595821749896e5938ff4f374601b",
            "commit_message": "[-Wunsafe-buffer-usage] Remove the unnecessary `const` qualifier in safe buffer analysis\n\nCasting away the qualifier raises a warning in 1e270be0886c3a770e7a967679552a02dfc1dca9\n",
            "commit_timestamp": 1686354109.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686370540.153749,
            "elapsed_time": 5124.249427318573,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "83f7b91ab8c6cbb261fb12bf720235b14283f46a",
            "commit_message": "[SelectionDAG] Update test case according to post review comments, NFC\n\nDifferential Revision: https://reviews.llvm.org/D152492\n",
            "commit_timestamp": 1686369747.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686385095.028035,
            "elapsed_time": 5313.795140504837,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "25d9fde22e609f8637f720220810429745707b76",
            "commit_message": "[SCCP] Skip computing intrinsics if one of its args is unknownOrUndef\n\nFor constant range supported intrinsics, we got consantrange from args\nno matter if they are unknown or undef. And the constant range computed\nfrom unknown or undef value state is full range.\n\nI think compute with full constant range is harmful since although we\ncan do mergeIn after these args value state are changed, the merge\noperation of two constant ranges is union.\n\nReviewed By: nikic\n\nDifferential Revision: https://reviews.llvm.org/D152499\n",
            "commit_timestamp": 1686383326.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686399796.138566,
            "elapsed_time": 7312.029540777206,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5b657f50b8e8dc5836fb80e566ca7569fd04c26f",
            "commit_message": "AMDGPU: Move LICM after AMDGPUCodeGenPrepare\n\nThe commit that added the run says it's to hoist uniform parts of\ninteger division expansion. That expansion is performed later, so this\ndidn't do anything in that case. Move this later so the original test\nshows the improvement.\n\nThis also saves a run of \"Canonicalize natural loops\". Not sure why\nthis appears to be still getting a separate loop PM run. Also feels a\nbit heavy to run this just for divide. Is there a way to specifically\nhoist the divide sequence when it expands?\n",
            "commit_timestamp": 1686397052.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686413797.542692,
            "elapsed_time": 5674.190080881119,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c0f9d7b0e6199ca3bde5a6d0036a8ada0bb6253b",
            "commit_message": "[MCParser] Modernize CppHashInfoTy (NFC)\n",
            "commit_timestamp": 1686412946.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686428197.802243,
            "elapsed_time": 5404.32940530777,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b6808ba291fcb5ff2e0d651e9e710f3d75631bc4",
            "commit_message": "[X86] Make constant `mul` -> `shl` + `add`/`sub` work for vector types\n\nSomething like:\n    `%r = mul %x, <33, 33, 33, ...>`\n\nIs best lowered as:\n    `%tmp = %shl x, <5, 5, 5>; %r = add %tmp, %x`\n\nAs well, since vectors have non-destructive shifts, we can also do\ncases where the multiply constant is `Pow2A +/- Pow2B` for arbitrary A\nand B, unlike in the scalar case where the extra `mov` instructions\nmake it not worth it.\n\nReviewed By: pengfei\n\nDifferential Revision: https://reviews.llvm.org/D150324\n",
            "commit_timestamp": 1686425926.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686442656.962456,
            "elapsed_time": 5387.891252279282,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2509c93edd36a20a0aeb5e6d612dae5b770bc987",
            "commit_message": "[Transforms] Remove AddDiscriminatorsLegacyPass\n\nThe last use was removed by:\n\n  commit ae0987d242e266847f21f5fa1bffa97ce3eff586\n  Author: Kazu Hirata <kazu@google.com>\n  Date:   Sat Jun 10 13:51:35 2023 -0700\n\nDifferential Revision: https://reviews.llvm.org/D152636\n",
            "commit_timestamp": 1686436367.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686457123.531723,
            "elapsed_time": 6580.448311805725,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "db8049deef4e3d247849e4ce2b77c69aec89d014",
            "commit_message": "[TableGen] Fix indentation. NFC\n",
            "commit_timestamp": 1686452163.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686471280.945273,
            "elapsed_time": 5163.240679979324,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8100aa4c02b04cd7d03b472f770d540f28cf5150",
            "commit_message": "[libcxx] Use the unoptimized routines for volatile source types\n\nAs reported in: D147741\n\nReviewers: philnik, var-const, ldionne, hans\n\nDifferential Revision: https://reviews.llvm.org/D152571\n",
            "commit_timestamp": 1686463907.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686485812.116689,
            "elapsed_time": 6204.537847995758,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2802739dfd844ee6a5148c25c74a58e3f9f27448",
            "commit_message": "[NFC] Replace ;; with ;\n",
            "commit_timestamp": 1686475524.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686500192.511348,
            "elapsed_time": 5346.529239177704,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c8c28ac5caf875771f9a424e46255948004cbeab",
            "commit_message": "[Driver] Place -mharden-sls= in m_Group\n\nFix https://github.com/llvm/llvm-project/issues/63237\n\nWith only a link action, we claim all CompileOnly_Group options (including -f*,\n-m*, -i*, etc). -mharden-sls= is not in a Group and therefore not claimed,\nleading to a spurious -Wunused-command-line-argument warning, and after\n5548843d692a92a7840f14002debc3cebcb3cdc3, an error.\n",
            "commit_timestamp": 1686499182.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686514715.727786,
            "elapsed_time": 6507.806059122086,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c72dea88b635bfd7856fa22bcaf388fa72c9fe86",
            "commit_message": "[AArch64][ARM][X86] Split XRay tests for Linux/macOS\n\nXRay instrumentation works for macOS running on Apple Silicon, but\ncodegen is untested there. I'm going to make changes affecting this\ntarget, get the XRay tests running on AArch64.\n\nData sections are going to become slightly different on x86_64 soon.\nI do want the tests to be specific about symbol names, so instead of\nhaving test check the common step, bifurcate tests a bit and check\nthe full symbol names.\n\nAs for ARM, XRay is not really supported on iOS at the moment, though\nARM is also really used there with modern phones. Nevertheless, codegen\ntests exist and the output is going to change a little, make it easier\nto write the special case for iOS.\n\nReviewed By: MaskRay\n\nDifferential Revision: https://reviews.llvm.org/D145291\n",
            "commit_timestamp": 1686513209.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686528968.283214,
            "elapsed_time": 5482.334884643555,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "63bd6d9e644335c8138a59281aafbf65a82fc47a",
            "commit_message": "[Driver] Default to -fxray-function-index\n\nAs explained by commit 849f1dd15e92fda2b83dbb6144e6b28b2cb946e0,\n-fxray-function-index was the original default but was accidentally flipped by\ncommit d8a8e5d6240a1db809cd95106910358e69bbf299. Restore the previous behavior.\n\nOriginally reported by Oleksii Lozovskyi in D145848.\n",
            "commit_timestamp": 1686523093.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686543438.256563,
            "elapsed_time": 5259.484094142914,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "cf79773a9006a7e22f3919268b7db381ddcb3abc",
            "commit_message": "[SCCP] Replace new value's value state with removed value's\n\nIn replaceSignedInst, if a signed instruction can be repalced with\nunsigned instruction, we created a new instruction and removed the old\ninstruction's value state. If the following instructions has this new\ninstruction as a use operand, transformations like replaceSignedInst and\nrefineInstruction would be blocked. The reason is there is no value\nstate for the new instrution.\n\nThis patch set the new instruction's value state with the removed\ninstruction's value state. I believe it is correct bacause when we\nrepalce a signed instruction with unsigned instruction, the value state\nis not changed.\n\nReviewed By: nikic\n\nDifferential Revision: https://reviews.llvm.org/D152337\n",
            "commit_timestamp": 1686541247.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": true,
            "project": [
                "clang*"
            ],
            "timestamp": 1686557843.188131,
            "elapsed_time": 6097.543085813522,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bd4f978754758d5ef29d1f10370f45362da3de37",
            "commit_message": "[libc] Improve memcmp latency and codegen\n\nThis is based on ideas from @nafi to:\n - use a branchless version of 'cmp' for 'uint32_t',\n - completely resolve the lexicographic comparison through vector\n   operations when wide types are available. We also get rid of byte\n   reloads and serializing '__builtin_ctzll'.\n\nI did not include the suggestion to replace comparisons of 'uint16_t'\nwith two 'uint8_t' as it did not seem to help the codegen. This can\nbe revisited in sub-sequent patches.\n\nThe code been rewritten to reduce nested function calls, making the\njob of the inliner easier and preventing harmful code duplication.\n\nReviewed By: nafi3000\n\nDifferential Revision: https://reviews.llvm.org/D148717\n",
            "commit_timestamp": 1686556583.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686572215.473447,
            "elapsed_time": 5579.12425661087,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a8ad413f0d18c07a4adaa0d547e0096874d809c5",
            "commit_message": "[RFC][clangd] Move preamble index out of document open critical path\n\nWe would like to move the preamble index out of the critical path.\nThis patch is an RFC to get feedback on the correct implementation and potential pitfalls to keep into consideration.\n\nI am not entirely sure if the lazy AST initialisation would create using Preamble AST in parallel. I tried with tsan enabled clangd but it seems to work OK (at least for the cases I tried)\n\nReviewed By: kadircet\n\nDifferential Revision: https://reviews.llvm.org/D148088\n",
            "commit_timestamp": 1686571001.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686586753.320975,
            "elapsed_time": 7552.461572170258,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7b31d3dada151b3a8e9f56557bdc3401c2644977",
            "commit_message": "Revert \"[RDF] Allow RegisterRef to contain register unit\" and follow-ups\n\nThis reverts commit 859b05b02d3fd9ab6b77f2bed8df6902fe704806.\n\nAlso reverts these follow-ups:\n\nRevert \"[RDF] Remove `constexpr` from `hash\"\nThis reverts commit 621507ce20ad8eef2986be2712631165e53b7d91.\n\nRevert \"[RDF] Do not use trailing return type after all, NFC\"\nThis reverts commit 46e19e3a2c45e7fb5f501bdb983a7151c158304f.\n\nRevert \"[RDF] Stop looking when reached code node in getNextRef with NextOnly\"\nThis reverts commit a049ce9d1bd5a7c1c4fcccc6a801b72b00ea8e0f.\n\nRevert \"[RDF] Use trailing return type syntax, NFC\"\nThis reverts commit d3b34b7f3a7cbfc96aea897419f167b5ee19e61a.\n\nRevert \"[RDF] Define short type names: NodeAddr<XyzNode*> -> Xyz, NFC\"\nThis reverts commit f8ed60b56d1948422dda924fcf450560591e8a19.\n",
            "commit_timestamp": 1686584128.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": [
                "clang*"
            ],
            "timestamp": 1686601206.351525,
            "elapsed_time": 7244.1240234375,
            "x64": true,
            "actual_files_count": 1666,
            "expected_files_count": 1661,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1d6c3e29f6aa45914faa7be00a939b8f550f38e9",
            "commit_message": "[Driver] Mark m_x86_Features_Group options as TargetSpecific\n\nso that they get an error on non-x86 targets.\nFollow-up to D151590.\n\nAs a workaround for https://github.com/llvm/llvm-project/issues/63270, we don't\nreport an error for -msse4.2.\n",
            "commit_timestamp": 1686599253.0
        }
    ]
}