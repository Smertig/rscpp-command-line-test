{
    "v1": [
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683822829.246261,
            "elapsed_time": 107.89437818527222,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683835460.572342,
            "elapsed_time": 79.45001673698425,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683849988.854765,
            "elapsed_time": 96.03320002555847,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683864337.773951,
            "elapsed_time": 91.16299223899841,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683878141.735907,
            "elapsed_time": 100.95493865013123,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683878676.75069,
            "elapsed_time": 75.87913274765015,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683893164.626625,
            "elapsed_time": 101.61281418800354,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683907519.382925,
            "elapsed_time": 96.12593793869019,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683921900.308748,
            "elapsed_time": 82.49573612213135,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683936374.155832,
            "elapsed_time": 80.41508030891418,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683950647.314294,
            "elapsed_time": 84.11182570457458,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683965156.764719,
            "elapsed_time": 105.05562353134155,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683979535.134656,
            "elapsed_time": 94.5260169506073,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1683993919.390813,
            "elapsed_time": 90.40751504898071,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684008306.388733,
            "elapsed_time": 83.52298021316528,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684022724.567774,
            "elapsed_time": 72.04147744178772,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684037183.690245,
            "elapsed_time": 103.18754458427429,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684051565.436534,
            "elapsed_time": 114.06450891494751,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684056120.39014,
            "elapsed_time": 103.2233669757843,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684056538.896706,
            "elapsed_time": 83.18682885169983,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684065926.98371,
            "elapsed_time": 87.26142930984497,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684080234.668853,
            "elapsed_time": 76.63261318206787,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684094693.182218,
            "elapsed_time": 86.8777391910553,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684109170.369293,
            "elapsed_time": 79.29501485824585,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684123474.81642,
            "elapsed_time": 78.83014822006226,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684137937.446244,
            "elapsed_time": 92.98001837730408,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684152327.059589,
            "elapsed_time": 96.62752032279968,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684158049.891287,
            "elapsed_time": 94.6073591709137,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "231.0.20230404.121117",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684163508.548633,
            "elapsed_time": 84.36541700363159,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684163624.483229,
            "elapsed_time": 92.21981167793274,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684166738.119851,
            "elapsed_time": 86.76070594787598,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684181079.354865,
            "elapsed_time": 91.38754296302795,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684195578.535037,
            "elapsed_time": 85.21934962272644,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684209945.920076,
            "elapsed_time": 99.1687228679657,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684224330.336115,
            "elapsed_time": 82.80355191230774,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684238757.6563,
            "elapsed_time": 98.34508037567139,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684253152.614265,
            "elapsed_time": 93.985018491745,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684267476.719619,
            "elapsed_time": 93.84626817703247,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684282005.49792,
            "elapsed_time": 87.92608070373535,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684296349.123253,
            "elapsed_time": 111.9438989162445,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684310772.162374,
            "elapsed_time": 108.54111671447754,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684318101.279029,
            "elapsed_time": 92.13640332221985,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684325085.772775,
            "elapsed_time": 81.78895950317383,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684339492.165818,
            "elapsed_time": 78.16864657402039,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684353904.409676,
            "elapsed_time": 81.99975061416626,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684368434.695474,
            "elapsed_time": 105.46955275535583,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684382726.680212,
            "elapsed_time": 88.54349684715271,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684397164.928006,
            "elapsed_time": 104.45853638648987,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684411522.986925,
            "elapsed_time": 89.91375517845154,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684425900.052339,
            "elapsed_time": 76.6178617477417,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684440292.791708,
            "elapsed_time": 86.80477547645569,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684454816.644277,
            "elapsed_time": 95.06293272972107,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684469115.602287,
            "elapsed_time": 83.53726577758789,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684483535.93379,
            "elapsed_time": 83.61386489868164,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684495017.786924,
            "elapsed_time": 103.89997839927673,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684497894.274171,
            "elapsed_time": 70.94889211654663,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684517589.93368,
            "elapsed_time": 100.38379502296448,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684517592.472714,
            "elapsed_time": 71.21763515472412,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684512273.555438,
            "elapsed_time": 88.72344613075256,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684517231.906127,
            "elapsed_time": 98.58581948280334,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684526715.689991,
            "elapsed_time": 97.77904200553894,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684541169.371357,
            "elapsed_time": 91.2580885887146,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684555629.053805,
            "elapsed_time": 112.23335766792297,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684569878.695445,
            "elapsed_time": 81.18651294708252,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684583064.171008,
            "elapsed_time": 75.07787346839905,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684583861.984246,
            "elapsed_time": 79.40236282348633,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684584582.585016,
            "elapsed_time": 89.14486813545227,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684584359.529217,
            "elapsed_time": 95.60610032081604,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684590290.714689,
            "elapsed_time": 85.63221263885498,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684590888.17117,
            "elapsed_time": 72.7182559967041,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684601695.242885,
            "elapsed_time": 76.29822325706482,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684605356.585858,
            "elapsed_time": 89.37878513336182,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684610496.65622,
            "elapsed_time": 87.14210510253906,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684613051.638684,
            "elapsed_time": 80.1267683506012,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684627606.928964,
            "elapsed_time": 90.43029451370239,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684641912.566513,
            "elapsed_time": 100.6412742137909,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684655414.51944,
            "elapsed_time": 85.44946384429932,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684657207.797124,
            "elapsed_time": 70.29151964187622,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684656336.871992,
            "elapsed_time": 94.42365717887878,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684664235.731256,
            "elapsed_time": 89.24940657615662,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684670699.075157,
            "elapsed_time": 87.71391654014587,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684685042.618484,
            "elapsed_time": 83.01393032073975,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684699530.771941,
            "elapsed_time": 95.14125466346741,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684714003.288462,
            "elapsed_time": 89.68648600578308,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684728303.505508,
            "elapsed_time": 78.85519027709961,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684745374.486866,
            "elapsed_time": 101.03775382041931,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684742789.465522,
            "elapsed_time": 97.74317574501038,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684757158.463101,
            "elapsed_time": 92.23824286460876,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684767197.810766,
            "elapsed_time": 90.60456490516663,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684771515.066169,
            "elapsed_time": 79.28569030761719,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684785907.060259,
            "elapsed_time": 78.6911506652832,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684800364.719656,
            "elapsed_time": 88.41994905471802,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684814787.801023,
            "elapsed_time": 106.3299412727356,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684829347.18507,
            "elapsed_time": 81.33210802078247,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684829064.991008,
            "elapsed_time": 77.14881229400635,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684843474.820373,
            "elapsed_time": 85.84686398506165,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684860160.325537,
            "elapsed_time": 98.66818809509277,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684857885.884913,
            "elapsed_time": 81.86548852920532,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684872377.014067,
            "elapsed_time": 108.29736232757568,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684886763.809007,
            "elapsed_time": 82.780766248703,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684901149.631563,
            "elapsed_time": 87.25701308250427,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684915499.556738,
            "elapsed_time": 91.16445207595825,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684932540.005809,
            "elapsed_time": 70.59128141403198,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684929934.803611,
            "elapsed_time": 109.12435388565063,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684935328.342919,
            "elapsed_time": 92.9755187034607,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684941903.164945,
            "elapsed_time": 103.32384586334229,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684944333.625928,
            "elapsed_time": 97.13442707061768,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684958689.629348,
            "elapsed_time": 86.23584532737732,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684973181.690482,
            "elapsed_time": 89.90933537483215,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684987523.760537,
            "elapsed_time": 104.91646337509155,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685001909.652686,
            "elapsed_time": 83.70104789733887,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685006985.847214,
            "elapsed_time": 75.54794049263,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685016333.332441,
            "elapsed_time": 92.77890944480896,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685030693.895149,
            "elapsed_time": 101.22642946243286,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685045076.222462,
            "elapsed_time": 88.32387948036194,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685059808.550003,
            "elapsed_time": 128.9440770149231,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685073843.466158,
            "elapsed_time": 80.11817836761475,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685085455.456022,
            "elapsed_time": 102.63345432281494,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685086919.672907,
            "elapsed_time": 81.30985021591187,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685088240.513475,
            "elapsed_time": 68.39124083518982,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685098001.266038,
            "elapsed_time": 90.59423828125,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685102718.232216,
            "elapsed_time": 94.29337549209595,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685113594.57015,
            "elapsed_time": 105.08333158493042,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685131532.088047,
            "elapsed_time": 100.73808908462524,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685145983.327838,
            "elapsed_time": 77.35759687423706,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685160315.595397,
            "elapsed_time": 82.51714015007019,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685168610.900002,
            "elapsed_time": 81.84850430488586,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685174661.968831,
            "elapsed_time": 76.0395085811615,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685181533.007868,
            "elapsed_time": 94.47671341896057,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685191225.0691,
            "elapsed_time": 88.64688062667847,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685189168.071036,
            "elapsed_time": 97.04594373703003,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685203458.900639,
            "elapsed_time": 73.30612659454346,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685219799.255576,
            "elapsed_time": 104.41480374336243,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685217938.644356,
            "elapsed_time": 102.53085279464722,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685232263.963872,
            "elapsed_time": 92.67969512939453,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685246614.183445,
            "elapsed_time": 102.52498483657837,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685261016.748173,
            "elapsed_time": 84.6217737197876,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685275443.719337,
            "elapsed_time": 80.82443618774414,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685289807.572613,
            "elapsed_time": 85.6302433013916,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685304217.411813,
            "elapsed_time": 79.4497811794281,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685318687.885445,
            "elapsed_time": 76.84019875526428,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685333056.155148,
            "elapsed_time": 96.93929505348206,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685347468.523763,
            "elapsed_time": 86.82249736785889,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685361798.697437,
            "elapsed_time": 78.26292538642883,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685376176.698581,
            "elapsed_time": 78.75859451293945,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685390583.667902,
            "elapsed_time": 81.38265991210938,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685405038.859284,
            "elapsed_time": 82.53198313713074,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685419438.785865,
            "elapsed_time": 99.67144799232483,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4b13b3d47a9ad3bb4b83bde3c3841b2b0b5c5789",
            "commit_message": "Fixed a typo in docs (#1600)\n\n",
            "commit_timestamp": 1684141620.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685433814.117111,
            "elapsed_time": 85.81508660316467,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685448286.493793,
            "elapsed_time": 105.90416145324707,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685462618.324953,
            "elapsed_time": 84.70835852622986,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685477022.997862,
            "elapsed_time": 97.5774986743927,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685491547.123663,
            "elapsed_time": 90.854562997818,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685505829.69605,
            "elapsed_time": 95.04126381874084,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685520201.038965,
            "elapsed_time": 85.49169611930847,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685526929.211141,
            "elapsed_time": 99.35959887504578,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685534588.837315,
            "elapsed_time": 79.1253035068512,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685553659.333464,
            "elapsed_time": 77.97370910644531,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685549030.940569,
            "elapsed_time": 95.84891295433044,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685563417.858615,
            "elapsed_time": 83.6426157951355,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685577889.314918,
            "elapsed_time": 92.05861330032349,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685592253.857397,
            "elapsed_time": 88.51019310951233,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685606630.029112,
            "elapsed_time": 86.52299475669861,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685621054.318677,
            "elapsed_time": 96.31918692588806,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685635435.570799,
            "elapsed_time": 117.9354841709137,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685649829.543905,
            "elapsed_time": 94.74780440330505,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685664337.618921,
            "elapsed_time": 99.98478317260742,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685678643.559628,
            "elapsed_time": 90.81073689460754,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685693040.770221,
            "elapsed_time": 98.52707052230835,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685707409.642032,
            "elapsed_time": 87.77576732635498,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685716445.240716,
            "elapsed_time": 88.6310920715332,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685721782.206494,
            "elapsed_time": 84.88131785392761,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685736195.409751,
            "elapsed_time": 86.79523420333862,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685750677.269385,
            "elapsed_time": 94.83898997306824,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685765002.876197,
            "elapsed_time": 91.21207118034363,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685779460.438969,
            "elapsed_time": 90.0086727142334,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685793806.871481,
            "elapsed_time": 75.25034308433533,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685808167.156222,
            "elapsed_time": 77.07565689086914,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685822622.071402,
            "elapsed_time": 83.06939959526062,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685837159.024638,
            "elapsed_time": 107.71664452552795,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685851411.51471,
            "elapsed_time": 89.91013813018799,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685865822.946022,
            "elapsed_time": 92.65804147720337,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685880189.876959,
            "elapsed_time": 73.31509757041931,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685894607.834139,
            "elapsed_time": 83.72671127319336,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685908971.137537,
            "elapsed_time": 78.20432305335999,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685923446.523028,
            "elapsed_time": 69.60873651504517,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685937805.970934,
            "elapsed_time": 82.10691928863525,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685952284.457635,
            "elapsed_time": 101.97077679634094,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685966646.805909,
            "elapsed_time": 81.88954710960388,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685981042.533406,
            "elapsed_time": 83.54764914512634,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685995450.909308,
            "elapsed_time": 90.29925584793091,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686009922.224549,
            "elapsed_time": 95.34324240684509,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686024175.529328,
            "elapsed_time": 84.92740297317505,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686040323.093166,
            "elapsed_time": 93.17383670806885,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686038639.135945,
            "elapsed_time": 105.07801032066345,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686051638.043465,
            "elapsed_time": 80.92258358001709,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686057379.375125,
            "elapsed_time": 104.777263879776,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686052999.209969,
            "elapsed_time": 82.19770932197571,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686067433.150029,
            "elapsed_time": 111.63936996459961,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686081804.70926,
            "elapsed_time": 87.20278358459473,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686096329.590168,
            "elapsed_time": 97.65531802177429,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686110646.108946,
            "elapsed_time": 116.65479922294617,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686118391.623458,
            "elapsed_time": 105.46542119979858,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686125067.788061,
            "elapsed_time": 97.7500011920929,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686139402.912352,
            "elapsed_time": 83.42951440811157,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686153773.925556,
            "elapsed_time": 75.2330470085144,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686168298.725051,
            "elapsed_time": 149.230162858963,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686182651.119999,
            "elapsed_time": 87.06695580482483,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686196995.763154,
            "elapsed_time": 82.69127416610718,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686211401.800412,
            "elapsed_time": 88.36855888366699,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686225797.686146,
            "elapsed_time": 84.01423716545105,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686240233.343599,
            "elapsed_time": 81.7477023601532,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686254673.378457,
            "elapsed_time": 89.16550898551941,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686269061.461643,
            "elapsed_time": 82.65853977203369,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686297901.895451,
            "elapsed_time": 95.64666938781738,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686312276.608885,
            "elapsed_time": 105.02036380767822,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686326627.622532,
            "elapsed_time": 103.32507753372192,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686341043.63616,
            "elapsed_time": 82.67139863967896,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686355484.482093,
            "elapsed_time": 80.29783749580383,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686369829.221734,
            "elapsed_time": 100.58150029182434,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686384267.41125,
            "elapsed_time": 113.86190104484558,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686398614.10885,
            "elapsed_time": 87.30159997940063,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686413036.507205,
            "elapsed_time": 96.48649001121521,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686427415.929392,
            "elapsed_time": 83.09470224380493,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686441886.762584,
            "elapsed_time": 84.68102860450745,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686456187.815799,
            "elapsed_time": 82.46781754493713,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686470609.827664,
            "elapsed_time": 94.44075083732605,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686485045.257795,
            "elapsed_time": 83.67675542831421,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686499417.505697,
            "elapsed_time": 85.52602005004883,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686513799.749294,
            "elapsed_time": 83.92373919487,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686528294.340116,
            "elapsed_time": 90.15538954734802,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686542651.428756,
            "elapsed_time": 91.55520915985107,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686557043.053204,
            "elapsed_time": 101.45340609550476,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686563136.817719,
            "elapsed_time": 109.03631711006165,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686571444.226526,
            "elapsed_time": 104.27771306037903,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686581138.742439,
            "elapsed_time": 95.9049859046936,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686586851.472683,
            "elapsed_time": 95.7611939907074,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686585804.600471,
            "elapsed_time": 92.01919341087341,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686600209.941459,
            "elapsed_time": 90.49427509307861,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686629048.279684,
            "elapsed_time": 86.29963040351868,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686643460.833935,
            "elapsed_time": 100.11593461036682,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686657856.431609,
            "elapsed_time": 107.14427924156189,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686672223.558685,
            "elapsed_time": 97.65316987037659,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686686658.623247,
            "elapsed_time": 104.33276510238647,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686701077.967507,
            "elapsed_time": 92.03523564338684,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686715431.053595,
            "elapsed_time": 93.47060966491699,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686729816.198629,
            "elapsed_time": 88.61401414871216,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686744277.598654,
            "elapsed_time": 106.41428089141846,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686758620.755294,
            "elapsed_time": 82.58384656906128,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686773026.438479,
            "elapsed_time": 89.24906921386719,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686787520.686214,
            "elapsed_time": 84.18469047546387,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686801839.392537,
            "elapsed_time": 125.34056258201599,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686816207.402186,
            "elapsed_time": 87.78027081489563,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686830656.62734,
            "elapsed_time": 75.75062680244446,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686845016.853302,
            "elapsed_time": 97.27645230293274,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686859419.681873,
            "elapsed_time": 84.5483672618866,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686873930.828971,
            "elapsed_time": 120.16989469528198,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686888184.54873,
            "elapsed_time": 78.76376605033875,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686902618.028558,
            "elapsed_time": 78.97188949584961,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686917013.759289,
            "elapsed_time": 78.35845279693604,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686929443.30449,
            "elapsed_time": 85.61450505256653,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686931112.71615,
            "elapsed_time": 101.02275562286377,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686931358.11618,
            "elapsed_time": 77.26797342300415,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686945816.869473,
            "elapsed_time": 86.42798209190369,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686960301.695342,
            "elapsed_time": 94.57864809036255,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686974584.114621,
            "elapsed_time": 97.55597138404846,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686994150.274946,
            "elapsed_time": 84.60670948028564,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686994376.696046,
            "elapsed_time": 85.50210499763489,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686988999.998501,
            "elapsed_time": 82.76344394683838,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686998842.1993,
            "elapsed_time": 89.33899974822998,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687003458.375935,
            "elapsed_time": 93.33824181556702,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687017816.474869,
            "elapsed_time": 83.69945859909058,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687032153.168616,
            "elapsed_time": 78.81899547576904,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687046710.830222,
            "elapsed_time": 84.42608332633972,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687060964.488511,
            "elapsed_time": 88.54080581665039,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687075399.909025,
            "elapsed_time": 89.64251446723938,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687089827.758436,
            "elapsed_time": 86.38911604881287,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687104205.067193,
            "elapsed_time": 81.59796857833862,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687110912.215325,
            "elapsed_time": 85.15593719482422,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687118624.784224,
            "elapsed_time": 90.12407445907593,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687133100.487128,
            "elapsed_time": 92.0285873413086,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687147399.945065,
            "elapsed_time": 77.01376724243164,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "604f6fd3f4b34a84ec4eb4db81d842fa4db829cd",
            "commit_message": "Add project name to version message\n\nInspired by paulcaprioli\n",
            "commit_timestamp": 1685432666.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687161898.998041,
            "elapsed_time": 76.76160311698914,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687176219.025449,
            "elapsed_time": 86.99636030197144,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687191921.765743,
            "elapsed_time": 90.87657022476196,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687190663.446765,
            "elapsed_time": 97.10047101974487,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687204980.190016,
            "elapsed_time": 81.87067341804504,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687219460.720178,
            "elapsed_time": 71.91316938400269,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687233810.617321,
            "elapsed_time": 92.22974371910095,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687248200.092192,
            "elapsed_time": 78.74210667610168,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687262628.560865,
            "elapsed_time": 107.1356463432312,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687291371.770752,
            "elapsed_time": 83.89262819290161,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687305901.708032,
            "elapsed_time": 87.33568954467773,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687320232.027857,
            "elapsed_time": 88.82263946533203,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687332176.963834,
            "elapsed_time": 96.60778379440308,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687334623.939845,
            "elapsed_time": 82.44491696357727,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687349035.573717,
            "elapsed_time": 90.8095531463623,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687363450.907675,
            "elapsed_time": 100.42107582092285,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687377826.093623,
            "elapsed_time": 105.25770974159241,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b323288cbac5fd1dd35f153e767497a23c337742",
            "commit_message": "Fix a typo in regex choice (#1610)\n\nBENCHMARK_HAVE_STD_REGEX is not used but HAVE_STD_REGEX like the other two choices, i.e. HAVE_GNU_POSIX_REGEX and HAVE_POSIX_REGEX.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1687161108.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687392247.93348,
            "elapsed_time": 86.90555310249329,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687406584.143575,
            "elapsed_time": 87.63434958457947,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687421060.240548,
            "elapsed_time": 107.15862655639648,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687435421.87694,
            "elapsed_time": 80.52974772453308,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687449814.804385,
            "elapsed_time": 86.60767340660095,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687464207.386733,
            "elapsed_time": 92.70949125289917,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687478765.360915,
            "elapsed_time": 100.4387903213501,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687492962.545434,
            "elapsed_time": 81.47635269165039,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687507383.617127,
            "elapsed_time": 78.94849967956543,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687521830.235346,
            "elapsed_time": 82.76588225364685,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687536254.524155,
            "elapsed_time": 98.3476972579956,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687550607.732384,
            "elapsed_time": 87.46187472343445,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687565151.255966,
            "elapsed_time": 97.83317971229553,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687579443.973841,
            "elapsed_time": 88.80322885513306,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687593822.214437,
            "elapsed_time": 81.4236409664154,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687608251.772872,
            "elapsed_time": 79.23646926879883,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687622577.11281,
            "elapsed_time": 85.63160300254822,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687636990.484734,
            "elapsed_time": 74.73113107681274,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687651545.805558,
            "elapsed_time": 80.02501463890076,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687665891.600549,
            "elapsed_time": 105.87094306945801,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687680179.937221,
            "elapsed_time": 85.3055489063263,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687694627.054327,
            "elapsed_time": 83.64892601966858,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687703549.21004,
            "elapsed_time": 80.03798174858093,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687708979.832519,
            "elapsed_time": 98.1750795841217,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687723444.657973,
            "elapsed_time": 101.44966650009155,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687737936.075405,
            "elapsed_time": 92.06018662452698,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687752184.91359,
            "elapsed_time": 91.71344113349915,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687781040.242809,
            "elapsed_time": 95.53614211082458,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687795450.31391,
            "elapsed_time": 111.04114389419556,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687809855.629029,
            "elapsed_time": 120.40274500846863,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687824280.302498,
            "elapsed_time": 97.31510829925537,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687838622.827533,
            "elapsed_time": 83.89994239807129,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687853031.910974,
            "elapsed_time": 88.28778529167175,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687867478.970376,
            "elapsed_time": 106.37273693084717,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1d25c2e3bea73ea03592abc7e7ef9b6a47c2e90b",
            "commit_message": "remove old-style (C-style) casts (#1614)\n\nRemove old-style (C-style) casts\r\n\r\nThis is required by the Google C++ style guide:\r\nhttps://google.github.io/styleguide/cppguide.html#Casting\r\n",
            "commit_timestamp": 1687386944.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687881790.729405,
            "elapsed_time": 86.72738146781921,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687896247.663249,
            "elapsed_time": 89.8083565235138,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687910710.456711,
            "elapsed_time": 82.1659643650055,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687925025.512952,
            "elapsed_time": 106.64050579071045,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687939443.622966,
            "elapsed_time": 97.8953709602356,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687953840.165,
            "elapsed_time": 103.14823603630066,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687968260.97949,
            "elapsed_time": 104.16584277153015,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687982637.130517,
            "elapsed_time": 93.65058660507202,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687997192.235606,
            "elapsed_time": 111.7926824092865,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688011432.205117,
            "elapsed_time": 84.8278419971466,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688025830.806243,
            "elapsed_time": 82.41171431541443,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688040231.997005,
            "elapsed_time": 79.45985984802246,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688054578.703454,
            "elapsed_time": 84.63634729385376,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688068989.918428,
            "elapsed_time": 103.98458480834961,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688083522.071843,
            "elapsed_time": 90.39957070350647,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688097807.983934,
            "elapsed_time": 92.62820196151733,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688112205.502313,
            "elapsed_time": 73.67287182807922,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688126726.833498,
            "elapsed_time": 83.81105256080627,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688140975.930701,
            "elapsed_time": 86.25912499427795,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688155397.523636,
            "elapsed_time": 82.63958263397217,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688169892.70219,
            "elapsed_time": 88.07920789718628,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688184201.498757,
            "elapsed_time": 88.46646308898926,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688198635.011337,
            "elapsed_time": 90.19064164161682,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688213035.708034,
            "elapsed_time": 89.54488348960876,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688227401.534128,
            "elapsed_time": 79.7793436050415,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688241795.507907,
            "elapsed_time": 104.40833282470703,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688256276.452268,
            "elapsed_time": 85.2809112071991,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688270604.573123,
            "elapsed_time": 89.7905752658844,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688284990.484528,
            "elapsed_time": 77.35116791725159,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688299398.954368,
            "elapsed_time": 84.71944999694824,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688313785.873143,
            "elapsed_time": 91.03115320205688,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688328208.554672,
            "elapsed_time": 78.14241743087769,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688342724.833387,
            "elapsed_time": 100.06192398071289,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688357014.198409,
            "elapsed_time": 84.8373966217041,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688371439.007339,
            "elapsed_time": 91.09144926071167,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "aacf2b1af967b083565be8c7181626b4609318ac",
            "commit_message": "Add support for bzlmod (excluding Python bindings) (#1615)\n\n* Migrate to bzlmod\r\n\r\n* Update Python version to PY3, as indicated by the actual source file.\r\n\r\n* Migrate more libraries & first draft of direct pywheel rule usage in Bazel\r\n\r\n* Integrate with nanobind and libpfm\r\n\r\n* Make Python toolchain a dev dependency\r\n\r\n* Undo py_wheel usage until later\r\n\r\n* Added support for bzlmod for C++ parts of google_benchmark.\r\n\r\n* Make //tools:all buildable with --enable_bzlmod\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>",
            "commit_timestamp": 1687867419.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688385816.924317,
            "elapsed_time": 80.65580129623413,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "edb0d3d46d76df6c54c174f026c8a6a21b833ebf",
            "commit_message": "Suppress intentional potential memory leak as detected by clang static analysis (#1618)\n\nhttps://github.com/google/benchmark/issues/1513\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688375911.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688400207.289903,
            "elapsed_time": 89.11860346794128,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "edb0d3d46d76df6c54c174f026c8a6a21b833ebf",
            "commit_message": "Suppress intentional potential memory leak as detected by clang static analysis (#1618)\n\nhttps://github.com/google/benchmark/issues/1513\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688375911.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688414597.864828,
            "elapsed_time": 86.07785677909851,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "edb0d3d46d76df6c54c174f026c8a6a21b833ebf",
            "commit_message": "Suppress intentional potential memory leak as detected by clang static analysis (#1618)\n\nhttps://github.com/google/benchmark/issues/1513\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688375911.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688429122.431277,
            "elapsed_time": 104.29011917114258,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "edb0d3d46d76df6c54c174f026c8a6a21b833ebf",
            "commit_message": "Suppress intentional potential memory leak as detected by clang static analysis (#1618)\n\nhttps://github.com/google/benchmark/issues/1513\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688375911.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688443442.988996,
            "elapsed_time": 84.55247449874878,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "edb0d3d46d76df6c54c174f026c8a6a21b833ebf",
            "commit_message": "Suppress intentional potential memory leak as detected by clang static analysis (#1618)\n\nhttps://github.com/google/benchmark/issues/1513\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688375911.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688457811.418392,
            "elapsed_time": 85.38103556632996,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "408f9e06676ffdc226adf652e013aa15861589ad",
            "commit_message": "Add discord server link to README",
            "commit_timestamp": 1688457337.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688472221.139796,
            "elapsed_time": 79.85156011581421,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "408f9e06676ffdc226adf652e013aa15861589ad",
            "commit_message": "Add discord server link to README",
            "commit_timestamp": 1688457337.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688486605.014151,
            "elapsed_time": 107.55939078330994,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "43b2917dce1ae9c5949d66dfc6baf8d04d359971",
            "commit_message": "Add more terminals with color support (#1621)\n\n",
            "commit_timestamp": 1688483635.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688501021.644505,
            "elapsed_time": 79.0719301700592,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "43b2917dce1ae9c5949d66dfc6baf8d04d359971",
            "commit_message": "Add more terminals with color support (#1621)\n\n",
            "commit_timestamp": 1688483635.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688515629.118586,
            "elapsed_time": 145.59272837638855,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "43b2917dce1ae9c5949d66dfc6baf8d04d359971",
            "commit_message": "Add more terminals with color support (#1621)\n\n",
            "commit_timestamp": 1688483635.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688529830.544575,
            "elapsed_time": 73.711092710495,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "43b2917dce1ae9c5949d66dfc6baf8d04d359971",
            "commit_message": "Add more terminals with color support (#1621)\n\n",
            "commit_timestamp": 1688483635.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688544232.027273,
            "elapsed_time": 89.76692128181458,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "43b2917dce1ae9c5949d66dfc6baf8d04d359971",
            "commit_message": "Add more terminals with color support (#1621)\n\n",
            "commit_timestamp": 1688483635.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688558652.471878,
            "elapsed_time": 90.19823932647705,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "43b2917dce1ae9c5949d66dfc6baf8d04d359971",
            "commit_message": "Add more terminals with color support (#1621)\n\n",
            "commit_timestamp": 1688483635.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688573069.646667,
            "elapsed_time": 94.12796401977539,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "43b2917dce1ae9c5949d66dfc6baf8d04d359971",
            "commit_message": "Add more terminals with color support (#1621)\n\n",
            "commit_timestamp": 1688483635.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688587430.186449,
            "elapsed_time": 80.58383584022522,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e730f91d8cb6af19a172d6a36b4279181a02a9ff",
            "commit_message": "Fix passing non-const lvalue refs to DoNotOptimize (#1622)\n\n",
            "commit_timestamp": 1688576708.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688601904.889322,
            "elapsed_time": 81.06027793884277,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e730f91d8cb6af19a172d6a36b4279181a02a9ff",
            "commit_message": "Fix passing non-const lvalue refs to DoNotOptimize (#1622)\n\n",
            "commit_timestamp": 1688576708.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688616224.070986,
            "elapsed_time": 79.047611951828,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e730f91d8cb6af19a172d6a36b4279181a02a9ff",
            "commit_message": "Fix passing non-const lvalue refs to DoNotOptimize (#1622)\n\n",
            "commit_timestamp": 1688576708.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688630636.544104,
            "elapsed_time": 87.36199355125427,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e730f91d8cb6af19a172d6a36b4279181a02a9ff",
            "commit_message": "Fix passing non-const lvalue refs to DoNotOptimize (#1622)\n\n",
            "commit_timestamp": 1688576708.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688645069.898717,
            "elapsed_time": 95.51787805557251,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "015d1a091af6937488242b70121858bce8fd40e9",
            "commit_message": "bump version to 1.8.2 ready for release\n",
            "commit_timestamp": 1688633435.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688659413.873023,
            "elapsed_time": 82.17643356323242,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "015d1a091af6937488242b70121858bce8fd40e9",
            "commit_message": "bump version to 1.8.2 ready for release\n",
            "commit_timestamp": 1688633435.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688673792.275726,
            "elapsed_time": 94.1562020778656,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "015d1a091af6937488242b70121858bce8fd40e9",
            "commit_message": "bump version to 1.8.2 ready for release\n",
            "commit_timestamp": 1688633435.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688688294.729968,
            "elapsed_time": 76.34123587608337,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "015d1a091af6937488242b70121858bce8fd40e9",
            "commit_message": "bump version to 1.8.2 ready for release\n",
            "commit_timestamp": 1688633435.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688702730.439243,
            "elapsed_time": 83.88175010681152,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "015d1a091af6937488242b70121858bce8fd40e9",
            "commit_message": "bump version to 1.8.2 ready for release\n",
            "commit_timestamp": 1688633435.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688717031.673855,
            "elapsed_time": 100.06146931648254,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "015d1a091af6937488242b70121858bce8fd40e9",
            "commit_message": "bump version to 1.8.2 ready for release\n",
            "commit_timestamp": 1688633435.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688731463.670135,
            "elapsed_time": 95.22315382957458,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688745814.148479,
            "elapsed_time": 83.1185073852539,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688760208.256388,
            "elapsed_time": 101.43350028991699,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688774756.084715,
            "elapsed_time": 115.45174145698547,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688789032.701169,
            "elapsed_time": 99.26905560493469,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688803411.350131,
            "elapsed_time": 101.12675094604492,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688817865.098049,
            "elapsed_time": 108.53241682052612,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688832200.69842,
            "elapsed_time": 98.41591453552246,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688846596.367278,
            "elapsed_time": 91.3002610206604,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688861085.269896,
            "elapsed_time": 78.20685029029846,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688875416.529692,
            "elapsed_time": 76.81325197219849,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688889806.501384,
            "elapsed_time": 93.38129091262817,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688904211.545958,
            "elapsed_time": 84.28992533683777,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688918584.875548,
            "elapsed_time": 87.53775262832642,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4931aefb51d1e5872b096a97f43e13fa0fc33c8c",
            "commit_message": "Fix broken PFM-enabled tests (#1623)\n\n* Add pfm CI actions for bazel\r\n\r\n* Fix problems in unit test.\r\n\r\n* Undo enabling the CI tests for pfm - github CI machines seemingly do not support performance counters.\r\n\r\n* Remove commented code - can be revisited in github history when needed, and there's a comment explaining the rationale behind the new test code.\r\n\r\n---------\r\n\r\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1688720296.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688933029.42301,
            "elapsed_time": 94.62048053741455,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b5aade18104abd60ba61e54b3b7affaa95c44a26",
            "commit_message": "Update tools.md for missing color meaning issue #1491 (#1624)\n\nUpdate tools.md with more documentation about U-test\r\n\r\nFixes https://github.com/google/benchmark/issues/1491",
            "commit_timestamp": 1688919934.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688947489.490644,
            "elapsed_time": 84.46817946434021,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b5aade18104abd60ba61e54b3b7affaa95c44a26",
            "commit_message": "Update tools.md for missing color meaning issue #1491 (#1624)\n\nUpdate tools.md with more documentation about U-test\r\n\r\nFixes https://github.com/google/benchmark/issues/1491",
            "commit_timestamp": 1688919934.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688961818.786731,
            "elapsed_time": 84.41513729095459,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b5aade18104abd60ba61e54b3b7affaa95c44a26",
            "commit_message": "Update tools.md for missing color meaning issue #1491 (#1624)\n\nUpdate tools.md with more documentation about U-test\r\n\r\nFixes https://github.com/google/benchmark/issues/1491",
            "commit_timestamp": 1688919934.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688976283.496807,
            "elapsed_time": 106.39605617523193,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b5aade18104abd60ba61e54b3b7affaa95c44a26",
            "commit_message": "Update tools.md for missing color meaning issue #1491 (#1624)\n\nUpdate tools.md with more documentation about U-test\r\n\r\nFixes https://github.com/google/benchmark/issues/1491",
            "commit_timestamp": 1688919934.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688990715.910894,
            "elapsed_time": 103.26214623451233,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "16c6ad83aa46d01b0b12a32c8ed0360bb83d151b",
            "commit_message": "Add pyproject.toml file for PEP518 compliance (#1625)\n\nThe newly created `pyproject.toml` contains all static metadata as well\r\nas the readme and version as dynamic arguments, to be read by setuptools\r\nduring the build.\r\n\r\nWhat is left in the `setup.py` for now is the custom Bazel extension\r\nclass, since that is not properly supported yet.",
            "commit_timestamp": 1688982229.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689005053.378968,
            "elapsed_time": 93.3743269443512,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "16c6ad83aa46d01b0b12a32c8ed0360bb83d151b",
            "commit_message": "Add pyproject.toml file for PEP518 compliance (#1625)\n\nThe newly created `pyproject.toml` contains all static metadata as well\r\nas the readme and version as dynamic arguments, to be read by setuptools\r\nduring the build.\r\n\r\nWhat is left in the `setup.py` for now is the custom Bazel extension\r\nclass, since that is not properly supported yet.",
            "commit_timestamp": 1688982229.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689019390.050512,
            "elapsed_time": 85.02759122848511,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "a092f8222c1fa95986efe611abf78daba59d3c59",
            "commit_message": "missing cmake include\n",
            "commit_timestamp": 1689008281.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689033925.255785,
            "elapsed_time": 94.38621878623962,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "a092f8222c1fa95986efe611abf78daba59d3c59",
            "commit_message": "missing cmake include\n",
            "commit_timestamp": 1689008281.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689048211.90621,
            "elapsed_time": 87.21275496482849,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "a092f8222c1fa95986efe611abf78daba59d3c59",
            "commit_message": "missing cmake include\n",
            "commit_timestamp": 1689008281.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689062628.377105,
            "elapsed_time": 75.80489158630371,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "a092f8222c1fa95986efe611abf78daba59d3c59",
            "commit_message": "missing cmake include\n",
            "commit_timestamp": 1689008281.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689077053.653174,
            "elapsed_time": 99.13783168792725,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "cb39b7150d17df7bc54a214c1adf2a55b23f8f5e",
            "commit_message": "Bump `nanobind` to stable v1.4.0 tag (#1626)\n\nThis seems to reduce binding sizes even further, with a wheel size of\r\n175KB on my local machine (macOS 13.4.1).",
            "commit_timestamp": 1689065811.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689091420.133439,
            "elapsed_time": 113.41994285583496,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ba49f1c167b18d08414549d52e3135471b6ed741",
            "commit_message": "Bump scipy from 1.5.4 to 1.10.0 in /tools (#1630)\n\nBumps [scipy](https://github.com/scipy/scipy) from 1.5.4 to 1.10.0.\r\n- [Release notes](https://github.com/scipy/scipy/releases)\r\n- [Commits](https://github.com/scipy/scipy/compare/v1.5.4...v1.10.0)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: scipy\r\n  dependency-type: direct:production\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
            "commit_timestamp": 1689089312.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689105788.565328,
            "elapsed_time": 88.86300444602966,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ba49f1c167b18d08414549d52e3135471b6ed741",
            "commit_message": "Bump scipy from 1.5.4 to 1.10.0 in /tools (#1630)\n\nBumps [scipy](https://github.com/scipy/scipy) from 1.5.4 to 1.10.0.\r\n- [Release notes](https://github.com/scipy/scipy/releases)\r\n- [Commits](https://github.com/scipy/scipy/compare/v1.5.4...v1.10.0)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: scipy\r\n  dependency-type: direct:production\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
            "commit_timestamp": 1689089312.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689120313.81541,
            "elapsed_time": 98.72960662841797,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ba49f1c167b18d08414549d52e3135471b6ed741",
            "commit_message": "Bump scipy from 1.5.4 to 1.10.0 in /tools (#1630)\n\nBumps [scipy](https://github.com/scipy/scipy) from 1.5.4 to 1.10.0.\r\n- [Release notes](https://github.com/scipy/scipy/releases)\r\n- [Commits](https://github.com/scipy/scipy/compare/v1.5.4...v1.10.0)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: scipy\r\n  dependency-type: direct:production\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
            "commit_timestamp": 1689089312.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689134560.512142,
            "elapsed_time": 76.93918800354004,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ba49f1c167b18d08414549d52e3135471b6ed741",
            "commit_message": "Bump scipy from 1.5.4 to 1.10.0 in /tools (#1630)\n\nBumps [scipy](https://github.com/scipy/scipy) from 1.5.4 to 1.10.0.\r\n- [Release notes](https://github.com/scipy/scipy/releases)\r\n- [Commits](https://github.com/scipy/scipy/compare/v1.5.4...v1.10.0)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: scipy\r\n  dependency-type: direct:production\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
            "commit_timestamp": 1689089312.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689148959.283743,
            "elapsed_time": 75.18081712722778,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ba49f1c167b18d08414549d52e3135471b6ed741",
            "commit_message": "Bump scipy from 1.5.4 to 1.10.0 in /tools (#1630)\n\nBumps [scipy](https://github.com/scipy/scipy) from 1.5.4 to 1.10.0.\r\n- [Release notes](https://github.com/scipy/scipy/releases)\r\n- [Commits](https://github.com/scipy/scipy/compare/v1.5.4...v1.10.0)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: scipy\r\n  dependency-type: direct:production\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
            "commit_timestamp": 1689089312.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689163408.655842,
            "elapsed_time": 96.598965883255,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ba49f1c167b18d08414549d52e3135471b6ed741",
            "commit_message": "Bump scipy from 1.5.4 to 1.10.0 in /tools (#1630)\n\nBumps [scipy](https://github.com/scipy/scipy) from 1.5.4 to 1.10.0.\r\n- [Release notes](https://github.com/scipy/scipy/releases)\r\n- [Commits](https://github.com/scipy/scipy/compare/v1.5.4...v1.10.0)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: scipy\r\n  dependency-type: direct:production\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
            "commit_timestamp": 1689089312.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689177810.430093,
            "elapsed_time": 80.40271615982056,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e2556df80f1bcddfee9eba3a545e75ab99e40350",
            "commit_message": "Downgrade bazel to windows-2019 (#1629)\n\n* Downgrade bazel to windows-2019\r\n\r\nWindows 2022 is not well supported by bazel yet:\r\nhttps://github.com/bazelbuild/bazel/issues/18592\r\n\r\n* no windows-latest, only windows-2019 (for bazel)",
            "commit_timestamp": 1689169594.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689192244.655909,
            "elapsed_time": 91.0404884815216,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e2556df80f1bcddfee9eba3a545e75ab99e40350",
            "commit_message": "Downgrade bazel to windows-2019 (#1629)\n\n* Downgrade bazel to windows-2019\r\n\r\nWindows 2022 is not well supported by bazel yet:\r\nhttps://github.com/bazelbuild/bazel/issues/18592\r\n\r\n* no windows-latest, only windows-2019 (for bazel)",
            "commit_timestamp": 1689169594.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689206756.724544,
            "elapsed_time": 102.1533453464508,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e2556df80f1bcddfee9eba3a545e75ab99e40350",
            "commit_message": "Downgrade bazel to windows-2019 (#1629)\n\n* Downgrade bazel to windows-2019\r\n\r\nWindows 2022 is not well supported by bazel yet:\r\nhttps://github.com/bazelbuild/bazel/issues/18592\r\n\r\n* no windows-latest, only windows-2019 (for bazel)",
            "commit_timestamp": 1689169594.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689221116.990023,
            "elapsed_time": 109.8683876991272,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e2556df80f1bcddfee9eba3a545e75ab99e40350",
            "commit_message": "Downgrade bazel to windows-2019 (#1629)\n\n* Downgrade bazel to windows-2019\r\n\r\nWindows 2022 is not well supported by bazel yet:\r\nhttps://github.com/bazelbuild/bazel/issues/18592\r\n\r\n* no windows-latest, only windows-2019 (for bazel)",
            "commit_timestamp": 1689169594.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689235419.442485,
            "elapsed_time": 88.41170716285706,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e2556df80f1bcddfee9eba3a545e75ab99e40350",
            "commit_message": "Downgrade bazel to windows-2019 (#1629)\n\n* Downgrade bazel to windows-2019\r\n\r\nWindows 2022 is not well supported by bazel yet:\r\nhttps://github.com/bazelbuild/bazel/issues/18592\r\n\r\n* no windows-latest, only windows-2019 (for bazel)",
            "commit_timestamp": 1689169594.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689249910.800184,
            "elapsed_time": 117.19074630737305,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e2556df80f1bcddfee9eba3a545e75ab99e40350",
            "commit_message": "Downgrade bazel to windows-2019 (#1629)\n\n* Downgrade bazel to windows-2019\r\n\r\nWindows 2022 is not well supported by bazel yet:\r\nhttps://github.com/bazelbuild/bazel/issues/18592\r\n\r\n* no windows-latest, only windows-2019 (for bazel)",
            "commit_timestamp": 1689169594.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689264319.482504,
            "elapsed_time": 115.35779905319214,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e2556df80f1bcddfee9eba3a545e75ab99e40350",
            "commit_message": "Downgrade bazel to windows-2019 (#1629)\n\n* Downgrade bazel to windows-2019\r\n\r\nWindows 2022 is not well supported by bazel yet:\r\nhttps://github.com/bazelbuild/bazel/issues/18592\r\n\r\n* no windows-latest, only windows-2019 (for bazel)",
            "commit_timestamp": 1689169594.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689278639.319617,
            "elapsed_time": 106.9912850856781,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e2556df80f1bcddfee9eba3a545e75ab99e40350",
            "commit_message": "Downgrade bazel to windows-2019 (#1629)\n\n* Downgrade bazel to windows-2019\r\n\r\nWindows 2022 is not well supported by bazel yet:\r\nhttps://github.com/bazelbuild/bazel/issues/18592\r\n\r\n* no windows-latest, only windows-2019 (for bazel)",
            "commit_timestamp": 1689169594.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689488799.133567,
            "elapsed_time": 81.56975960731506,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689494187.926286,
            "elapsed_time": 89.20075845718384,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689500862.611093,
            "elapsed_time": 93.79068398475647,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689501851.539328,
            "elapsed_time": 98.30644941329956,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689494619.103575,
            "elapsed_time": 93.49785685539246,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689509030.309281,
            "elapsed_time": 92.07145762443542,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689523381.976304,
            "elapsed_time": 84.9319167137146,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689537823.907591,
            "elapsed_time": 78.4735906124115,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689554799.213167,
            "elapsed_time": 93.27755379676819,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689567023.031051,
            "elapsed_time": 86.07165861129761,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689581506.261048,
            "elapsed_time": 79.62328934669495,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689596146.262897,
            "elapsed_time": 107.24620270729065,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b1c4a752d123071241829f4d13f8533589f5145e",
            "commit_message": "Add tests for Human Readable functionality (#1632)\n\n* Add tests for Human Readable functionality\r\n\r\nalso fix an issue where the SI/IEC unit wasn't being correctly passed\r\nthrough.\r\n\r\n",
            "commit_timestamp": 1689339361.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689610262.92036,
            "elapsed_time": 109.60051131248474,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c5997e0a78713859be412ad1e9d7e3e933b92fc6",
            "commit_message": "Delete unused requirements file, simplify nanobind build file (#1635)\n\nThe dependencies are contained in the `pyproject.toml` since it was added.\r\n\r\nSwitches to header and source file globbing instead of manually listing\r\nthe files. The selects for different platforms are removed, as a tradeoff,\r\nwe take a single- to low double-digit hit in wheel sizes (between 5 percent\r\nzipped and 12% installed on MacOS 13.4).",
            "commit_timestamp": 1689604115.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689624566.884914,
            "elapsed_time": 93.62517142295837,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c5997e0a78713859be412ad1e9d7e3e933b92fc6",
            "commit_message": "Delete unused requirements file, simplify nanobind build file (#1635)\n\nThe dependencies are contained in the `pyproject.toml` since it was added.\r\n\r\nSwitches to header and source file globbing instead of manually listing\r\nthe files. The selects for different platforms are removed, as a tradeoff,\r\nwe take a single- to low double-digit hit in wheel sizes (between 5 percent\r\nzipped and 12% installed on MacOS 13.4).",
            "commit_timestamp": 1689604115.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689642139.971536,
            "elapsed_time": 106.89272785186768,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c5997e0a78713859be412ad1e9d7e3e933b92fc6",
            "commit_message": "Delete unused requirements file, simplify nanobind build file (#1635)\n\nThe dependencies are contained in the `pyproject.toml` since it was added.\r\n\r\nSwitches to header and source file globbing instead of manually listing\r\nthe files. The selects for different platforms are removed, as a tradeoff,\r\nwe take a single- to low double-digit hit in wheel sizes (between 5 percent\r\nzipped and 12% installed on MacOS 13.4).",
            "commit_timestamp": 1689604115.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689653383.86759,
            "elapsed_time": 97.48302626609802,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c5997e0a78713859be412ad1e9d7e3e933b92fc6",
            "commit_message": "Delete unused requirements file, simplify nanobind build file (#1635)\n\nThe dependencies are contained in the `pyproject.toml` since it was added.\r\n\r\nSwitches to header and source file globbing instead of manually listing\r\nthe files. The selects for different platforms are removed, as a tradeoff,\r\nwe take a single- to low double-digit hit in wheel sizes (between 5 percent\r\nzipped and 12% installed on MacOS 13.4).",
            "commit_timestamp": 1689604115.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689667856.426935,
            "elapsed_time": 83.7530415058136,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689682479.116277,
            "elapsed_time": 90.44177889823914,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689696598.704629,
            "elapsed_time": 69.91919565200806,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689710960.631489,
            "elapsed_time": 101.40107202529907,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689728749.895053,
            "elapsed_time": 87.9570825099945,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689740179.326645,
            "elapsed_time": 92.67523312568665,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689754247.231368,
            "elapsed_time": 96.62066507339478,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689768838.379214,
            "elapsed_time": 104.35655665397644,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689783007.97038,
            "elapsed_time": 91.07076478004456,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689797248.57293,
            "elapsed_time": 76.06372261047363,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689813539.823369,
            "elapsed_time": 104.97020053863525,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689826157.998974,
            "elapsed_time": 79.05115556716919,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689840652.9654,
            "elapsed_time": 104.30619812011719,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689855379.383917,
            "elapsed_time": 136.10769271850586,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689869359.650411,
            "elapsed_time": 87.46466279029846,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689883699.666958,
            "elapsed_time": 89.09324669837952,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689899917.734385,
            "elapsed_time": 120.97245502471924,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689912508.546423,
            "elapsed_time": 77.38013219833374,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689927048.486181,
            "elapsed_time": 97.10197877883911,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689941610.693421,
            "elapsed_time": 105.54154706001282,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689955728.04707,
            "elapsed_time": 70.01998043060303,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689970077.954654,
            "elapsed_time": 86.08953666687012,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689986332.50065,
            "elapsed_time": 108.58596754074097,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689998944.370249,
            "elapsed_time": 96.20669269561768,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690013322.204397,
            "elapsed_time": 82.49447822570801,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690027907.220148,
            "elapsed_time": 80.20918798446655,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690042128.209142,
            "elapsed_time": 91.3074951171875,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690056418.219385,
            "elapsed_time": 103.04523086547852,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690072869.06296,
            "elapsed_time": 92.24555373191833,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690085389.3225,
            "elapsed_time": 100.58786201477051,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690099722.779781,
            "elapsed_time": 79.70690178871155,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690114311.498727,
            "elapsed_time": 90.0843620300293,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690128471.166578,
            "elapsed_time": 77.33970546722412,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690142817.106655,
            "elapsed_time": 82.82430219650269,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690159072.741303,
            "elapsed_time": 77.46864748001099,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690171796.646295,
            "elapsed_time": 84.68223571777344,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690186287.884553,
            "elapsed_time": 92.0941834449768,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690200868.366872,
            "elapsed_time": 102.95219135284424,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690215004.702356,
            "elapsed_time": 129.4171862602234,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690229156.956974,
            "elapsed_time": 81.6211850643158,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690245589.672798,
            "elapsed_time": 94.22263169288635,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690258185.507787,
            "elapsed_time": 97.77977323532104,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690272672.184368,
            "elapsed_time": 87.92705035209656,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690287265.943208,
            "elapsed_time": 88.1337320804596,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690301388.971118,
            "elapsed_time": 100.23942422866821,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690315718.670391,
            "elapsed_time": 89.98371696472168,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690332074.79021,
            "elapsed_time": 118.03724455833435,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690344532.80017,
            "elapsed_time": 85.92538094520569,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690359060.611612,
            "elapsed_time": 98.31286668777466,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690373620.931378,
            "elapsed_time": 96.40478777885437,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690387755.907999,
            "elapsed_time": 73.40410351753235,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690402152.811636,
            "elapsed_time": 89.53793334960938,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690418161.546397,
            "elapsed_time": 102.97997450828552,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690430942.167721,
            "elapsed_time": 86.02165722846985,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690445387.629729,
            "elapsed_time": 84.95047807693481,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690459935.056719,
            "elapsed_time": 97.7868287563324,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690474177.85655,
            "elapsed_time": 102.9459764957428,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690488470.334316,
            "elapsed_time": 93.580983877182,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690504577.849089,
            "elapsed_time": 99.84983348846436,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690517339.660201,
            "elapsed_time": 85.13930153846741,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690531834.748757,
            "elapsed_time": 87.05229806900024,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690546419.809784,
            "elapsed_time": 89.23930549621582,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690560605.678222,
            "elapsed_time": 111.20083546638489,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690574950.890125,
            "elapsed_time": 98.12034511566162,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690590916.979865,
            "elapsed_time": 104.75122046470642,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690603677.878912,
            "elapsed_time": 71.92685961723328,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690618131.168177,
            "elapsed_time": 79.33404850959778,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690632698.311176,
            "elapsed_time": 88.16727924346924,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690646885.256018,
            "elapsed_time": 81.3654408454895,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690661231.839808,
            "elapsed_time": 103.21244883537292,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690677552.591775,
            "elapsed_time": 82.2529764175415,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690690098.406648,
            "elapsed_time": 76.99146628379822,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690704524.939081,
            "elapsed_time": 91.97257018089294,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690719147.692167,
            "elapsed_time": 91.53721213340759,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690733270.836687,
            "elapsed_time": 84.82469153404236,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690747611.49722,
            "elapsed_time": 85.930655002594,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690763815.893567,
            "elapsed_time": 84.48846197128296,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690776206.606151,
            "elapsed_time": 78.39685678482056,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690790676.57662,
            "elapsed_time": 118.09388899803162,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "27d64a2351b98d48dd5b18c75ff536982a4ce26a",
            "commit_message": "Update bzlmod support to new rules_python extension API (#1633)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1689666054.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690805067.97111,
            "elapsed_time": 110.37508797645569,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8f7b8dd9a3211e6043e742a383ccb35eb810829f",
            "commit_message": "Re-enable windows-latest tests for newer Bazel (#1641)\n\nThe Windows toolchain detection fix made it into Bazel 6.3.0, so the CI\r\nshould work again with the re-enabled `windows-latest` marker.\r\n\r\nRequire Bazel 6.3.0 in the Linux container setup in `cibuildwheel`.",
            "commit_timestamp": 1690797097.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690819452.050017,
            "elapsed_time": 105.40406727790833,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71ad1856fd107877b3341d8f4db4588d0b3dea7d",
            "commit_message": "Fix `-Werror,-Wold-style-cast` build failure on Windows. (#1637)\n\n* Fix `-Werror,-Wold-style-cast` build failure on Windows.\r\n\r\n* Fix parentheses.\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690812874.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690833793.851832,
            "elapsed_time": 103.58560013771057,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "6e80474e62181079236f8820f92bef445d02bbce",
            "commit_message": "Mark internal deps as dev_depenencies so that downstream modules don't require those. (#1640)\n\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690820607.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690848293.338032,
            "elapsed_time": 79.5046603679657,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "6e80474e62181079236f8820f92bef445d02bbce",
            "commit_message": "Mark internal deps as dev_depenencies so that downstream modules don't require those. (#1640)\n\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690820607.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690862583.413435,
            "elapsed_time": 90.11750030517578,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "6e80474e62181079236f8820f92bef445d02bbce",
            "commit_message": "Mark internal deps as dev_depenencies so that downstream modules don't require those. (#1640)\n\nCo-authored-by: Andy Christiansen <achristiansen@google.com>\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690820607.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690877055.967302,
            "elapsed_time": 100.15617942810059,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690891442.451906,
            "elapsed_time": 96.07212686538696,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690905883.047131,
            "elapsed_time": 100.53655505180359,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690920256.552995,
            "elapsed_time": 110.6937506198883,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690934726.408,
            "elapsed_time": 124.6252646446228,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690948988.995502,
            "elapsed_time": 85.65156769752502,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690963405.759818,
            "elapsed_time": 87.32426524162292,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690977835.003415,
            "elapsed_time": 100.38529419898987,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1690992597.866793,
            "elapsed_time": 103.74544167518616,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691006663.06537,
            "elapsed_time": 114.51580882072449,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691021158.07785,
            "elapsed_time": 105.39087200164795,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691035342.08555,
            "elapsed_time": 79.25629496574402,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691049844.014781,
            "elapsed_time": 108.98523187637329,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691064259.020665,
            "elapsed_time": 91.92318844795227,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691078656.650131,
            "elapsed_time": 101.88730978965759,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691093057.561021,
            "elapsed_time": 106.10585641860962,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691107541.813429,
            "elapsed_time": 98.90783476829529,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691121758.160875,
            "elapsed_time": 81.8609127998352,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691136267.52623,
            "elapsed_time": 102.19151735305786,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691150679.706379,
            "elapsed_time": 100.66281318664551,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691164967.351366,
            "elapsed_time": 80.83874702453613,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691179398.517286,
            "elapsed_time": 104.92519688606262,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691193923.247755,
            "elapsed_time": 99.81845617294312,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691208198.874059,
            "elapsed_time": 87.51580858230591,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691222559.850392,
            "elapsed_time": 94.72833728790283,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691237021.240909,
            "elapsed_time": 81.62289309501648,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691251439.509929,
            "elapsed_time": 114.09617781639099,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691265788.657025,
            "elapsed_time": 90.14483046531677,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691280293.551977,
            "elapsed_time": 80.64986252784729,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691294599.944719,
            "elapsed_time": 92.86779999732971,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691309006.833496,
            "elapsed_time": 89.18151998519897,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691323430.550342,
            "elapsed_time": 86.28855085372925,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691337813.59667,
            "elapsed_time": 100.84837007522583,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691352224.417626,
            "elapsed_time": 84.12138509750366,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691366720.093193,
            "elapsed_time": 82.32182788848877,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691381023.851892,
            "elapsed_time": 106.97388482093811,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691395475.822122,
            "elapsed_time": 109.02611207962036,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691409859.616292,
            "elapsed_time": 97.71548366546631,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691424250.535395,
            "elapsed_time": 101.83094120025635,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691438608.369939,
            "elapsed_time": 81.20557165145874,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691453128.475733,
            "elapsed_time": 109.44393563270569,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691467431.179274,
            "elapsed_time": 97.91609287261963,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691481846.031633,
            "elapsed_time": 91.2449254989624,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691496181.855504,
            "elapsed_time": 85.76239085197449,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691510616.392261,
            "elapsed_time": 76.73731303215027,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691525084.448221,
            "elapsed_time": 111.19532775878906,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691539507.816064,
            "elapsed_time": 88.4618546962738,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691553784.816095,
            "elapsed_time": 80.57454752922058,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691568332.749938,
            "elapsed_time": 97.40319538116455,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691582713.981129,
            "elapsed_time": 100.4456479549408,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691597075.75908,
            "elapsed_time": 125.9735312461853,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691611387.310238,
            "elapsed_time": 86.18223524093628,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691625933.44405,
            "elapsed_time": 109.25891160964966,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691640228.046685,
            "elapsed_time": 116.5865068435669,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691654682.219548,
            "elapsed_time": 132.21231365203857,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "02a354f3f323ae8256948e1dc77ddcb1dfc297da",
            "commit_message": "bug: Inconsistent suffixes console reporter 1009 (#1631)\n\n\r\n* removed appendHumanReadable as it was not used anywhere\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1690876029.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691669070.457662,
            "elapsed_time": 86.01377701759338,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "14961f1cb69edf47fb1b31986be01c554f36bc2c",
            "commit_message": "Fix IntelLLVM compiler error (#1644)\n\n* add -fno-finite-math-only for IntelLLVM\r\n",
            "commit_timestamp": 1691659990.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691683415.117917,
            "elapsed_time": 100.22475337982178,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "14961f1cb69edf47fb1b31986be01c554f36bc2c",
            "commit_message": "Fix IntelLLVM compiler error (#1644)\n\n* add -fno-finite-math-only for IntelLLVM\r\n",
            "commit_timestamp": 1691659990.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691697785.667396,
            "elapsed_time": 82.45156598091125,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "14961f1cb69edf47fb1b31986be01c554f36bc2c",
            "commit_message": "Fix IntelLLVM compiler error (#1644)\n\n* add -fno-finite-math-only for IntelLLVM\r\n",
            "commit_timestamp": 1691659990.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691712320.167085,
            "elapsed_time": 95.29754304885864,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "14961f1cb69edf47fb1b31986be01c554f36bc2c",
            "commit_message": "Fix IntelLLVM compiler error (#1644)\n\n* add -fno-finite-math-only for IntelLLVM\r\n",
            "commit_timestamp": 1691659990.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691726635.074405,
            "elapsed_time": 95.52358913421631,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "14961f1cb69edf47fb1b31986be01c554f36bc2c",
            "commit_message": "Fix IntelLLVM compiler error (#1644)\n\n* add -fno-finite-math-only for IntelLLVM\r\n",
            "commit_timestamp": 1691659990.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691741010.964115,
            "elapsed_time": 83.02392530441284,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "14961f1cb69edf47fb1b31986be01c554f36bc2c",
            "commit_message": "Fix IntelLLVM compiler error (#1644)\n\n* add -fno-finite-math-only for IntelLLVM\r\n",
            "commit_timestamp": 1691659990.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691755525.583773,
            "elapsed_time": 95.99155020713806,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1c64a36c5b8ee75d462b3fe7a9d020c66a2a1094",
            "commit_message": "[perf-counters] Fix pause/resume (#1643)\n\n* [perf-counters] Fix pause/resume\r\n\r\nUsing `state.PauseTiming() / state.ResumeTiming()` was broken.\r\n\r\nThanks [@virajbshah] for the the repro testcase.\r\n\r\n* ran clang-format over the whole perf_counters_test.cc\r\n\r\n* Remove check that perf counters are 0 on `Pause`, since `Pause`/`Resume`\r\nsequences would cause a non-0 counter value\r\n\r\n* both upper and lower bound for the with/without resume counters\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1691754396.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691769865.310706,
            "elapsed_time": 99.30804538726807,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1c64a36c5b8ee75d462b3fe7a9d020c66a2a1094",
            "commit_message": "[perf-counters] Fix pause/resume (#1643)\n\n* [perf-counters] Fix pause/resume\r\n\r\nUsing `state.PauseTiming() / state.ResumeTiming()` was broken.\r\n\r\nThanks [@virajbshah] for the the repro testcase.\r\n\r\n* ran clang-format over the whole perf_counters_test.cc\r\n\r\n* Remove check that perf counters are 0 on `Pause`, since `Pause`/`Resume`\r\nsequences would cause a non-0 counter value\r\n\r\n* both upper and lower bound for the with/without resume counters\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1691754396.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691784232.72057,
            "elapsed_time": 96.87949585914612,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1c64a36c5b8ee75d462b3fe7a9d020c66a2a1094",
            "commit_message": "[perf-counters] Fix pause/resume (#1643)\n\n* [perf-counters] Fix pause/resume\r\n\r\nUsing `state.PauseTiming() / state.ResumeTiming()` was broken.\r\n\r\nThanks [@virajbshah] for the the repro testcase.\r\n\r\n* ran clang-format over the whole perf_counters_test.cc\r\n\r\n* Remove check that perf counters are 0 on `Pause`, since `Pause`/`Resume`\r\nsequences would cause a non-0 counter value\r\n\r\n* both upper and lower bound for the with/without resume counters\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1691754396.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691798708.458145,
            "elapsed_time": 98.71579194068909,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1c64a36c5b8ee75d462b3fe7a9d020c66a2a1094",
            "commit_message": "[perf-counters] Fix pause/resume (#1643)\n\n* [perf-counters] Fix pause/resume\r\n\r\nUsing `state.PauseTiming() / state.ResumeTiming()` was broken.\r\n\r\nThanks [@virajbshah] for the the repro testcase.\r\n\r\n* ran clang-format over the whole perf_counters_test.cc\r\n\r\n* Remove check that perf counters are 0 on `Pause`, since `Pause`/`Resume`\r\nsequences would cause a non-0 counter value\r\n\r\n* both upper and lower bound for the with/without resume counters\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1691754396.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691813037.375239,
            "elapsed_time": 111.41922044754028,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1c64a36c5b8ee75d462b3fe7a9d020c66a2a1094",
            "commit_message": "[perf-counters] Fix pause/resume (#1643)\n\n* [perf-counters] Fix pause/resume\r\n\r\nUsing `state.PauseTiming() / state.ResumeTiming()` was broken.\r\n\r\nThanks [@virajbshah] for the the repro testcase.\r\n\r\n* ran clang-format over the whole perf_counters_test.cc\r\n\r\n* Remove check that perf counters are 0 on `Pause`, since `Pause`/`Resume`\r\nsequences would cause a non-0 counter value\r\n\r\n* both upper and lower bound for the with/without resume counters\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1691754396.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691827423.03061,
            "elapsed_time": 85.81324791908264,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1c64a36c5b8ee75d462b3fe7a9d020c66a2a1094",
            "commit_message": "[perf-counters] Fix pause/resume (#1643)\n\n* [perf-counters] Fix pause/resume\r\n\r\nUsing `state.PauseTiming() / state.ResumeTiming()` was broken.\r\n\r\nThanks [@virajbshah] for the the repro testcase.\r\n\r\n* ran clang-format over the whole perf_counters_test.cc\r\n\r\n* Remove check that perf counters are 0 on `Pause`, since `Pause`/`Resume`\r\nsequences would cause a non-0 counter value\r\n\r\n* both upper and lower bound for the with/without resume counters\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1691754396.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691841823.933309,
            "elapsed_time": 80.36809492111206,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1c64a36c5b8ee75d462b3fe7a9d020c66a2a1094",
            "commit_message": "[perf-counters] Fix pause/resume (#1643)\n\n* [perf-counters] Fix pause/resume\r\n\r\nUsing `state.PauseTiming() / state.ResumeTiming()` was broken.\r\n\r\nThanks [@virajbshah] for the the repro testcase.\r\n\r\n* ran clang-format over the whole perf_counters_test.cc\r\n\r\n* Remove check that perf counters are 0 on `Pause`, since `Pause`/`Resume`\r\nsequences would cause a non-0 counter value\r\n\r\n* both upper and lower bound for the with/without resume counters\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1691754396.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691856202.922768,
            "elapsed_time": 97.32101941108704,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1c64a36c5b8ee75d462b3fe7a9d020c66a2a1094",
            "commit_message": "[perf-counters] Fix pause/resume (#1643)\n\n* [perf-counters] Fix pause/resume\r\n\r\nUsing `state.PauseTiming() / state.ResumeTiming()` was broken.\r\n\r\nThanks [@virajbshah] for the the repro testcase.\r\n\r\n* ran clang-format over the whole perf_counters_test.cc\r\n\r\n* Remove check that perf counters are 0 on `Pause`, since `Pause`/`Resume`\r\nsequences would cause a non-0 counter value\r\n\r\n* both upper and lower bound for the with/without resume counters\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1691754396.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1691870578.400779,
            "elapsed_time": 82.3353271484375,
            "x64": false,
            "actual_files_count": 91,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1c64a36c5b8ee75d462b3fe7a9d020c66a2a1094",
            "commit_message": "[perf-counters] Fix pause/resume (#1643)\n\n* [perf-counters] Fix pause/resume\r\n\r\nUsing `state.PauseTiming() / state.ResumeTiming()` was broken.\r\n\r\nThanks [@virajbshah] for the the repro testcase.\r\n\r\n* ran clang-format over the whole perf_counters_test.cc\r\n\r\n* Remove check that perf counters are 0 on `Pause`, since `Pause`/`Resume`\r\nsequences would cause a non-0 counter value\r\n\r\n* both upper and lower bound for the with/without resume counters\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1691754396.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695376571.995977,
            "elapsed_time": 94.68400001525879,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695389868.938135,
            "elapsed_time": 83.3016152381897,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695384303.078946,
            "elapsed_time": 136.87157082557678,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695398650.956662,
            "elapsed_time": 96.98714566230774,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695413006.607829,
            "elapsed_time": 88.23863649368286,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695427496.133149,
            "elapsed_time": 99.55558943748474,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695441831.322408,
            "elapsed_time": 89.56911778450012,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695456253.418436,
            "elapsed_time": 95.70665788650513,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695470641.702141,
            "elapsed_time": 89.86870193481445,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695485014.050348,
            "elapsed_time": 83.70890998840332,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695499446.791041,
            "elapsed_time": 81.108642578125,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695513927.292153,
            "elapsed_time": 98.45382118225098,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695528176.623462,
            "elapsed_time": 81.58113121986389,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695542621.019855,
            "elapsed_time": 95.82495737075806,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695557002.940261,
            "elapsed_time": 82.03408670425415,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695571445.707095,
            "elapsed_time": 97.55678796768188,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695585771.239551,
            "elapsed_time": 92.08534646034241,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695600299.934081,
            "elapsed_time": 97.16155338287354,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695614635.642152,
            "elapsed_time": 91.74260973930359,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695629031.766795,
            "elapsed_time": 110.86341214179993,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695643482.027486,
            "elapsed_time": 89.41675329208374,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695657851.087797,
            "elapsed_time": 101.79568147659302,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695672185.944068,
            "elapsed_time": 81.37642621994019,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695686801.549882,
            "elapsed_time": 131.85361218452454,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695700982.079748,
            "elapsed_time": 79.40131521224976,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695715422.621544,
            "elapsed_time": 81.87746167182922,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "344117638c8ff7e239044fd0fa7085839fc03021",
            "commit_message": "bump version to 1.8.3\n",
            "commit_timestamp": 1693484210.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695729819.511227,
            "elapsed_time": 83.32428693771362,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c9106a79fa2aae95bc3c790f0b3aa1cf8a27b86f",
            "commit_message": "Audit MSVC references in cmake files to consider clang++ (#1669)\n\nThere are three major compilers on Windows targeting the MSVC ABI (i.e.\r\nlinking with microsofts STL etc.):\r\n  - `MSVC`\r\n  - `clang-cl` aka clang with the MSVC compatible CLI\r\n  - `clang++` aka clang with gcc compatible CLI\r\n\r\nThe cmake variable `MSVC` is only set for the first two as it defined in\r\nterms of the CLI interface provided:\r\n\r\n> Set to true when the compiler is some version of Microsoft Visual\r\n> C++ or another compiler simulating the Visual C++ cl command-line syntax.\r\n\r\n(from cmake docs)\r\n\r\nFor many of the tests in the library its the ABI that matters not the\r\ncmdline, so check `CMAKE_CXX_SIMULATE_ID` too, if it is `MSVC` the\r\ncurrent compiler is targeting the MSVC ABI. This handles `clang++`",
            "commit_timestamp": 1695727884.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695744239.124288,
            "elapsed_time": 98.62209796905518,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695758671.344909,
            "elapsed_time": 115.91560220718384,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695773119.439952,
            "elapsed_time": 83.80353093147278,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695787470.496982,
            "elapsed_time": 100.14995336532593,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695801796.158093,
            "elapsed_time": 96.09539699554443,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695816267.327563,
            "elapsed_time": 114.27565050125122,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695830629.132942,
            "elapsed_time": 96.28228282928467,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695844968.321687,
            "elapsed_time": 93.27287554740906,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695859490.167551,
            "elapsed_time": 87.0835382938385,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695873795.601317,
            "elapsed_time": 86.8394103050232,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695888236.674158,
            "elapsed_time": 99.59758734703064,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695902634.287569,
            "elapsed_time": 105.17519927024841,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695917023.380697,
            "elapsed_time": 91.64912867546082,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695931576.761035,
            "elapsed_time": 116.34912014007568,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695945933.579413,
            "elapsed_time": 88.12743735313416,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695960311.838313,
            "elapsed_time": 112.52065086364746,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695974658.256751,
            "elapsed_time": 94.08813047409058,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695989063.825213,
            "elapsed_time": 100.85236811637878,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696003422.932635,
            "elapsed_time": 93.70752787590027,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696017815.453988,
            "elapsed_time": 105.6851851940155,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696032313.287817,
            "elapsed_time": 89.90345430374146,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696046605.833702,
            "elapsed_time": 100.67610144615173,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696061030.20877,
            "elapsed_time": 108.67054605484009,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696075358.939897,
            "elapsed_time": 76.18796825408936,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696089831.391603,
            "elapsed_time": 99.66963768005371,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696104244.306671,
            "elapsed_time": 89.91163849830627,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696118734.814637,
            "elapsed_time": 70.21184206008911,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696133006.353928,
            "elapsed_time": 76.30245161056519,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696147440.7723,
            "elapsed_time": 80.66721439361572,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696161786.183698,
            "elapsed_time": 79.7696442604065,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696176190.125873,
            "elapsed_time": 79.94433546066284,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696190613.504282,
            "elapsed_time": 79.25473713874817,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696205140.817022,
            "elapsed_time": 93.32708501815796,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696219451.62682,
            "elapsed_time": 111.19749093055725,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696233775.803549,
            "elapsed_time": 64.83114409446716,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696248284.069665,
            "elapsed_time": 96.80282616615295,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696262606.150344,
            "elapsed_time": 84.18304681777954,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696277039.733035,
            "elapsed_time": 89.85464787483215,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696291531.922883,
            "elapsed_time": 94.24106097221375,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696305834.297491,
            "elapsed_time": 90.49180698394775,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696320222.60839,
            "elapsed_time": 77.29630851745605,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696334610.163668,
            "elapsed_time": 107.36040139198303,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696349026.784343,
            "elapsed_time": 88.91542029380798,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696363421.594418,
            "elapsed_time": 80.91489791870117,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696377941.87053,
            "elapsed_time": 76.91417932510376,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696392185.067441,
            "elapsed_time": 67.68122124671936,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696406666.282221,
            "elapsed_time": 113.04086899757385,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696421043.178402,
            "elapsed_time": 98.69430637359619,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696435435.151888,
            "elapsed_time": 93.44172048568726,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696449823.119564,
            "elapsed_time": 109.59026861190796,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696464347.638832,
            "elapsed_time": 98.05410766601562,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696478634.676457,
            "elapsed_time": 76.92045903205872,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696492996.462061,
            "elapsed_time": 99.976979970932,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696507421.175383,
            "elapsed_time": 82.85560274124146,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696521850.38997,
            "elapsed_time": 129.6147301197052,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696536195.466717,
            "elapsed_time": 76.66265439987183,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696550742.446406,
            "elapsed_time": 104.36168599128723,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696565075.584306,
            "elapsed_time": 101.88666224479675,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696579402.669645,
            "elapsed_time": 80.9216775894165,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696593858.452418,
            "elapsed_time": 107.24808955192566,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696608303.92239,
            "elapsed_time": 100.63928389549255,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696622611.206427,
            "elapsed_time": 92.96796154975891,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696637123.872575,
            "elapsed_time": 97.68832778930664,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696651428.693485,
            "elapsed_time": 104.94458365440369,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696665823.611739,
            "elapsed_time": 91.2341639995575,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696679345.941408,
            "elapsed_time": 89.73898673057556,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696678629.569497,
            "elapsed_time": 107.79469442367554,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696680191.913695,
            "elapsed_time": 77.17455887794495,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696694575.147132,
            "elapsed_time": 89.08960771560669,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696709001.902412,
            "elapsed_time": 92.6419460773468,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696723493.772824,
            "elapsed_time": 88.710773229599,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696737824.810281,
            "elapsed_time": 86.15877556800842,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696752210.891816,
            "elapsed_time": 84.33809280395508,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7736df03049c362c7275f7573de6d6a685630e0a",
            "commit_message": "Make json and csv output consistent. (#1662)\n\n* Make json and csv output consistent.\r\n\r\nCurrently, the --benchmark_format=csv option does not output the correct value for the cv statistics. Also, the json output should not contain a time unit for the cv statistics.\r\n\r\n* fix formatting\r\n\r\n* undo json change\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1695732203.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696766614.991849,
            "elapsed_time": 87.13903784751892,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696795404.325616,
            "elapsed_time": 85.72390961647034,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696809926.707756,
            "elapsed_time": 103.1588659286499,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696824267.461595,
            "elapsed_time": 100.24084901809692,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696838640.210397,
            "elapsed_time": 78.52194142341614,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696853026.412869,
            "elapsed_time": 103.06770086288452,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696867513.65327,
            "elapsed_time": 117.25850319862366,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696881830.354848,
            "elapsed_time": 101.34559965133667,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696896308.466115,
            "elapsed_time": 99.06170344352722,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696910651.909674,
            "elapsed_time": 110.31830549240112,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696925082.969519,
            "elapsed_time": 100.61500859260559,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696939472.914988,
            "elapsed_time": 92.92349052429199,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696953824.435584,
            "elapsed_time": 95.27882480621338,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696968239.138395,
            "elapsed_time": 98.49145293235779,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696982744.902067,
            "elapsed_time": 100.49001836776733,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696996987.520414,
            "elapsed_time": 82.7191059589386,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697011505.977266,
            "elapsed_time": 93.82024645805359,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697025920.219563,
            "elapsed_time": 95.59927797317505,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697040240.125085,
            "elapsed_time": 100.74803829193115,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697054605.311828,
            "elapsed_time": 77.0753984451294,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697069101.978813,
            "elapsed_time": 99.46327352523804,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697083380.702047,
            "elapsed_time": 89.78029990196228,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697097875.070942,
            "elapsed_time": 110.07445859909058,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697112224.771671,
            "elapsed_time": 92.99118685722351,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697126659.798072,
            "elapsed_time": 111.63163447380066,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697141055.528159,
            "elapsed_time": 112.42148804664612,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697155543.814138,
            "elapsed_time": 101.47869658470154,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697169788.869761,
            "elapsed_time": 73.71353650093079,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697184232.619711,
            "elapsed_time": 95.91233396530151,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697198669.792423,
            "elapsed_time": 104.42747116088867,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd",
            "commit_message": "correct cli param in docs",
            "commit_timestamp": 1696759726.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697213037.364981,
            "elapsed_time": 106.7496612071991,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697227405.408394,
            "elapsed_time": 87.40046787261963,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697241907.301214,
            "elapsed_time": 90.05654859542847,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697256220.097361,
            "elapsed_time": 94.12675380706787,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697270614.389229,
            "elapsed_time": 83.85080862045288,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697285023.351335,
            "elapsed_time": 85.68618750572205,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697299358.202315,
            "elapsed_time": 70.02816224098206,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697313799.242483,
            "elapsed_time": 77.65203189849854,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697328255.748769,
            "elapsed_time": 82.60257244110107,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697342568.936496,
            "elapsed_time": 79.92545461654663,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697357000.042662,
            "elapsed_time": 77.9475531578064,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20231007.121338-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697365522.573653,
            "elapsed_time": 77.2383770942688,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697367227.818668,
            "elapsed_time": 73.57594037055969,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697371437.500317,
            "elapsed_time": 88.59792709350586,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697383926.493509,
            "elapsed_time": 69.71405076980591,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697387013.893012,
            "elapsed_time": 85.27944087982178,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697385801.966692,
            "elapsed_time": 81.47176742553711,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697400234.672453,
            "elapsed_time": 87.16797471046448,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697414710.161059,
            "elapsed_time": 96.6454668045044,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697428974.907775,
            "elapsed_time": 77.02490568161011,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697443451.70085,
            "elapsed_time": 110.27220058441162,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697457856.802232,
            "elapsed_time": 102.27751398086548,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "682153afda11d0d376413abfac2e81552a6e7b0f",
            "commit_message": "Update bazel.yml (#1671)\n\nUpdated actions/checkout@v4\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697209160.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697472288.894336,
            "elapsed_time": 106.05237317085266,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ea3c3f983b8d7d67acf98ea090eae57a0130434e",
            "commit_message": "Fix building on MinGW: default `WINVER` is too old (#1681)\n\nMinGW defaults `WINVER` to something very old,\r\nwhile benchmark requires features gated by `WINVER = 0x0600`,\r\nso manually set update to that.",
            "commit_timestamp": 1697469557.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697486623.526343,
            "elapsed_time": 85.27805042266846,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ea3c3f983b8d7d67acf98ea090eae57a0130434e",
            "commit_message": "Fix building on MinGW: default `WINVER` is too old (#1681)\n\nMinGW defaults `WINVER` to something very old,\r\nwhile benchmark requires features gated by `WINVER = 0x0600`,\r\nso manually set update to that.",
            "commit_timestamp": 1697469557.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697501126.719052,
            "elapsed_time": 95.23804569244385,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ea3c3f983b8d7d67acf98ea090eae57a0130434e",
            "commit_message": "Fix building on MinGW: default `WINVER` is too old (#1681)\n\nMinGW defaults `WINVER` to something very old,\r\nwhile benchmark requires features gated by `WINVER = 0x0600`,\r\nso manually set update to that.",
            "commit_timestamp": 1697469557.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697515426.659082,
            "elapsed_time": 110.76006293296814,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ea3c3f983b8d7d67acf98ea090eae57a0130434e",
            "commit_message": "Fix building on MinGW: default `WINVER` is too old (#1681)\n\nMinGW defaults `WINVER` to something very old,\r\nwhile benchmark requires features gated by `WINVER = 0x0600`,\r\nso manually set update to that.",
            "commit_timestamp": 1697469557.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697529808.4135,
            "elapsed_time": 84.59156727790833,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ea3c3f983b8d7d67acf98ea090eae57a0130434e",
            "commit_message": "Fix building on MinGW: default `WINVER` is too old (#1681)\n\nMinGW defaults `WINVER` to something very old,\r\nwhile benchmark requires features gated by `WINVER = 0x0600`,\r\nso manually set update to that.",
            "commit_timestamp": 1697469557.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697544182.988773,
            "elapsed_time": 83.06860733032227,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ea3c3f983b8d7d67acf98ea090eae57a0130434e",
            "commit_message": "Fix building on MinGW: default `WINVER` is too old (#1681)\n\nMinGW defaults `WINVER` to something very old,\r\nwhile benchmark requires features gated by `WINVER = 0x0600`,\r\nso manually set update to that.",
            "commit_timestamp": 1697469557.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697558573.861432,
            "elapsed_time": 87.22653269767761,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "365bf7602b569b97e8c35ab34fb0350563959ca3",
            "commit_message": "fix format in src/sysinfo\n",
            "commit_timestamp": 1697557822.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697572978.512011,
            "elapsed_time": 85.40162968635559,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697587614.680642,
            "elapsed_time": 124.62224054336548,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697601872.118344,
            "elapsed_time": 83.35135889053345,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697616247.229829,
            "elapsed_time": 95.20376467704773,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697630679.906644,
            "elapsed_time": 115.49654746055603,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697648441.604155,
            "elapsed_time": 89.00533890724182,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697645019.095672,
            "elapsed_time": 94.88874411582947,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697659477.329466,
            "elapsed_time": 102.24058961868286,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697673865.751924,
            "elapsed_time": 77.75671172142029,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697688172.080481,
            "elapsed_time": 71.62793588638306,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697702591.144501,
            "elapsed_time": 93.07373118400574,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697717001.865948,
            "elapsed_time": 89.0313036441803,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697731397.886819,
            "elapsed_time": 74.0477204322815,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697745836.577413,
            "elapsed_time": 89.2159595489502,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697760328.318294,
            "elapsed_time": 105.77949905395508,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697774706.690061,
            "elapsed_time": 111.20754098892212,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697789036.512603,
            "elapsed_time": 88.83538341522217,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697803460.889389,
            "elapsed_time": 91.6427161693573,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "f30c99a7c861e8cabc6d3d9c0b60a4f218c7f87a",
            "commit_message": "Increase the kMaxIterations limit (#1668)\n\n* Increase the kMaxIterations limit\r\n\r\nThis fixes #1663. Note that as a result of this change, the columns in the console output can become misaligned if the actual iteration count is too high. This will be dealt with in a separate commit.\r\n\r\n* Fix failing test on Windows\r\n\r\n* Fix formatting\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1697559239.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697817839.442661,
            "elapsed_time": 92.64122772216797,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20231013.113827-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697825905.381216,
            "elapsed_time": 85.35231733322144,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697826778.63351,
            "elapsed_time": 90.35011291503906,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697832227.199831,
            "elapsed_time": 99.9493453502655,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697846710.379358,
            "elapsed_time": 86.13528752326965,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697861106.124298,
            "elapsed_time": 96.61311769485474,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697875358.470805,
            "elapsed_time": 81.03344655036926,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697889804.679089,
            "elapsed_time": 73.33411383628845,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697904231.200045,
            "elapsed_time": 92.24020600318909,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697918588.835556,
            "elapsed_time": 82.79528284072876,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697933077.362743,
            "elapsed_time": 81.04918241500854,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697947366.455607,
            "elapsed_time": 68.29002618789673,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697961772.986068,
            "elapsed_time": 80.07457566261292,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697976269.888602,
            "elapsed_time": 104.67910695075989,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697990611.303482,
            "elapsed_time": 82.4561460018158,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698005012.473785,
            "elapsed_time": 77.31195712089539,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7495f83e2a6e1aa69592fcda6e5c6c1b0b4fa118",
            "commit_message": "Set -Wno-unused-variable for tests (#1682)\n\nWe  used assert() a lot in tests and that can cause build breakages in some of the opt builds (since assert() are removed)\r\n\r\nit's not practical to sprinkle \"(void)\" everywhere so I think setting this warning option is the best option for now.",
            "commit_timestamp": 1697806292.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698074834.076913,
            "elapsed_time": 110.10365533828735,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "5893034e46da730ba9e8ecdc27fe77745fb1511f",
            "commit_message": "Add Python 3.12 support (#1676)\n\n* Add Python 3.12 support tag\r\n\r\n* Bump nanobind to latest stable v1.6.2 tag\r\n\r\n* Add PyPI trusted publishing to GitHub workflow, add Python 3.12 wheel builds\r\n\r\nTrusted publishing has been available since v1.8.0 of the pypa-publish\r\naction. It enables password-less authentication and wheel uploads from\r\nthe wheel upload job.\r\n\r\n`cibuildwheel` was bumped to v2.16.2 to allow Python 3.12 wheel builds.\r\n\r\nMore info on trusted publishing:\r\nhttps://github.com/marketplace/actions/pypi-publish#trusted-publishing\r\n\r\nThe Windows distribution was reverted to `latest` in the OS matrix,\r\nsince the discovery problem of MSVC was fixed in a Bazel patch release.\r\n\r\n* Bump nanobind to stable v1.7.0 tag",
            "commit_timestamp": 1698062679.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698077093.67522,
            "elapsed_time": 85.15237307548523,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "5893034e46da730ba9e8ecdc27fe77745fb1511f",
            "commit_message": "Add Python 3.12 support (#1676)\n\n* Add Python 3.12 support tag\r\n\r\n* Bump nanobind to latest stable v1.6.2 tag\r\n\r\n* Add PyPI trusted publishing to GitHub workflow, add Python 3.12 wheel builds\r\n\r\nTrusted publishing has been available since v1.8.0 of the pypa-publish\r\naction. It enables password-less authentication and wheel uploads from\r\nthe wheel upload job.\r\n\r\n`cibuildwheel` was bumped to v2.16.2 to allow Python 3.12 wheel builds.\r\n\r\nMore info on trusted publishing:\r\nhttps://github.com/marketplace/actions/pypi-publish#trusted-publishing\r\n\r\nThe Windows distribution was reverted to `latest` in the OS matrix,\r\nsince the discovery problem of MSVC was fixed in a Bazel patch release.\r\n\r\n* Bump nanobind to stable v1.7.0 tag",
            "commit_timestamp": 1698062679.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698091532.365507,
            "elapsed_time": 121.90669441223145,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "5893034e46da730ba9e8ecdc27fe77745fb1511f",
            "commit_message": "Add Python 3.12 support (#1676)\n\n* Add Python 3.12 support tag\r\n\r\n* Bump nanobind to latest stable v1.6.2 tag\r\n\r\n* Add PyPI trusted publishing to GitHub workflow, add Python 3.12 wheel builds\r\n\r\nTrusted publishing has been available since v1.8.0 of the pypa-publish\r\naction. It enables password-less authentication and wheel uploads from\r\nthe wheel upload job.\r\n\r\n`cibuildwheel` was bumped to v2.16.2 to allow Python 3.12 wheel builds.\r\n\r\nMore info on trusted publishing:\r\nhttps://github.com/marketplace/actions/pypi-publish#trusted-publishing\r\n\r\nThe Windows distribution was reverted to `latest` in the OS matrix,\r\nsince the discovery problem of MSVC was fixed in a Bazel patch release.\r\n\r\n* Bump nanobind to stable v1.7.0 tag",
            "commit_timestamp": 1698062679.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698105931.788197,
            "elapsed_time": 79.67844033241272,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "5893034e46da730ba9e8ecdc27fe77745fb1511f",
            "commit_message": "Add Python 3.12 support (#1676)\n\n* Add Python 3.12 support tag\r\n\r\n* Bump nanobind to latest stable v1.6.2 tag\r\n\r\n* Add PyPI trusted publishing to GitHub workflow, add Python 3.12 wheel builds\r\n\r\nTrusted publishing has been available since v1.8.0 of the pypa-publish\r\naction. It enables password-less authentication and wheel uploads from\r\nthe wheel upload job.\r\n\r\n`cibuildwheel` was bumped to v2.16.2 to allow Python 3.12 wheel builds.\r\n\r\nMore info on trusted publishing:\r\nhttps://github.com/marketplace/actions/pypi-publish#trusted-publishing\r\n\r\nThe Windows distribution was reverted to `latest` in the OS matrix,\r\nsince the discovery problem of MSVC was fixed in a Bazel patch release.\r\n\r\n* Bump nanobind to stable v1.7.0 tag",
            "commit_timestamp": 1698062679.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698120222.68011,
            "elapsed_time": 80.80657911300659,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "5893034e46da730ba9e8ecdc27fe77745fb1511f",
            "commit_message": "Add Python 3.12 support (#1676)\n\n* Add Python 3.12 support tag\r\n\r\n* Bump nanobind to latest stable v1.6.2 tag\r\n\r\n* Add PyPI trusted publishing to GitHub workflow, add Python 3.12 wheel builds\r\n\r\nTrusted publishing has been available since v1.8.0 of the pypa-publish\r\naction. It enables password-less authentication and wheel uploads from\r\nthe wheel upload job.\r\n\r\n`cibuildwheel` was bumped to v2.16.2 to allow Python 3.12 wheel builds.\r\n\r\nMore info on trusted publishing:\r\nhttps://github.com/marketplace/actions/pypi-publish#trusted-publishing\r\n\r\nThe Windows distribution was reverted to `latest` in the OS matrix,\r\nsince the discovery problem of MSVC was fixed in a Bazel patch release.\r\n\r\n* Bump nanobind to stable v1.7.0 tag",
            "commit_timestamp": 1698062679.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698134677.699263,
            "elapsed_time": 97.26868343353271,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "5893034e46da730ba9e8ecdc27fe77745fb1511f",
            "commit_message": "Add Python 3.12 support (#1676)\n\n* Add Python 3.12 support tag\r\n\r\n* Bump nanobind to latest stable v1.6.2 tag\r\n\r\n* Add PyPI trusted publishing to GitHub workflow, add Python 3.12 wheel builds\r\n\r\nTrusted publishing has been available since v1.8.0 of the pypa-publish\r\naction. It enables password-less authentication and wheel uploads from\r\nthe wheel upload job.\r\n\r\n`cibuildwheel` was bumped to v2.16.2 to allow Python 3.12 wheel builds.\r\n\r\nMore info on trusted publishing:\r\nhttps://github.com/marketplace/actions/pypi-publish#trusted-publishing\r\n\r\nThe Windows distribution was reverted to `latest` in the OS matrix,\r\nsince the discovery problem of MSVC was fixed in a Bazel patch release.\r\n\r\n* Bump nanobind to stable v1.7.0 tag",
            "commit_timestamp": 1698062679.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698149074.222741,
            "elapsed_time": 99.61465287208557,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "5893034e46da730ba9e8ecdc27fe77745fb1511f",
            "commit_message": "Add Python 3.12 support (#1676)\n\n* Add Python 3.12 support tag\r\n\r\n* Bump nanobind to latest stable v1.6.2 tag\r\n\r\n* Add PyPI trusted publishing to GitHub workflow, add Python 3.12 wheel builds\r\n\r\nTrusted publishing has been available since v1.8.0 of the pypa-publish\r\naction. It enables password-less authentication and wheel uploads from\r\nthe wheel upload job.\r\n\r\n`cibuildwheel` was bumped to v2.16.2 to allow Python 3.12 wheel builds.\r\n\r\nMore info on trusted publishing:\r\nhttps://github.com/marketplace/actions/pypi-publish#trusted-publishing\r\n\r\nThe Windows distribution was reverted to `latest` in the OS matrix,\r\nsince the discovery problem of MSVC was fixed in a Bazel patch release.\r\n\r\n* Bump nanobind to stable v1.7.0 tag",
            "commit_timestamp": 1698062679.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698150912.464248,
            "elapsed_time": 92.7900128364563,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e45585a4b8e75c28479fa4107182c28172799640",
            "commit_message": "Change nanobind linkage to response file approach on macOS (#1638)\n\n* Change nanobind linkage to response file approach\r\n\r\nThis change needs https://github.com/bazelbuild/bazel/pull/18952 to be\r\nmerged first. Fixes macOS linkage of GBM's nanobind bindings on macOS by\r\nsupplying a linker response file instead of `-undefined dynamic_lookup`.\r\n\r\nThe latter has since been deprecated on macOS.\r\n\r\n* Fix bazel_skylib checksum, bump skylib version in MODULE.bazel\r\n\r\n* Bump Bazel to version 6.4.0 for linker response file support",
            "commit_timestamp": 1698149052.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698163426.07833,
            "elapsed_time": 102.00143122673035,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e45585a4b8e75c28479fa4107182c28172799640",
            "commit_message": "Change nanobind linkage to response file approach on macOS (#1638)\n\n* Change nanobind linkage to response file approach\r\n\r\nThis change needs https://github.com/bazelbuild/bazel/pull/18952 to be\r\nmerged first. Fixes macOS linkage of GBM's nanobind bindings on macOS by\r\nsupplying a linker response file instead of `-undefined dynamic_lookup`.\r\n\r\nThe latter has since been deprecated on macOS.\r\n\r\n* Fix bazel_skylib checksum, bump skylib version in MODULE.bazel\r\n\r\n* Bump Bazel to version 6.4.0 for linker response file support",
            "commit_timestamp": 1698149052.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698164811.601561,
            "elapsed_time": 121.37104940414429,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e45585a4b8e75c28479fa4107182c28172799640",
            "commit_message": "Change nanobind linkage to response file approach on macOS (#1638)\n\n* Change nanobind linkage to response file approach\r\n\r\nThis change needs https://github.com/bazelbuild/bazel/pull/18952 to be\r\nmerged first. Fixes macOS linkage of GBM's nanobind bindings on macOS by\r\nsupplying a linker response file instead of `-undefined dynamic_lookup`.\r\n\r\nThe latter has since been deprecated on macOS.\r\n\r\n* Fix bazel_skylib checksum, bump skylib version in MODULE.bazel\r\n\r\n* Bump Bazel to version 6.4.0 for linker response file support",
            "commit_timestamp": 1698149052.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698165568.660323,
            "elapsed_time": 76.35804176330566,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e45585a4b8e75c28479fa4107182c28172799640",
            "commit_message": "Change nanobind linkage to response file approach on macOS (#1638)\n\n* Change nanobind linkage to response file approach\r\n\r\nThis change needs https://github.com/bazelbuild/bazel/pull/18952 to be\r\nmerged first. Fixes macOS linkage of GBM's nanobind bindings on macOS by\r\nsupplying a linker response file instead of `-undefined dynamic_lookup`.\r\n\r\nThe latter has since been deprecated on macOS.\r\n\r\n* Fix bazel_skylib checksum, bump skylib version in MODULE.bazel\r\n\r\n* Bump Bazel to version 6.4.0 for linker response file support",
            "commit_timestamp": 1698149052.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698177851.151204,
            "elapsed_time": 101.60631275177002,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e45585a4b8e75c28479fa4107182c28172799640",
            "commit_message": "Change nanobind linkage to response file approach on macOS (#1638)\n\n* Change nanobind linkage to response file approach\r\n\r\nThis change needs https://github.com/bazelbuild/bazel/pull/18952 to be\r\nmerged first. Fixes macOS linkage of GBM's nanobind bindings on macOS by\r\nsupplying a linker response file instead of `-undefined dynamic_lookup`.\r\n\r\nThe latter has since been deprecated on macOS.\r\n\r\n* Fix bazel_skylib checksum, bump skylib version in MODULE.bazel\r\n\r\n* Bump Bazel to version 6.4.0 for linker response file support",
            "commit_timestamp": 1698149052.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698192291.404057,
            "elapsed_time": 106.03266882896423,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e45585a4b8e75c28479fa4107182c28172799640",
            "commit_message": "Change nanobind linkage to response file approach on macOS (#1638)\n\n* Change nanobind linkage to response file approach\r\n\r\nThis change needs https://github.com/bazelbuild/bazel/pull/18952 to be\r\nmerged first. Fixes macOS linkage of GBM's nanobind bindings on macOS by\r\nsupplying a linker response file instead of `-undefined dynamic_lookup`.\r\n\r\nThe latter has since been deprecated on macOS.\r\n\r\n* Fix bazel_skylib checksum, bump skylib version in MODULE.bazel\r\n\r\n* Bump Bazel to version 6.4.0 for linker response file support",
            "commit_timestamp": 1698149052.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698206614.32647,
            "elapsed_time": 96.97753500938416,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e45585a4b8e75c28479fa4107182c28172799640",
            "commit_message": "Change nanobind linkage to response file approach on macOS (#1638)\n\n* Change nanobind linkage to response file approach\r\n\r\nThis change needs https://github.com/bazelbuild/bazel/pull/18952 to be\r\nmerged first. Fixes macOS linkage of GBM's nanobind bindings on macOS by\r\nsupplying a linker response file instead of `-undefined dynamic_lookup`.\r\n\r\nThe latter has since been deprecated on macOS.\r\n\r\n* Fix bazel_skylib checksum, bump skylib version in MODULE.bazel\r\n\r\n* Bump Bazel to version 6.4.0 for linker response file support",
            "commit_timestamp": 1698149052.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698221022.796371,
            "elapsed_time": 76.68987226486206,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e45585a4b8e75c28479fa4107182c28172799640",
            "commit_message": "Change nanobind linkage to response file approach on macOS (#1638)\n\n* Change nanobind linkage to response file approach\r\n\r\nThis change needs https://github.com/bazelbuild/bazel/pull/18952 to be\r\nmerged first. Fixes macOS linkage of GBM's nanobind bindings on macOS by\r\nsupplying a linker response file instead of `-undefined dynamic_lookup`.\r\n\r\nThe latter has since been deprecated on macOS.\r\n\r\n* Fix bazel_skylib checksum, bump skylib version in MODULE.bazel\r\n\r\n* Bump Bazel to version 6.4.0 for linker response file support",
            "commit_timestamp": 1698149052.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698235439.261512,
            "elapsed_time": 94.98765563964844,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698250196.166865,
            "elapsed_time": 120.97371220588684,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698264251.624021,
            "elapsed_time": 104.05650520324707,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698278772.414271,
            "elapsed_time": 104.49585723876953,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698292998.213075,
            "elapsed_time": 75.12322950363159,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698307379.935298,
            "elapsed_time": 89.58441257476807,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698321975.133353,
            "elapsed_time": 131.36687850952148,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698336221.347259,
            "elapsed_time": 101.49253559112549,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698350631.042165,
            "elapsed_time": 110.9291603565216,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698365139.923721,
            "elapsed_time": 128.5226171016693,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698379415.003382,
            "elapsed_time": 85.93542075157166,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698393882.020573,
            "elapsed_time": 111.26720905303955,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "698d1dc8c321d0797487e7988825f3f43c1d86b0",
            "commit_message": "Reapply size optimizations for clang & MSVC, LTO for Mac+Linux (#1685)\n\n* Reapply size optimization for clang, equivalent options for MSVC\r\n\r\nWorking towards cross-platform optimal nanobind building configurations.\r\n\r\n* Add LTO back to non-Windows builds\r\n\r\nThe Windows case (the option name is \"/GL\") is more complicated, since\r\nthere, the compiler options also need to be passed to the linker if LTO\r\nis enabled.\r\n\r\nSince we are gating the linker options on platform at the moment instead\r\nof compiler, we need to implement a Bazel boolean flag for the case\r\n\"Platform == MacOS && Compiler == AnyOf(gcc, clang)\".",
            "commit_timestamp": 1698232338.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698408218.870074,
            "elapsed_time": 85.15747499465942,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698422619.144063,
            "elapsed_time": 105.97625064849854,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698437070.590844,
            "elapsed_time": 103.08798432350159,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698451506.264911,
            "elapsed_time": 83.70610308647156,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698465820.040226,
            "elapsed_time": 84.74818515777588,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698480154.261702,
            "elapsed_time": 73.18079471588135,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698494691.900049,
            "elapsed_time": 72.69334411621094,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698508961.363458,
            "elapsed_time": 70.9582748413086,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698523371.753308,
            "elapsed_time": 75.81890225410461,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698537845.201749,
            "elapsed_time": 68.288170337677,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698552198.487867,
            "elapsed_time": 103.86622643470764,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698566605.27121,
            "elapsed_time": 83.1027557849884,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698581033.886988,
            "elapsed_time": 76.19885611534119,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698595363.784604,
            "elapsed_time": 73.86248779296875,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698599462.728907,
            "elapsed_time": 84.82931280136108,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698599725.078172,
            "elapsed_time": 106.9294924736023,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698602962.478549,
            "elapsed_time": 85.15450596809387,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698607030.464942,
            "elapsed_time": 75.09456753730774,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698609833.687096,
            "elapsed_time": 94.37146639823914,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698611641.80134,
            "elapsed_time": 88.9891345500946,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698624287.321583,
            "elapsed_time": 75.99802803993225,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698638609.110224,
            "elapsed_time": 81.27921199798584,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698653030.29385,
            "elapsed_time": 81.38894772529602,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698667486.046937,
            "elapsed_time": 125.16486024856567,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b219e18b91b4279a582abb9195a1fefc5d8838c0",
            "commit_message": "[bindings] Add LTO builds on Windows+MSVC (#1687)\n\n* Add LTO builds on Windows+MSVC\r\n\r\nGates the MSVC switches behind an `@bazel_skylib:selects` statement.\r\n\r\nThis is a first experiment from best guesses and studying the MSVC docs.\r\n\r\n* Fix misleading inline comment",
            "commit_timestamp": 1698407383.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698681854.803401,
            "elapsed_time": 104.09977054595947,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b93f5a592972b9017539cf15a5d299149c1cc2f4",
            "commit_message": "Add pre-commit config and GitHub Actions job (#1688)\n\n* Add pre-commit config and GitHub Actions job\r\n\r\nContains the following hooks:\r\n* buildifier - for formatting and linting Bazel files.\r\n* mypy, ruff, isort, black - for Python typechecking, import hygiene,\r\nstatic analysis, and formatting.\r\n\r\nThe pylint CI job was changed to be a pre-commit CI job, where pre-commit\r\nis bootstrapped via Python.\r\n\r\nPylint is currently no longer part of the\r\ncode checks, but can be re-added if requested. The reason to drop was\r\nthat it does not play nicely with pre-commit, and lots of its\r\nfunctionality and responsibilities are actually covered in ruff.\r\n\r\n* Add dev extra to pyproject.toml for development installs\r\n\r\n* Clarify that pre-commit contains only Python and Bazel hooks\r\n\r\n* Add one-line docstrings to Bazel modules\r\n\r\n* Apply buildifier pre-commit fixes to Bazel files\r\n\r\n* Apply pre-commit fixes to Python files\r\n\r\n* Supply --profile=black to isort to prevent conflicts\r\n\r\n* Fix nanobind build file formatting\r\n\r\n* Add tooling configs to `pyproject.toml`\r\n\r\nIn particular, set line length 80 for all Python files.\r\n\r\n* Reformat all Python files to line length 80, fix return type annotations\r\n\r\nAlso ignores the `tools/compare.py` and `tools/gbench/report.py` files\r\nfor mypy, since they emit a barrage of errors which we can deal with\r\nlater. The errors are mostly related to dynamic classmethod definition.",
            "commit_timestamp": 1698680137.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698696295.418303,
            "elapsed_time": 120.79396200180054,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b93f5a592972b9017539cf15a5d299149c1cc2f4",
            "commit_message": "Add pre-commit config and GitHub Actions job (#1688)\n\n* Add pre-commit config and GitHub Actions job\r\n\r\nContains the following hooks:\r\n* buildifier - for formatting and linting Bazel files.\r\n* mypy, ruff, isort, black - for Python typechecking, import hygiene,\r\nstatic analysis, and formatting.\r\n\r\nThe pylint CI job was changed to be a pre-commit CI job, where pre-commit\r\nis bootstrapped via Python.\r\n\r\nPylint is currently no longer part of the\r\ncode checks, but can be re-added if requested. The reason to drop was\r\nthat it does not play nicely with pre-commit, and lots of its\r\nfunctionality and responsibilities are actually covered in ruff.\r\n\r\n* Add dev extra to pyproject.toml for development installs\r\n\r\n* Clarify that pre-commit contains only Python and Bazel hooks\r\n\r\n* Add one-line docstrings to Bazel modules\r\n\r\n* Apply buildifier pre-commit fixes to Bazel files\r\n\r\n* Apply pre-commit fixes to Python files\r\n\r\n* Supply --profile=black to isort to prevent conflicts\r\n\r\n* Fix nanobind build file formatting\r\n\r\n* Add tooling configs to `pyproject.toml`\r\n\r\nIn particular, set line length 80 for all Python files.\r\n\r\n* Reformat all Python files to line length 80, fix return type annotations\r\n\r\nAlso ignores the `tools/compare.py` and `tools/gbench/report.py` files\r\nfor mypy, since they emit a barrage of errors which we can deal with\r\nlater. The errors are mostly related to dynamic classmethod definition.",
            "commit_timestamp": 1698680137.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698710796.200989,
            "elapsed_time": 119.14730262756348,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b93f5a592972b9017539cf15a5d299149c1cc2f4",
            "commit_message": "Add pre-commit config and GitHub Actions job (#1688)\n\n* Add pre-commit config and GitHub Actions job\r\n\r\nContains the following hooks:\r\n* buildifier - for formatting and linting Bazel files.\r\n* mypy, ruff, isort, black - for Python typechecking, import hygiene,\r\nstatic analysis, and formatting.\r\n\r\nThe pylint CI job was changed to be a pre-commit CI job, where pre-commit\r\nis bootstrapped via Python.\r\n\r\nPylint is currently no longer part of the\r\ncode checks, but can be re-added if requested. The reason to drop was\r\nthat it does not play nicely with pre-commit, and lots of its\r\nfunctionality and responsibilities are actually covered in ruff.\r\n\r\n* Add dev extra to pyproject.toml for development installs\r\n\r\n* Clarify that pre-commit contains only Python and Bazel hooks\r\n\r\n* Add one-line docstrings to Bazel modules\r\n\r\n* Apply buildifier pre-commit fixes to Bazel files\r\n\r\n* Apply pre-commit fixes to Python files\r\n\r\n* Supply --profile=black to isort to prevent conflicts\r\n\r\n* Fix nanobind build file formatting\r\n\r\n* Add tooling configs to `pyproject.toml`\r\n\r\nIn particular, set line length 80 for all Python files.\r\n\r\n* Reformat all Python files to line length 80, fix return type annotations\r\n\r\nAlso ignores the `tools/compare.py` and `tools/gbench/report.py` files\r\nfor mypy, since they emit a barrage of errors which we can deal with\r\nlater. The errors are mostly related to dynamic classmethod definition.",
            "commit_timestamp": 1698680137.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698724961.90584,
            "elapsed_time": 81.59081411361694,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b93f5a592972b9017539cf15a5d299149c1cc2f4",
            "commit_message": "Add pre-commit config and GitHub Actions job (#1688)\n\n* Add pre-commit config and GitHub Actions job\r\n\r\nContains the following hooks:\r\n* buildifier - for formatting and linting Bazel files.\r\n* mypy, ruff, isort, black - for Python typechecking, import hygiene,\r\nstatic analysis, and formatting.\r\n\r\nThe pylint CI job was changed to be a pre-commit CI job, where pre-commit\r\nis bootstrapped via Python.\r\n\r\nPylint is currently no longer part of the\r\ncode checks, but can be re-added if requested. The reason to drop was\r\nthat it does not play nicely with pre-commit, and lots of its\r\nfunctionality and responsibilities are actually covered in ruff.\r\n\r\n* Add dev extra to pyproject.toml for development installs\r\n\r\n* Clarify that pre-commit contains only Python and Bazel hooks\r\n\r\n* Add one-line docstrings to Bazel modules\r\n\r\n* Apply buildifier pre-commit fixes to Bazel files\r\n\r\n* Apply pre-commit fixes to Python files\r\n\r\n* Supply --profile=black to isort to prevent conflicts\r\n\r\n* Fix nanobind build file formatting\r\n\r\n* Add tooling configs to `pyproject.toml`\r\n\r\nIn particular, set line length 80 for all Python files.\r\n\r\n* Reformat all Python files to line length 80, fix return type annotations\r\n\r\nAlso ignores the `tools/compare.py` and `tools/gbench/report.py` files\r\nfor mypy, since they emit a barrage of errors which we can deal with\r\nlater. The errors are mostly related to dynamic classmethod definition.",
            "commit_timestamp": 1698680137.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698739466.395705,
            "elapsed_time": 99.30058670043945,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b93f5a592972b9017539cf15a5d299149c1cc2f4",
            "commit_message": "Add pre-commit config and GitHub Actions job (#1688)\n\n* Add pre-commit config and GitHub Actions job\r\n\r\nContains the following hooks:\r\n* buildifier - for formatting and linting Bazel files.\r\n* mypy, ruff, isort, black - for Python typechecking, import hygiene,\r\nstatic analysis, and formatting.\r\n\r\nThe pylint CI job was changed to be a pre-commit CI job, where pre-commit\r\nis bootstrapped via Python.\r\n\r\nPylint is currently no longer part of the\r\ncode checks, but can be re-added if requested. The reason to drop was\r\nthat it does not play nicely with pre-commit, and lots of its\r\nfunctionality and responsibilities are actually covered in ruff.\r\n\r\n* Add dev extra to pyproject.toml for development installs\r\n\r\n* Clarify that pre-commit contains only Python and Bazel hooks\r\n\r\n* Add one-line docstrings to Bazel modules\r\n\r\n* Apply buildifier pre-commit fixes to Bazel files\r\n\r\n* Apply pre-commit fixes to Python files\r\n\r\n* Supply --profile=black to isort to prevent conflicts\r\n\r\n* Fix nanobind build file formatting\r\n\r\n* Add tooling configs to `pyproject.toml`\r\n\r\nIn particular, set line length 80 for all Python files.\r\n\r\n* Reformat all Python files to line length 80, fix return type annotations\r\n\r\nAlso ignores the `tools/compare.py` and `tools/gbench/report.py` files\r\nfor mypy, since they emit a barrage of errors which we can deal with\r\nlater. The errors are mostly related to dynamic classmethod definition.",
            "commit_timestamp": 1698680137.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698753836.824224,
            "elapsed_time": 107.281423330307,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bce46fb413c76ef1744d39477ba4a86e9af1f8ab",
            "commit_message": "Drop isort hook for ruff builtin import sorting (#1689)\n\nThis behaves the same, and saves a pre-commit step. ruff just needs an\r\nadditional package location hint to correctly map first-part packages\r\n(in this case, `google_benchmark`).\r\n\r\nThis revealed a misformat in the `google_benchmark.__init__`, which is\r\nnow fixed.",
            "commit_timestamp": 1698746737.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698768173.560383,
            "elapsed_time": 82.67636632919312,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bce46fb413c76ef1744d39477ba4a86e9af1f8ab",
            "commit_message": "Drop isort hook for ruff builtin import sorting (#1689)\n\nThis behaves the same, and saves a pre-commit step. ruff just needs an\r\nadditional package location hint to correctly map first-part packages\r\n(in this case, `google_benchmark`).\r\n\r\nThis revealed a misformat in the `google_benchmark.__init__`, which is\r\nnow fixed.",
            "commit_timestamp": 1698746737.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698782604.524855,
            "elapsed_time": 104.04549217224121,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bce46fb413c76ef1744d39477ba4a86e9af1f8ab",
            "commit_message": "Drop isort hook for ruff builtin import sorting (#1689)\n\nThis behaves the same, and saves a pre-commit step. ruff just needs an\r\nadditional package location hint to correctly map first-part packages\r\n(in this case, `google_benchmark`).\r\n\r\nThis revealed a misformat in the `google_benchmark.__init__`, which is\r\nnow fixed.",
            "commit_timestamp": 1698746737.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698797105.952582,
            "elapsed_time": 96.92690348625183,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bce46fb413c76ef1744d39477ba4a86e9af1f8ab",
            "commit_message": "Drop isort hook for ruff builtin import sorting (#1689)\n\nThis behaves the same, and saves a pre-commit step. ruff just needs an\r\nadditional package location hint to correctly map first-part packages\r\n(in this case, `google_benchmark`).\r\n\r\nThis revealed a misformat in the `google_benchmark.__init__`, which is\r\nnow fixed.",
            "commit_timestamp": 1698746737.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698811436.084713,
            "elapsed_time": 95.63276362419128,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bce46fb413c76ef1744d39477ba4a86e9af1f8ab",
            "commit_message": "Drop isort hook for ruff builtin import sorting (#1689)\n\nThis behaves the same, and saves a pre-commit step. ruff just needs an\r\nadditional package location hint to correctly map first-part packages\r\n(in this case, `google_benchmark`).\r\n\r\nThis revealed a misformat in the `google_benchmark.__init__`, which is\r\nnow fixed.",
            "commit_timestamp": 1698746737.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698825844.50592,
            "elapsed_time": 100.99510598182678,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bce46fb413c76ef1744d39477ba4a86e9af1f8ab",
            "commit_message": "Drop isort hook for ruff builtin import sorting (#1689)\n\nThis behaves the same, and saves a pre-commit step. ruff just needs an\r\nadditional package location hint to correctly map first-part packages\r\n(in this case, `google_benchmark`).\r\n\r\nThis revealed a misformat in the `google_benchmark.__init__`, which is\r\nnow fixed.",
            "commit_timestamp": 1698746737.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698840270.332459,
            "elapsed_time": 101.655588388443,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698848919.794686,
            "elapsed_time": 108.3762936592102,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698855210.80249,
            "elapsed_time": 87.52056312561035,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698854573.74052,
            "elapsed_time": 85.76880407333374,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698869005.775313,
            "elapsed_time": 84.99856185913086,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698883524.714322,
            "elapsed_time": 99.47742509841919,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698897793.327703,
            "elapsed_time": 78.48757648468018,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698912218.258502,
            "elapsed_time": 95.8829596042633,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698926561.739584,
            "elapsed_time": 51.55513262748718,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698941030.417652,
            "elapsed_time": 108.89141654968262,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698955432.349802,
            "elapsed_time": 101.04501914978027,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698969986.293545,
            "elapsed_time": 111.80698537826538,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698984218.515449,
            "elapsed_time": 90.84909343719482,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698998623.692789,
            "elapsed_time": 108.69761848449707,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699012969.334286,
            "elapsed_time": 54.12610387802124,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699027445.711047,
            "elapsed_time": 91.92735409736633,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699041837.79247,
            "elapsed_time": 77.47286462783813,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699056440.516617,
            "elapsed_time": 282.47207522392273,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699070624.94798,
            "elapsed_time": 86.88344717025757,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699084981.980505,
            "elapsed_time": 62.32136869430542,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699099371.847501,
            "elapsed_time": 71.39998245239258,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699113750.650244,
            "elapsed_time": 83.93100166320801,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699128226.853568,
            "elapsed_time": 104.57136297225952,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699142633.760236,
            "elapsed_time": 53.62062430381775,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699157008.827104,
            "elapsed_time": 61.23176980018616,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699171458.202635,
            "elapsed_time": 98.82657861709595,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699185822.593872,
            "elapsed_time": 65.51300621032715,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699200168.944321,
            "elapsed_time": 84.95323157310486,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699214588.56373,
            "elapsed_time": 59.071382999420166,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699229098.062342,
            "elapsed_time": 99.8087809085846,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699243348.203417,
            "elapsed_time": 51.64042949676514,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699257777.804431,
            "elapsed_time": 80.14934730529785,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699272230.660894,
            "elapsed_time": 127.68166303634644,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699286548.135545,
            "elapsed_time": 53.047487020492554,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699301019.122031,
            "elapsed_time": 82.84737348556519,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699315474.797132,
            "elapsed_time": 93.67621946334839,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699329877.148676,
            "elapsed_time": 112.31710886955261,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699344223.687914,
            "elapsed_time": 78.81563591957092,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699358582.815285,
            "elapsed_time": 58.926271200180054,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699373026.703254,
            "elapsed_time": 84.76789617538452,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699387483.081831,
            "elapsed_time": 120.41512107849121,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699401908.882871,
            "elapsed_time": 97.35302233695984,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699416198.306017,
            "elapsed_time": 89.9736225605011,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699430639.944503,
            "elapsed_time": 93.55752110481262,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699445072.715417,
            "elapsed_time": 82.86272096633911,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699459413.176692,
            "elapsed_time": 88.76224303245544,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699473810.040213,
            "elapsed_time": 75.87533926963806,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699488312.487088,
            "elapsed_time": 79.95888710021973,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699502647.974518,
            "elapsed_time": 78.7659707069397,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699517023.455552,
            "elapsed_time": 104.96538186073303,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699531419.806909,
            "elapsed_time": 64.94539785385132,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699545833.758712,
            "elapsed_time": 114.3574788570404,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699560214.190063,
            "elapsed_time": 83.68528652191162,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699574685.20554,
            "elapsed_time": 94.32868242263794,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699588979.120515,
            "elapsed_time": 92.28251886367798,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699603403.862104,
            "elapsed_time": 95.53247141838074,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b40db869451036d222d155bc8cd6420c2fb9527a",
            "commit_message": "Fix unit tests compilation with non-gnu / non-msvc compilers with c++11 support. (#1691)\n\ndonotoptimize_test.cc could not be compiled under non-gnu / non-msvc compilers,\r\nbecause only deprecated version of DoNotOptimize is available for these\r\ncompilers. Tests are compiled with -Werror. Patch fixes test compilation by\r\nproviding non-deprecated version of DoNotOptimize for compilers with c++11\r\nstandard support.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1698833355.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699617837.103609,
            "elapsed_time": 81.54114079475403,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699632234.003624,
            "elapsed_time": 92.05902981758118,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699646644.948152,
            "elapsed_time": 98.15286827087402,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699661092.996253,
            "elapsed_time": 71.77065658569336,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699675392.642411,
            "elapsed_time": 71.65420055389404,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699689820.176404,
            "elapsed_time": 81.25908064842224,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699704206.421402,
            "elapsed_time": 65.38183665275574,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699718550.656773,
            "elapsed_time": 67.36162328720093,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699732968.016034,
            "elapsed_time": 104.67482542991638,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699747511.117751,
            "elapsed_time": 97.5355396270752,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699761763.028502,
            "elapsed_time": 86.73989820480347,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699776199.547325,
            "elapsed_time": 95.8540735244751,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699787158.590476,
            "elapsed_time": 78.77792930603027,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699790672.21534,
            "elapsed_time": 98.03055191040039,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699798553.443098,
            "elapsed_time": 72.53179812431335,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699805009.828063,
            "elapsed_time": 75.26948881149292,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699819434.878112,
            "elapsed_time": 100.19002866744995,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699833864.607141,
            "elapsed_time": 59.25709843635559,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699848219.654882,
            "elapsed_time": 71.06791234016418,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699862675.676806,
            "elapsed_time": 79.66571307182312,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699877026.663055,
            "elapsed_time": 76.03611636161804,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699891376.931739,
            "elapsed_time": 65.81061053276062,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "159eb2d0ffb85b86e00ec1f983d72e72009ec387",
            "commit_message": "Switch out black for ruff format (#1698)\n\nSaves one pre-commit hook, some pyproject.toml configuration,\r\nand provides much better performance with almost identical behavior.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1699612831.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699905822.341399,
            "elapsed_time": 106.0421462059021,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699920246.53588,
            "elapsed_time": 55.08867335319519,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699934589.286708,
            "elapsed_time": 57.339067459106445,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699948968.473317,
            "elapsed_time": 51.628117084503174,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699963433.8734,
            "elapsed_time": 92.95319485664368,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699977815.922506,
            "elapsed_time": 63.73551297187805,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699992265.241967,
            "elapsed_time": 87.00168633460999,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700006663.666312,
            "elapsed_time": 74.19204711914062,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700021006.930978,
            "elapsed_time": 70.36291837692261,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700035441.829494,
            "elapsed_time": 104.12103343009949,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700036202.013883,
            "elapsed_time": 58.51152157783508,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700064307.167582,
            "elapsed_time": 121.19602680206299,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700049841.877556,
            "elapsed_time": 68.48032021522522,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700078605.847057,
            "elapsed_time": 77.61272931098938,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700093122.403242,
            "elapsed_time": 84.63496923446655,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700107497.956769,
            "elapsed_time": 80.22480702400208,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700121789.400103,
            "elapsed_time": 57.19208240509033,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "93a96a26a6ba36894d7fa6f43513708c595ccb5f",
            "commit_message": "Add missing `\\n` character at end of error log string (#1700)\n\nCloses https://github.com/google/benchmark/issues/1699\r\n\r\nSigned-off-by: Anjan Roy <hello@itzmeanjan.in>",
            "commit_timestamp": 1699897172.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700136173.372881,
            "elapsed_time": 53.71632432937622,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700150597.059166,
            "elapsed_time": 61.773826360702515,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700164994.780661,
            "elapsed_time": 70.29042339324951,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700179648.735166,
            "elapsed_time": 94.47959065437317,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700193809.349762,
            "elapsed_time": 62.39143633842468,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700208238.346352,
            "elapsed_time": 77.58049750328064,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700222649.512128,
            "elapsed_time": 72.63677930831909,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700237009.1318,
            "elapsed_time": 58.2614860534668,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700265932.943606,
            "elapsed_time": 70.34371185302734,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700251344.293655,
            "elapsed_time": 50.06911754608154,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700280200.060303,
            "elapsed_time": 62.255239725112915,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700294587.150025,
            "elapsed_time": 62.73734760284424,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700308957.562955,
            "elapsed_time": 50.953198194503784,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700323341.174041,
            "elapsed_time": 53.69722509384155,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700337740.927745,
            "elapsed_time": 50.752943992614746,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700352266.737533,
            "elapsed_time": 54.26059341430664,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700366547.237573,
            "elapsed_time": 53.50837826728821,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700380973.017054,
            "elapsed_time": 71.04029846191406,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700395358.58651,
            "elapsed_time": 52.858086585998535,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700409750.676689,
            "elapsed_time": 53.494404554367065,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700424176.327424,
            "elapsed_time": 74.30599427223206,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700438713.896131,
            "elapsed_time": 65.22908020019531,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700452985.517789,
            "elapsed_time": 55.02763271331787,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700467359.651497,
            "elapsed_time": 54.37023711204529,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700481793.225951,
            "elapsed_time": 71.74698162078857,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700496171.799948,
            "elapsed_time": 69.93792748451233,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700510646.27014,
            "elapsed_time": 64.20949578285217,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700525254.299974,
            "elapsed_time": 94.49983263015747,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700539405.989541,
            "elapsed_time": 57.63820171356201,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700553794.284662,
            "elapsed_time": 63.95880126953125,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700568291.334095,
            "elapsed_time": 76.65153527259827,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "232.0.20231101.135615",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700566294.830415,
            "elapsed_time": 71.99242043495178,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "241.0.20231120.201033-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700574179.910432,
            "elapsed_time": 61.48277926445007,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "241.0.20231121.214-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700575677.628982,
            "elapsed_time": 70.05515623092651,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700582598.145157,
            "elapsed_time": 59.995699405670166,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700597003.171373,
            "elapsed_time": 76.32561206817627,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700611450.456896,
            "elapsed_time": 55.88551115989685,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700625813.646177,
            "elapsed_time": 83.17456603050232,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231122.307-eap09d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700640978.420209,
            "elapsed_time": 61.271387815475464,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700640223.443005,
            "elapsed_time": 63.03439021110535,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700654618.24166,
            "elapsed_time": 71.38706994056702,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700668985.340122,
            "elapsed_time": 53.929450273513794,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700683408.90358,
            "elapsed_time": 75.69697284698486,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700697912.544973,
            "elapsed_time": 72.06637763977051,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700712172.794104,
            "elapsed_time": 55.316030502319336,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700726615.95555,
            "elapsed_time": 73.78609108924866,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4a2e34ba7342c780a11e3b5e809cc70b2cac0861",
            "commit_message": "Fix CMakeLists.txt for perf_counters_test (#1701)\n\n",
            "commit_timestamp": 1700128559.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700741026.621134,
            "elapsed_time": 60.73029589653015,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c8ef1ee99eca565f6a58a9f815fba5ef1f210783",
            "commit_message": "[CI] Try to fix sanitizer builds by pinning the LLVM revision (#1703)\n\n",
            "commit_timestamp": 1700729102.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700740636.731814,
            "elapsed_time": 59.63848376274109,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c8ef1ee99eca565f6a58a9f815fba5ef1f210783",
            "commit_message": "[CI] Try to fix sanitizer builds by pinning the LLVM revision (#1703)\n\n",
            "commit_timestamp": 1700729102.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700755354.669674,
            "elapsed_time": 51.58912491798401,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700769843.456244,
            "elapsed_time": 88.58055996894836,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700784537.798165,
            "elapsed_time": 109.71149277687073,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700798549.382627,
            "elapsed_time": 49.84178876876831,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700813026.655349,
            "elapsed_time": 74.64980387687683,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700827448.538567,
            "elapsed_time": 85.76962733268738,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700841843.874453,
            "elapsed_time": 84.51688361167908,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700856253.605838,
            "elapsed_time": 65.07002639770508,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700870644.331951,
            "elapsed_time": 53.31426239013672,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700884971.33526,
            "elapsed_time": 53.99477243423462,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700899373.25312,
            "elapsed_time": 53.683571577072144,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700913840.768239,
            "elapsed_time": 58.14382314682007,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700928197.983623,
            "elapsed_time": 54.15433120727539,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700942550.823626,
            "elapsed_time": 56.14779090881348,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700957101.658097,
            "elapsed_time": 66.60682940483093,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700971441.217172,
            "elapsed_time": 83.89591360092163,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700985814.472688,
            "elapsed_time": 61.54473924636841,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701000210.01686,
            "elapsed_time": 62.70169687271118,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701014542.823067,
            "elapsed_time": 50.31358027458191,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701028999.226499,
            "elapsed_time": 63.92793607711792,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701043441.953556,
            "elapsed_time": 53.21712255477905,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701057808.925769,
            "elapsed_time": 67.094486951828,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701072173.240526,
            "elapsed_time": 53.66420817375183,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701086629.654801,
            "elapsed_time": 62.73438739776611,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701101014.506057,
            "elapsed_time": 74.0230655670166,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701115419.927242,
            "elapsed_time": 69.83605885505676,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701129891.007476,
            "elapsed_time": 81.68095850944519,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701144239.272128,
            "elapsed_time": 75.11329174041748,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701158702.796304,
            "elapsed_time": 78.27637648582458,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701173015.723139,
            "elapsed_time": 66.4415602684021,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701187462.33252,
            "elapsed_time": 70.9409236907959,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701201849.184733,
            "elapsed_time": 83.63573431968689,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701216327.996963,
            "elapsed_time": 62.17412567138672,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701230639.784779,
            "elapsed_time": 73.85644912719727,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701245049.741198,
            "elapsed_time": 63.20577645301819,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701259465.786299,
            "elapsed_time": 77.15198016166687,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701288145.153758,
            "elapsed_time": 51.74099564552307,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701273860.549795,
            "elapsed_time": 66.72317552566528,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701302731.930342,
            "elapsed_time": 70.88227868080139,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701317061.397859,
            "elapsed_time": 101.06245613098145,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701331499.902758,
            "elapsed_time": 111.83995199203491,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701345877.353718,
            "elapsed_time": 78.31830787658691,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701360271.374696,
            "elapsed_time": 78.33470892906189,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701374615.849883,
            "elapsed_time": 59.91073393821716,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701389110.502677,
            "elapsed_time": 76.03094434738159,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701403459.554396,
            "elapsed_time": 104.54613971710205,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701417824.317592,
            "elapsed_time": 53.32256054878235,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701432241.492265,
            "elapsed_time": 79.29028177261353,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701446620.918551,
            "elapsed_time": 62.28809714317322,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701461018.99079,
            "elapsed_time": 75.82367420196533,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701475498.082051,
            "elapsed_time": 63.18429613113403,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701489767.86629,
            "elapsed_time": 54.04540753364563,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701504283.757145,
            "elapsed_time": 101.72551155090332,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701518617.113432,
            "elapsed_time": 70.8682644367218,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701532984.786656,
            "elapsed_time": 60.91415858268738,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701547426.756101,
            "elapsed_time": 72.61959099769592,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701561908.421009,
            "elapsed_time": 64.62963366508484,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701576239.511039,
            "elapsed_time": 74.5326840877533,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701590761.305004,
            "elapsed_time": 62.23124122619629,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701591195.087876,
            "elapsed_time": 61.058340072631836,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701598403.43138,
            "elapsed_time": 51.979753732681274,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701604438.494258,
            "elapsed_time": 63.992234230041504,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701604968.643179,
            "elapsed_time": 53.44377064704895,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701619406.949748,
            "elapsed_time": 79.47567987442017,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701633842.989038,
            "elapsed_time": 75.25020432472229,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701648237.178928,
            "elapsed_time": 51.06274151802063,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701662625.865798,
            "elapsed_time": 71.81515717506409,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701674156.951601,
            "elapsed_time": 68.06613039970398,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701677066.85488,
            "elapsed_time": 80.52161502838135,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701678371.371506,
            "elapsed_time": 73.19645476341248,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701679072.079145,
            "elapsed_time": 65.49972558021545,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701702358.94857,
            "elapsed_time": 54.95116186141968,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701745592.251216,
            "elapsed_time": 68.99550676345825,
            "x64": false,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701779863.257139,
            "elapsed_time": 58.095436096191406,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5033.5238037109375,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701788772.416514,
            "elapsed_time": 65.9601354598999,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5005.111976623535,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701831919.661926,
            "elapsed_time": 58.03537464141846,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5082.8769454956055,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701875192.783256,
            "elapsed_time": 80.8673927783966,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4988.8469314575195,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701918369.244266,
            "elapsed_time": 62.88452434539795,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5071.665718078613,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "1e96bb0ab5e758861f5bbbd4edbd0a8d9a2a7cae",
            "commit_message": "Support windows MSYS2 environments (#1704)\n\n* [CI] Attempt to add windows MSYS2-based coverage\r\n\r\n* Mark decl of `State::KeepRunningInternal()` as `inline`\r\n\r\nMaybe helps with\r\n```\r\nD:\\a\\_temp\\msys64\\ucrt64\\bin\\g++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fno-keep-inline-dllexport   -UNDEBUG -MD -MT test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -MF test\\CMakeFiles\\benchmark_test.dir\\benchmark_test.cc.obj.d -o test/CMakeFiles/benchmark_test.dir/benchmark_test.cc.obj -c D:/a/benchmark/benchmark/test/benchmark_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/benchmark_test.cc:1:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1007:37: error: 'bool benchmark::State::KeepRunningInternal(benchmark::IterationCount, bool)' redeclared without dllimport attribute after being referenced with dll linkage [-Werror]\r\n 1007 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningInternal(IterationCount n,\r\n      |                                     ^~~~~\r\n```\r\n\r\n* Mark more `State`'s member function decls as `inline`\r\n\r\n```\r\n[27/110] Building CXX object test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nFAILED: test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj\r\nD:\\a\\_temp\\msys64\\clang32\\bin\\clang++.exe -DHAVE_STD_REGEX -DHAVE_STEADY_CLOCK -DHAVE_THREAD_SAFETY_ATTRIBUTES -DTEST_BENCHMARK_LIBRARY_HAS_NO_ASSERTIONS -ID:/a/benchmark/benchmark/include -Wall  -Wextra  -Wshadow  -Wfloat-equal  -Wold-style-cast  -Werror  -pedantic  -pedantic-errors  -Wshorten-64-to-32  -fstrict-aliasing  -Wno-deprecated-declarations  -Wno-deprecated  -Wstrict-aliasing  -Wthread-safety  -Wno-unused-variable -std=c++11 -fvisibility=hidden -fvisibility-inlines-hidden   -UNDEBUG -MD -MT test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -MF test\\CMakeFiles\\spec_arg_verbosity_test.dir\\spec_arg_verbosity_test.cc.obj.d -o test/CMakeFiles/spec_arg_verbosity_test.dir/spec_arg_verbosity_test.cc.obj -c D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc\r\nIn file included from D:/a/benchmark/benchmark/test/spec_arg_verbosity_test.cc:5:\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:999:44: error: 'benchmark::State::KeepRunning' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n  999 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunning() {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1003:44: error: 'benchmark::State::KeepRunningBatch' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1003 | inline BENCHMARK_ALWAYS_INLINE bool State::KeepRunningBatch(IterationCount n) {\r\n      |                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1075:60: error: 'benchmark::State::begin' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n 1075 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::begin() {\r\n      |                                                            ^\r\nD:/a/benchmark/benchmark/include/benchmark/benchmark.h:1078:60: error: 'benchmark::State::end' redeclared inline; 'dllimport' attribute ignored [-Werror,-Wignored-attributes]\r\n\r\n 1078 | inline BENCHMARK_ALWAYS_INLINE State::StateIterator State::end() {\r\n\r\n      |                                                            ^\r\n\r\n```\r\n\r\n* StatisticsTest.CV: don't require precise FP match, tolerate some abs error\r\n\r\nWe get ever so slightly different results on windows with GCC.\r\n```\r\n71: Test command: D:\\a\\benchmark\\benchmark\\_build\\test\\statistics_gtest.exe\r\n71: Working Directory: D:/a/benchmark/benchmark/_build/test\r\n71: Test timeout computed to be: 10000000\r\n71: Running main() from gmock_main.cc\r\n71: [==========] Running 4 tests from 1 test suite.\r\n71: [----------] Global test environment set-up.\r\n71: [----------] 4 tests from StatisticsTest\r\n71: [ RUN      ] StatisticsTest.Mean\r\n71: [       OK ] StatisticsTest.Mean (0 ms)\r\n71: [ RUN      ] StatisticsTest.Median\r\n71: [       OK ] StatisticsTest.Median (0 ms)\r\n71: [ RUN      ] StatisticsTest.StdDev\r\n71: [       OK ] StatisticsTest.StdDev (0 ms)\r\n71: [ RUN      ] StatisticsTest.CV\r\n71: D:/a/benchmark/benchmark/test/statistics_gtest.cc:31: Failure\r\n71: Expected equality of these values:\r\n71:   benchmark::StatisticsCV({2.5, 2.4, 3.3, 4.2, 5.1})\r\n71:     Which is: 0.32888184094918088\r\n71:   0.32888184094918121\r\n71: [  FAILED  ] StatisticsTest.CV (0 ms)\r\n71: [----------] 4 tests from StatisticsTest (0 ms total)\r\n```\r\n\r\n* Fix DLL path discovery for tests",
            "commit_timestamp": 1700750824.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701943219.358372,
            "elapsed_time": 62.10165214538574,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5041.217018127441,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "68689bf9660110ab1368d55b2b6a66dbb3e811cf",
            "commit_message": "Fix `pre-commit` GitHub Actions job (#1708)\n\nFor some reason, editable pip installs are now broken, which means that\r\nthey will break the pre-commit workflow due to the `pip install -e .`\r\ninstruction.\r\n\r\nSince the normal install is unaffected, we can just drop the `-e` switch.\r\nIt does not matter which mode is used, since the environment is only\r\nused for linting.",
            "commit_timestamp": 1701942094.0
        },
        {
            "tool_version": "241.0.20231206.222733-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701944416.929626,
            "elapsed_time": 66.8117253780365,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4375.69832611084,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "68689bf9660110ab1368d55b2b6a66dbb3e811cf",
            "commit_message": "Fix `pre-commit` GitHub Actions job (#1708)\n\nFor some reason, editable pip installs are now broken, which means that\r\nthey will break the pre-commit workflow due to the `pip install -e .`\r\ninstruction.\r\n\r\nSince the normal install is unaffected, we can just drop the `-e` switch.\r\nIt does not matter which mode is used, since the environment is only\r\nused for linting.",
            "commit_timestamp": 1701942094.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701961581.040956,
            "elapsed_time": 84.731684923172,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5019.873962402344,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702004780.704394,
            "elapsed_time": 70.8083803653717,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5023.816596984863,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702048152.511937,
            "elapsed_time": 112.89578413963318,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4683.47159576416,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702091140.751245,
            "elapsed_time": 69.12624764442444,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4995.145561218262,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702134325.993111,
            "elapsed_time": 57.25560927391052,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5063.319747924805,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702177598.5717,
            "elapsed_time": 66.01354050636292,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4946.222747802734,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702220775.810413,
            "elapsed_time": 81.39404201507568,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4987.618812561035,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702263995.494424,
            "elapsed_time": 59.05516958236694,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5028.154441833496,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702307166.099838,
            "elapsed_time": 66.03898406028748,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4923.538467407227,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702350357.07298,
            "elapsed_time": 63.849422216415405,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4855.541664123535,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702393552.519396,
            "elapsed_time": 56.869807958602905,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5041.169486999512,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702436744.200536,
            "elapsed_time": 67.12318873405457,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5087.081451416016,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "754ef08ab91767be54f56e8de3f00527aef3f779",
            "commit_message": "Upgrade core bazel dependencies (#1711)\n\nBumps `rules_foreign_cc` to v0.10.1 (October 2023), `bazel_skylib` to\r\nv1.5.0 (November 2023), `rules_python` to v0.27.1 (December 2023).\r\n\r\nAlso syncs GoogleTest to v1.12.1 (the last C++11 supporting version) to\r\nbe the same as in MODULE.bazel.\r\n\r\nSince the latest `rules_python` changed its setup calling convention,\r\nthat is updated also in the WORKSPACE file.",
            "commit_timestamp": 1701961243.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702479990.002987,
            "elapsed_time": 69.60974669456482,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5009.599594116211,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702523101.239141,
            "elapsed_time": 54.3771755695343,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5086.071228027344,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702566506.230152,
            "elapsed_time": 69.05771255493164,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5065.560134887695,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702609601.194247,
            "elapsed_time": 77.18998789787292,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4987.956924438477,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702652756.284764,
            "elapsed_time": 55.245492458343506,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5065.555809020996,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702695962.61179,
            "elapsed_time": 56.899452686309814,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5035.213455200195,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702739099.748704,
            "elapsed_time": 56.42291736602783,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5061.402282714844,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702782339.592269,
            "elapsed_time": 68.33870053291321,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5005.961090087891,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702825497.404709,
            "elapsed_time": 56.479177713394165,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5012.044570922852,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702868713.541904,
            "elapsed_time": 55.63156223297119,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5059.5720138549805,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702911997.760013,
            "elapsed_time": 70.28896284103394,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4975.041442871094,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702955134.024508,
            "elapsed_time": 64.91801357269287,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5017.583358764648,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2de5261302fa307ebe06b24c0fc30653bed5e17",
            "commit_message": "Run `pre-commit autoupdate`, fix stale pyproject.toml comments (#1712)\n\n* Run `pre-commit autoupdate`, fix stale pyproject.toml comments\r\n\r\n* Set `--enable_bzlmod=false` for the moment\r\n\r\nUntil the newer nanobind tags are pushed to the BCR, it's best to disable\r\nbzlmod for the bindings, because the Python CI breaks due to Bazel 7\r\nenabling bzlmod by default.\r\n\r\n* Remove E203 ignore, add linebreaks to semantically group ruff options",
            "commit_timestamp": 1702477575.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702998333.556779,
            "elapsed_time": 57.76493048667908,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5023.146286010742,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "9a0422eb2319cbfa9e6dd9915ab212478cfcf83a",
            "commit_message": "Check out repo at depth 0 for Python tests, bump Python and PyPI actions (#1713)\n\nThe reason for this is that `setuptools-scm` installs a version relative\r\nto the last release tag - if no tag is found, the default version is taken\r\nto be v0.1.0. This was the case in GitHub Actions, where only the PR\r\nbranch is checked out.\r\n\r\nAlso unpins build system requirements in the `pyproject.toml`.\r\n\r\nThe sdist build system was changed to `build` from `python setup.py sdist`\r\nfor forward compatibility - `build` is superior in every way, and the\r\nadvertised solution by both cibuildwheel and PyPA itself.\r\n\r\nBump `actions/setup-python` to v5, `pypa/gh-action-pypi-publish` to v1.8.11,\r\nand `docker/setup-qemu-action` to v3.",
            "commit_timestamp": 1702995188.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703041579.836404,
            "elapsed_time": 62.34246206283569,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5028.386772155762,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "9a0422eb2319cbfa9e6dd9915ab212478cfcf83a",
            "commit_message": "Check out repo at depth 0 for Python tests, bump Python and PyPI actions (#1713)\n\nThe reason for this is that `setuptools-scm` installs a version relative\r\nto the last release tag - if no tag is found, the default version is taken\r\nto be v0.1.0. This was the case in GitHub Actions, where only the PR\r\nbranch is checked out.\r\n\r\nAlso unpins build system requirements in the `pyproject.toml`.\r\n\r\nThe sdist build system was changed to `build` from `python setup.py sdist`\r\nfor forward compatibility - `build` is superior in every way, and the\r\nadvertised solution by both cibuildwheel and PyPA itself.\r\n\r\nBump `actions/setup-python` to v5, `pypa/gh-action-pypi-publish` to v1.8.11,\r\nand `docker/setup-qemu-action` to v3.",
            "commit_timestamp": 1702995188.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703084889.664858,
            "elapsed_time": 76.00470018386841,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5053.162376403809,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "6b7e86c5c85095d7a46eaba203d3c4450a445782",
            "commit_message": "Fix mis-matching argument in closing tag for cmake macro (#1714) (#1715)\n\nCo-authored-by: Iakov Sergeev <yahontu@gmail.com>",
            "commit_timestamp": 1703066095.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703127909.254885,
            "elapsed_time": 60.442853689193726,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5068.330123901367,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703161644.37188,
            "elapsed_time": 76.4573745727539,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4933.047035217285,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703171164.260993,
            "elapsed_time": 60.98578453063965,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4981.486122131348,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703214357.82594,
            "elapsed_time": 60.36145067214966,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4953.605438232422,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703257504.635148,
            "elapsed_time": 55.55179977416992,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4988.7705001831055,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703300724.642574,
            "elapsed_time": 54.07830023765564,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5002.218032836914,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703343992.584203,
            "elapsed_time": 77.73258519172668,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4724.838912963867,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703387178.811521,
            "elapsed_time": 56.87584066390991,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4975.070053100586,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703430324.883646,
            "elapsed_time": 58.013023138046265,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4981.516387939453,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703473598.524287,
            "elapsed_time": 58.13502860069275,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5027.975868225098,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703516752.662419,
            "elapsed_time": 61.064963817596436,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4939.1926193237305,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703559970.763819,
            "elapsed_time": 69.7848732471466,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4923.224876403809,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703603095.492495,
            "elapsed_time": 57.76867866516113,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5005.90885925293,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703646319.217579,
            "elapsed_time": 55.78241682052612,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4994.349945068359,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703672813.324756,
            "elapsed_time": 71.49047780036926,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4807.706520080566,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703689550.959796,
            "elapsed_time": 59.05662703514099,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4934.996696472168,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703732702.100444,
            "elapsed_time": 58.6432728767395,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5020.308525085449,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703775907.213674,
            "elapsed_time": 57.21093797683716,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4985.061660766602,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703819112.336792,
            "elapsed_time": 56.33482098579407,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4987.929901123047,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703862307.634258,
            "elapsed_time": 56.58397817611694,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4984.3842849731445,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703905552.934754,
            "elapsed_time": 59.25991415977478,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4943.951683044434,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703948696.096417,
            "elapsed_time": 55.57399940490723,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5002.438278198242,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703991964.180076,
            "elapsed_time": 60.74211883544922,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4908.10319519043,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704035154.153156,
            "elapsed_time": 62.423277616500854,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4919.168724060059,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704078391.164975,
            "elapsed_time": 66.69708752632141,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4905.97004699707,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704121533.98382,
            "elapsed_time": 54.211950063705444,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4963.8737716674805,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704164704.029068,
            "elapsed_time": 53.872435331344604,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4991.345367431641,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704207980.199215,
            "elapsed_time": 59.155603647232056,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4951.525688171387,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704251129.292007,
            "elapsed_time": 55.83002853393555,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4964.250999450684,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7b52bf7346dead5ef4f29d7f98d2a26d6194252f",
            "commit_message": "define HOST_NAME_MAX for z/oS (#1717)\n\n",
            "commit_timestamp": 1703092717.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704294379.001783,
            "elapsed_time": 73.45230793952942,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4943.920036315918,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "2d2e07e3c5f93f210e77356fb83953fda03673f5",
            "commit_message": "Fix division by zero for low frequency timers for CV statistics (#1724)\n\n",
            "commit_timestamp": 1704285659.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704337556.97449,
            "elapsed_time": 56.919827699661255,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 5035.5461349487305,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "2d2e07e3c5f93f210e77356fb83953fda03673f5",
            "commit_message": "Fix division by zero for low frequency timers for CV statistics (#1724)\n\n",
            "commit_timestamp": 1704285659.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704380811.281546,
            "elapsed_time": 73.29159951210022,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4980.205406188965,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e3824e7503187993b287ac8c8144a35bf5ccfd44",
            "commit_message": "fix per-thread timing error on z/OS (#1719)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1704366421.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704423995.24341,
            "elapsed_time": 60.75595831871033,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4927.73397064209,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e3824e7503187993b287ac8c8144a35bf5ccfd44",
            "commit_message": "fix per-thread timing error on z/OS (#1719)\n\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1704366421.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704467138.798486,
            "elapsed_time": 58.114200830459595,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4957.4572830200195,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e61e332df951b947e858011449a32c3ed5049db7",
            "commit_message": "Issue1731 created console does not receive output (#1732)\n\n* Instead of directly comparing std::cout and GetOutputStream(), the underlying buffers are retreived via rdbuf(), and then compared.\r\n\r\n* Instead of fflush(stdout), call out.flush().\r\nUse out << FormatString() instead of vprintf\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1704463708.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704510680.900243,
            "elapsed_time": 59.45339512825012,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4955.916969299316,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e61e332df951b947e858011449a32c3ed5049db7",
            "commit_message": "Issue1731 created console does not receive output (#1732)\n\n* Instead of directly comparing std::cout and GetOutputStream(), the underlying buffers are retreived via rdbuf(), and then compared.\r\n\r\n* Instead of fflush(stdout), call out.flush().\r\nUse out << FormatString() instead of vprintf\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1704463708.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704553545.656774,
            "elapsed_time": 63.698976039886475,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4956.5688400268555,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e61e332df951b947e858011449a32c3ed5049db7",
            "commit_message": "Issue1731 created console does not receive output (#1732)\n\n* Instead of directly comparing std::cout and GetOutputStream(), the underlying buffers are retreived via rdbuf(), and then compared.\r\n\r\n* Instead of fflush(stdout), call out.flush().\r\nUse out << FormatString() instead of vprintf\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1704463708.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704596755.093144,
            "elapsed_time": 58.56985592842102,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4930.064041137695,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e61e332df951b947e858011449a32c3ed5049db7",
            "commit_message": "Issue1731 created console does not receive output (#1732)\n\n* Instead of directly comparing std::cout and GetOutputStream(), the underlying buffers are retreived via rdbuf(), and then compared.\r\n\r\n* Instead of fflush(stdout), call out.flush().\r\nUse out << FormatString() instead of vprintf\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1704463708.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704639991.237973,
            "elapsed_time": 70.0201165676117,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4926.370162963867,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e61e332df951b947e858011449a32c3ed5049db7",
            "commit_message": "Issue1731 created console does not receive output (#1732)\n\n* Instead of directly comparing std::cout and GetOutputStream(), the underlying buffers are retreived via rdbuf(), and then compared.\r\n\r\n* Instead of fflush(stdout), call out.flush().\r\nUse out << FormatString() instead of vprintf\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1704463708.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704683156.162912,
            "elapsed_time": 70.97301316261292,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4787.167137145996,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e61e332df951b947e858011449a32c3ed5049db7",
            "commit_message": "Issue1731 created console does not receive output (#1732)\n\n* Instead of directly comparing std::cout and GetOutputStream(), the underlying buffers are retreived via rdbuf(), and then compared.\r\n\r\n* Instead of fflush(stdout), call out.flush().\r\nUse out << FormatString() instead of vprintf\r\n\r\n---------\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1704463708.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704726414.4697,
            "elapsed_time": 69.43529009819031,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4862.706336975098,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "96d820f73f01647490782f65f8fb984663575d03",
            "commit_message": "tools/compare: don't actually discard valid (but zero) `pvalue` (#1733)\n\n* tools/compare: when dumping json, pretty-print it\r\n\r\nIt's rather completely non-human-readable otherwise.\r\nI can't imagine the filesize really matters,\r\nand if it does, it should just be compressed later on.\r\n\r\n* tools/compare: add failing test\r\n\r\n* tools/compare: don't actually discard valid (but zero) `pvalue`\r\n\r\nSo, this is embarressing. For a very large number of repetitions,\r\nwe can end up with pvalue of a true zero, and it obviously compares false,\r\nand we treat it as-if we failed to compute it...",
            "commit_timestamp": 1704707820.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704728935.087759,
            "elapsed_time": 72.55487298965454,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4806.511253356934,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "96d820f73f01647490782f65f8fb984663575d03",
            "commit_message": "tools/compare: don't actually discard valid (but zero) `pvalue` (#1733)\n\n* tools/compare: when dumping json, pretty-print it\r\n\r\nIt's rather completely non-human-readable otherwise.\r\nI can't imagine the filesize really matters,\r\nand if it does, it should just be compressed later on.\r\n\r\n* tools/compare: add failing test\r\n\r\n* tools/compare: don't actually discard valid (but zero) `pvalue`\r\n\r\nSo, this is embarressing. For a very large number of repetitions,\r\nwe can end up with pvalue of a true zero, and it obviously compares false,\r\nand we treat it as-if we failed to compute it...",
            "commit_timestamp": 1704707820.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704731140.89491,
            "elapsed_time": 63.091832637786865,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4666.5192794799805,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "96d820f73f01647490782f65f8fb984663575d03",
            "commit_message": "tools/compare: don't actually discard valid (but zero) `pvalue` (#1733)\n\n* tools/compare: when dumping json, pretty-print it\r\n\r\nIt's rather completely non-human-readable otherwise.\r\nI can't imagine the filesize really matters,\r\nand if it does, it should just be compressed later on.\r\n\r\n* tools/compare: add failing test\r\n\r\n* tools/compare: don't actually discard valid (but zero) `pvalue`\r\n\r\nSo, this is embarressing. For a very large number of repetitions,\r\nwe can end up with pvalue of a true zero, and it obviously compares false,\r\nand we treat it as-if we failed to compute it...",
            "commit_timestamp": 1704707820.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704769533.967557,
            "elapsed_time": 54.13300156593323,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4795.202751159668,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "96d820f73f01647490782f65f8fb984663575d03",
            "commit_message": "tools/compare: don't actually discard valid (but zero) `pvalue` (#1733)\n\n* tools/compare: when dumping json, pretty-print it\r\n\r\nIt's rather completely non-human-readable otherwise.\r\nI can't imagine the filesize really matters,\r\nand if it does, it should just be compressed later on.\r\n\r\n* tools/compare: add failing test\r\n\r\n* tools/compare: don't actually discard valid (but zero) `pvalue`\r\n\r\nSo, this is embarressing. For a very large number of repetitions,\r\nwe can end up with pvalue of a true zero, and it obviously compares false,\r\nand we treat it as-if we failed to compute it...",
            "commit_timestamp": 1704707820.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704807503.164819,
            "elapsed_time": 72.8468074798584,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4802.932929992676,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "96d820f73f01647490782f65f8fb984663575d03",
            "commit_message": "tools/compare: don't actually discard valid (but zero) `pvalue` (#1733)\n\n* tools/compare: when dumping json, pretty-print it\r\n\r\nIt's rather completely non-human-readable otherwise.\r\nI can't imagine the filesize really matters,\r\nand if it does, it should just be compressed later on.\r\n\r\n* tools/compare: add failing test\r\n\r\n* tools/compare: don't actually discard valid (but zero) `pvalue`\r\n\r\nSo, this is embarressing. For a very large number of repetitions,\r\nwe can end up with pvalue of a true zero, and it obviously compares false,\r\nand we treat it as-if we failed to compute it...",
            "commit_timestamp": 1704707820.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704810350.444729,
            "elapsed_time": 56.720131158828735,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4814.339309692383,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "96d820f73f01647490782f65f8fb984663575d03",
            "commit_message": "tools/compare: don't actually discard valid (but zero) `pvalue` (#1733)\n\n* tools/compare: when dumping json, pretty-print it\r\n\r\nIt's rather completely non-human-readable otherwise.\r\nI can't imagine the filesize really matters,\r\nand if it does, it should just be compressed later on.\r\n\r\n* tools/compare: add failing test\r\n\r\n* tools/compare: don't actually discard valid (but zero) `pvalue`\r\n\r\nSo, this is embarressing. For a very large number of repetitions,\r\nwe can end up with pvalue of a true zero, and it obviously compares false,\r\nand we treat it as-if we failed to compute it...",
            "commit_timestamp": 1704707820.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704812808.852627,
            "elapsed_time": 58.47230792045593,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4794.179336547852,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "54e4327190b6c06aeadc3186ed17566fd8da2a61",
            "commit_message": "Issue 1734: Streams not flushed if not running actual benchmarks (#1735)\n\nConsistently flush Out and Err streams, otherwise they might not get flushed\r\nand the output lost when using custom streams.\r\n\r\nFixes #1734.",
            "commit_timestamp": 1704812350.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704819414.842257,
            "elapsed_time": 58.14328384399414,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4887.53800201416,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "882f6f5ae00a117ffb3b2e105eedfe4d411c12ef",
            "commit_message": "fix(cmakelists.txt): enforce CMake to find PFM or fail when BENCHMARK_ENABLE_LIBPFM is ON (#1705)\n\nFixes #1702\r\n",
            "commit_timestamp": 1704814482.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704855975.016804,
            "elapsed_time": 74.09161925315857,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4421.420181274414,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "882f6f5ae00a117ffb3b2e105eedfe4d411c12ef",
            "commit_message": "fix(cmakelists.txt): enforce CMake to find PFM or fail when BENCHMARK_ENABLE_LIBPFM is ON (#1705)\n\nFixes #1702\r\n",
            "commit_timestamp": 1704814482.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704899232.601756,
            "elapsed_time": 72.05172729492188,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4800.507598876953,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ea71a14891474943fc1f34d359f9e0e82476ffe1",
            "commit_message": "Docs: `reducing_variance.md`: proofreading, fix typos (#1736)\n\n",
            "commit_timestamp": 1704879459.0
        },
        {
            "tool_version": "241.0.20240111.164711-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705653278.660293,
            "elapsed_time": 77.70333456993103,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4800.180038452148,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.32221-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705654206.465333,
            "elapsed_time": 76.6661479473114,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4636.4436111450195,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.32221-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705676762.430296,
            "elapsed_time": 72.26774573326111,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4570.786224365234,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.32221-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705719964.002182,
            "elapsed_time": 74.52305006980896,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4663.172309875488,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705740237.75834,
            "elapsed_time": 80.06682586669922,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4675.662445068359,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705763189.541875,
            "elapsed_time": 65.80518317222595,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4686.095672607422,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705806349.331428,
            "elapsed_time": 67.46531128883362,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4720.757080078125,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705849561.525708,
            "elapsed_time": 70.53615641593933,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4700.159591674805,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705892747.494831,
            "elapsed_time": 67.74004077911377,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4669.685485839844,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705935963.839138,
            "elapsed_time": 72.0711669921875,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4513.380767822266,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705979182.088489,
            "elapsed_time": 72.39353156089783,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4674.613128662109,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706022360.986715,
            "elapsed_time": 66.49796271324158,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4575.976745605469,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706065675.544971,
            "elapsed_time": 98.56914234161377,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4688.834365844727,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706108802.049908,
            "elapsed_time": 62.070565700531006,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4668.483337402344,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706151980.931135,
            "elapsed_time": 88.64784264564514,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4670.714340209961,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706195324.107116,
            "elapsed_time": 97.20838212966919,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4693.652725219727,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706238430.074961,
            "elapsed_time": 96.62948536872864,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4404.307189941406,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706281602.083056,
            "elapsed_time": 69.0410225391388,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4380.301849365234,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706324794.074368,
            "elapsed_time": 82.27596139907837,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4670.308624267578,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706367899.446276,
            "elapsed_time": 57.20946431159973,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4737.963790893555,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706411128.493945,
            "elapsed_time": 60.84509205818176,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4580.020584106445,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706497525.853825,
            "elapsed_time": 58.44018745422363,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4764.182907104492,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "4682db08bc7bb7e547e0a1056e32392998f8101f",
            "commit_message": "Bump pre-commit dependencies (#1740)\n\nAlso fix a mypy error in `tools.gbench.util` - the condition behaves the\r\nsame as before, but in the new mypy version, the old condition results\r\nin an unreachable code error for the final `return False` statement.\r\n\r\nThis is most likely a bug in mypy's reachability analysis, but the fix\r\nis easy enough here to circumvent it.",
            "commit_timestamp": 1705584957.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706540809.625403,
            "elapsed_time": 63.678810119628906,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4690.855499267578,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "30a37e1b0bfbec07bbb44f8cac8c162ef9f5f9ed",
            "commit_message": "set library version in bazel (#1746)\n\n* set library version in bazel",
            "commit_timestamp": 1706536084.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706627194.250639,
            "elapsed_time": 57.54270100593567,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4688.497772216797,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e990563876ef92990e873dc5b479d3b79cda2547",
            "commit_message": "Add `BENCHMARK_TEMPLATE[12]_CAPTURE`, fusion of `BENCHMARK_CAPTURE` and `BENCHMARK_TEMPLATE` (#1747)\n\nTest coverage isn't great, but not worse than the existing one.\r\n\r\nYou'd think `BENCHMARK_CAPTURE` would suffice,\r\nbut you can't pass `func<targs>` to it (due to the `<` and `>`),\r\nand when passing `(func<targs>)` we get issues with brackets.\r\nSo i'm not sure if we can fully avoid this helper.\r\n\r\nThat being said, if there is only a single template argument,\r\n`BENCHMARK_CAPTURE()` works fine if we avoid using function name.",
            "commit_timestamp": 1706618676.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706670349.600173,
            "elapsed_time": 77.48011064529419,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4683.579315185547,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e990563876ef92990e873dc5b479d3b79cda2547",
            "commit_message": "Add `BENCHMARK_TEMPLATE[12]_CAPTURE`, fusion of `BENCHMARK_CAPTURE` and `BENCHMARK_TEMPLATE` (#1747)\n\nTest coverage isn't great, but not worse than the existing one.\r\n\r\nYou'd think `BENCHMARK_CAPTURE` would suffice,\r\nbut you can't pass `func<targs>` to it (due to the `<` and `>`),\r\nand when passing `(func<targs>)` we get issues with brackets.\r\nSo i'm not sure if we can fully avoid this helper.\r\n\r\nThat being said, if there is only a single template argument,\r\n`BENCHMARK_CAPTURE()` works fine if we avoid using function name.",
            "commit_timestamp": 1706618676.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706713586.8274,
            "elapsed_time": 76.67354917526245,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4717.102958679199,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e990563876ef92990e873dc5b479d3b79cda2547",
            "commit_message": "Add `BENCHMARK_TEMPLATE[12]_CAPTURE`, fusion of `BENCHMARK_CAPTURE` and `BENCHMARK_TEMPLATE` (#1747)\n\nTest coverage isn't great, but not worse than the existing one.\r\n\r\nYou'd think `BENCHMARK_CAPTURE` would suffice,\r\nbut you can't pass `func<targs>` to it (due to the `<` and `>`),\r\nand when passing `(func<targs>)` we get issues with brackets.\r\nSo i'm not sure if we can fully avoid this helper.\r\n\r\nThat being said, if there is only a single template argument,\r\n`BENCHMARK_CAPTURE()` works fine if we avoid using function name.",
            "commit_timestamp": 1706618676.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706756795.491294,
            "elapsed_time": 72.35636711120605,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4360.50944519043,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e990563876ef92990e873dc5b479d3b79cda2547",
            "commit_message": "Add `BENCHMARK_TEMPLATE[12]_CAPTURE`, fusion of `BENCHMARK_CAPTURE` and `BENCHMARK_TEMPLATE` (#1747)\n\nTest coverage isn't great, but not worse than the existing one.\r\n\r\nYou'd think `BENCHMARK_CAPTURE` would suffice,\r\nbut you can't pass `func<targs>` to it (due to the `<` and `>`),\r\nand when passing `(func<targs>)` we get issues with brackets.\r\nSo i'm not sure if we can fully avoid this helper.\r\n\r\nThat being said, if there is only a single template argument,\r\n`BENCHMARK_CAPTURE()` works fine if we avoid using function name.",
            "commit_timestamp": 1706618676.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706799971.5304,
            "elapsed_time": 69.59417653083801,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4827.2932052612305,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e990563876ef92990e873dc5b479d3b79cda2547",
            "commit_message": "Add `BENCHMARK_TEMPLATE[12]_CAPTURE`, fusion of `BENCHMARK_CAPTURE` and `BENCHMARK_TEMPLATE` (#1747)\n\nTest coverage isn't great, but not worse than the existing one.\r\n\r\nYou'd think `BENCHMARK_CAPTURE` would suffice,\r\nbut you can't pass `func<targs>` to it (due to the `<` and `>`),\r\nand when passing `(func<targs>)` we get issues with brackets.\r\nSo i'm not sure if we can fully avoid this helper.\r\n\r\nThat being said, if there is only a single template argument,\r\n`BENCHMARK_CAPTURE()` works fine if we avoid using function name.",
            "commit_timestamp": 1706618676.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706843209.625743,
            "elapsed_time": 75.93957114219666,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4717.38737487793,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e990563876ef92990e873dc5b479d3b79cda2547",
            "commit_message": "Add `BENCHMARK_TEMPLATE[12]_CAPTURE`, fusion of `BENCHMARK_CAPTURE` and `BENCHMARK_TEMPLATE` (#1747)\n\nTest coverage isn't great, but not worse than the existing one.\r\n\r\nYou'd think `BENCHMARK_CAPTURE` would suffice,\r\nbut you can't pass `func<targs>` to it (due to the `<` and `>`),\r\nand when passing `(func<targs>)` we get issues with brackets.\r\nSo i'm not sure if we can fully avoid this helper.\r\n\r\nThat being said, if there is only a single template argument,\r\n`BENCHMARK_CAPTURE()` works fine if we avoid using function name.",
            "commit_timestamp": 1706618676.0
        },
        {
            "tool_version": "241.0.20240201.93040-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706883902.306702,
            "elapsed_time": 76.44064617156982,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4705.819641113281,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e990563876ef92990e873dc5b479d3b79cda2547",
            "commit_message": "Add `BENCHMARK_TEMPLATE[12]_CAPTURE`, fusion of `BENCHMARK_CAPTURE` and `BENCHMARK_TEMPLATE` (#1747)\n\nTest coverage isn't great, but not worse than the existing one.\r\n\r\nYou'd think `BENCHMARK_CAPTURE` would suffice,\r\nbut you can't pass `func<targs>` to it (due to the `<` and `>`),\r\nand when passing `(func<targs>)` we get issues with brackets.\r\nSo i'm not sure if we can fully avoid this helper.\r\n\r\nThat being said, if there is only a single template argument,\r\n`BENCHMARK_CAPTURE()` works fine if we avoid using function name.",
            "commit_timestamp": 1706618676.0
        },
        {
            "tool_version": "241.0.20240201.93040-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706885602.475724,
            "elapsed_time": 74.11456203460693,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4681.9974365234375,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e990563876ef92990e873dc5b479d3b79cda2547",
            "commit_message": "Add `BENCHMARK_TEMPLATE[12]_CAPTURE`, fusion of `BENCHMARK_CAPTURE` and `BENCHMARK_TEMPLATE` (#1747)\n\nTest coverage isn't great, but not worse than the existing one.\r\n\r\nYou'd think `BENCHMARK_CAPTURE` would suffice,\r\nbut you can't pass `func<targs>` to it (due to the `<` and `>`),\r\nand when passing `(func<targs>)` we get issues with brackets.\r\nSo i'm not sure if we can fully avoid this helper.\r\n\r\nThat being said, if there is only a single template argument,\r\n`BENCHMARK_CAPTURE()` works fine if we avoid using function name.",
            "commit_timestamp": 1706618676.0
        },
        {
            "tool_version": "241.0.20240201.93040-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706886345.560897,
            "elapsed_time": 72.82992124557495,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4579.439903259277,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "e990563876ef92990e873dc5b479d3b79cda2547",
            "commit_message": "Add `BENCHMARK_TEMPLATE[12]_CAPTURE`, fusion of `BENCHMARK_CAPTURE` and `BENCHMARK_TEMPLATE` (#1747)\n\nTest coverage isn't great, but not worse than the existing one.\r\n\r\nYou'd think `BENCHMARK_CAPTURE` would suffice,\r\nbut you can't pass `func<targs>` to it (due to the `<` and `>`),\r\nand when passing `(func<targs>)` we get issues with brackets.\r\nSo i'm not sure if we can fully avoid this helper.\r\n\r\nThat being said, if there is only a single template argument,\r\n`BENCHMARK_CAPTURE()` works fine if we avoid using function name.",
            "commit_timestamp": 1706618676.0
        },
        {
            "tool_version": "241.0.20240201.93040-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706929611.398606,
            "elapsed_time": 61.08038091659546,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4751.346054077148,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b04cec1bf90c3d8e47739bb3271607a18d8b5106",
            "commit_message": "Deflake CI (#1751)\n\n* `complexity_test`: deflake, same as https://github.com/google/benchmark/issues/272\r\n\r\nAs it can be seen in e.g. https://github.com/google/benchmark/actions/runs/7711328637/job/21016492361\r\nWe may get `65: BM_Complexity_O1_BigO                           0.00 N^2        0.00 N^2  `\r\n\r\n* `user_counters_tabular_test`: deflake\r\n\r\nWe were still getting zero times there. Perhaps this is better?",
            "commit_timestamp": 1706888386.0
        },
        {
            "tool_version": "241.0.20240201.93040-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706972729.062595,
            "elapsed_time": 58.001473903656006,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4771.479751586914,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b04cec1bf90c3d8e47739bb3271607a18d8b5106",
            "commit_message": "Deflake CI (#1751)\n\n* `complexity_test`: deflake, same as https://github.com/google/benchmark/issues/272\r\n\r\nAs it can be seen in e.g. https://github.com/google/benchmark/actions/runs/7711328637/job/21016492361\r\nWe may get `65: BM_Complexity_O1_BigO                           0.00 N^2        0.00 N^2  `\r\n\r\n* `user_counters_tabular_test`: deflake\r\n\r\nWe were still getting zero times there. Perhaps this is better?",
            "commit_timestamp": 1706888386.0
        },
        {
            "tool_version": "241.0.20240201.93040-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1707015922.960272,
            "elapsed_time": 64.53501868247986,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4592.19441986084,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "b04cec1bf90c3d8e47739bb3271607a18d8b5106",
            "commit_message": "Deflake CI (#1751)\n\n* `complexity_test`: deflake, same as https://github.com/google/benchmark/issues/272\r\n\r\nAs it can be seen in e.g. https://github.com/google/benchmark/actions/runs/7711328637/job/21016492361\r\nWe may get `65: BM_Complexity_O1_BigO                           0.00 N^2        0.00 N^2  `\r\n\r\n* `user_counters_tabular_test`: deflake\r\n\r\nWe were still getting zero times there. Perhaps this is better?",
            "commit_timestamp": 1706888386.0
        },
        {
            "tool_version": "241.0.20240326.163135-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713602155.301433,
            "elapsed_time": 52.96669006347656,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4827.284126281738,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240326.163135-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713603309.716108,
            "elapsed_time": 66.83650231361389,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4864.538032531738,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713604192.832324,
            "elapsed_time": 67.26633286476135,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4806.042831420898,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713625507.375439,
            "elapsed_time": 55.478686571121216,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4759.006675720215,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713668737.843046,
            "elapsed_time": 51.81353259086609,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4802.400634765625,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713711923.332936,
            "elapsed_time": 57.64011096954346,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4812.189491271973,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713755145.910332,
            "elapsed_time": 58.30946135520935,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4777.337432861328,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713798366.490041,
            "elapsed_time": 64.3038125038147,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4980.537734985352,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713841563.683763,
            "elapsed_time": 61.174731731414795,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4787.852890014648,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713884731.789936,
            "elapsed_time": 55.31709957122803,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4838.348175048828,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713928008.898007,
            "elapsed_time": 105.3964295387268,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4433.538635253906,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713971176.370704,
            "elapsed_time": 79.04074454307556,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4638.9316482543945,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714014356.414655,
            "elapsed_time": 60.596362352371216,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4627.8995361328125,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714057538.969225,
            "elapsed_time": 59.642640113830566,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4779.381706237793,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714100783.635605,
            "elapsed_time": 70.45110154151917,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4854.423202514648,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714143986.738755,
            "elapsed_time": 57.93450880050659,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4726.3862380981445,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714187168.789931,
            "elapsed_time": 64.59005546569824,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4638.108062744141,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714230344.284036,
            "elapsed_time": 68.57589912414551,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4610.056221008301,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714273581.015234,
            "elapsed_time": 55.06926679611206,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4678.917098999023,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714316745.545453,
            "elapsed_time": 54.8731415271759,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4727.967330932617,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714359963.012077,
            "elapsed_time": 69.35850095748901,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4751.993934631348,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714403177.717517,
            "elapsed_time": 63.37371611595154,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4713.753387451172,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714446387.471615,
            "elapsed_time": 60.89547824859619,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4668.558547973633,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714489581.744647,
            "elapsed_time": 60.33448338508606,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4625.69295501709,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714532770.390185,
            "elapsed_time": 73.74316024780273,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4510.021598815918,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714575940.093463,
            "elapsed_time": 57.07193660736084,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4714.28116607666,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714619140.167027,
            "elapsed_time": 57.651097774505615,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4558.370056152344,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714662378.419683,
            "elapsed_time": 70.19927740097046,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4548.945068359375,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714705657.435347,
            "elapsed_time": 73.21006107330322,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4647.997703552246,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714748742.333861,
            "elapsed_time": 60.38081097602844,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4729.8647384643555,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714791992.860282,
            "elapsed_time": 70.31366920471191,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4594.1035232543945,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714835188.270194,
            "elapsed_time": 58.34664535522461,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4537.530967712402,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714878367.563559,
            "elapsed_time": 62.89881920814514,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4583.89461517334,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714921534.669385,
            "elapsed_time": 61.86402201652527,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4634.594482421875,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714964797.004508,
            "elapsed_time": 77.14213347434998,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4667.795639038086,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715007998.865604,
            "elapsed_time": 68.16363000869751,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4775.6719970703125,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715051179.529511,
            "elapsed_time": 62.71692657470703,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4640.094253540039,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715094347.174379,
            "elapsed_time": 57.518428802490234,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4685.636337280273,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715137624.162832,
            "elapsed_time": 66.04800152778625,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4595.402458190918,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715180751.511014,
            "elapsed_time": 58.316187381744385,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4628.614562988281,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715224044.497348,
            "elapsed_time": 75.88830494880676,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4317.710205078125,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715267336.460934,
            "elapsed_time": 119.65763711929321,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 3942.9184341430664,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715310412.610958,
            "elapsed_time": 75.83583116531372,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4619.410202026367,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715353588.817797,
            "elapsed_time": 83.10375714302063,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4659.112197875977,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715396821.039239,
            "elapsed_time": 84.33806371688843,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4571.925857543945,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715439889.516826,
            "elapsed_time": 53.2881293296814,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4659.766036987305,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715483184.64635,
            "elapsed_time": 82.1892831325531,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4603.769401550293,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715526348.828739,
            "elapsed_time": 60.08150362968445,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4887.0226974487305,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715569576.330664,
            "elapsed_time": 60.65069580078125,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4587.5831298828125,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715612828.314952,
            "elapsed_time": 89.96945881843567,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4610.450721740723,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715655983.475266,
            "elapsed_time": 69.3145980834961,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4671.852127075195,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715699283.622817,
            "elapsed_time": 90.97475695610046,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4593.585838317871,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715742567.580159,
            "elapsed_time": 67.21238565444946,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4627.306747436523,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715785603.02331,
            "elapsed_time": 60.52382826805115,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4648.12043762207,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715828762.926323,
            "elapsed_time": 67.44579482078552,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4820.041465759277,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715871917.866074,
            "elapsed_time": 54.034051179885864,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4849.745964050293,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715915174.533886,
            "elapsed_time": 70.69719982147217,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4784.794479370117,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1715958354.472348,
            "elapsed_time": 55.999902963638306,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4980.692947387695,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716001533.389616,
            "elapsed_time": 64.05923056602478,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4764.700271606445,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716029434.907575,
            "elapsed_time": 65.03537940979004,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4746.327476501465,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716030526.588329,
            "elapsed_time": 60.7022430896759,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4859.224769592285,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716044734.397566,
            "elapsed_time": 50.4366021156311,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4813.803268432617,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716048905.987917,
            "elapsed_time": 59.198965311050415,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4925.747917175293,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716087962.308459,
            "elapsed_time": 74.73964285850525,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4847.674949645996,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716131125.758114,
            "elapsed_time": 56.52036714553833,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4839.262481689453,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716174357.67401,
            "elapsed_time": 70.70730924606323,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4799.9990158081055,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716217575.058494,
            "elapsed_time": 83.87558388710022,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4749.950393676758,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716260763.748131,
            "elapsed_time": 53.70153784751892,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4794.625846862793,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716303899.83253,
            "elapsed_time": 50.15676259994507,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4757.764266967773,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716347197.544373,
            "elapsed_time": 52.70830297470093,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4864.704971313477,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716390328.513253,
            "elapsed_time": 59.697256088256836,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4760.133941650391,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716433532.163201,
            "elapsed_time": 62.614134550094604,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4805.595962524414,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "bc946b919cac6f25a199a526da571638cfde109f",
            "commit_message": "Modernize wheel building job config (#1783)\n\nIt is now possible to build Mac wheels on native machines in Github\r\nActions, so ARM64 Mac wheels are now built and tested on M1 machines.\r\n\r\nAlso, the artifact up-/download was migrated to v4, which made it\r\nnecessary to upload wheels to unique artifact names, and then later\r\nstitch them together again in a subsequent job.\r\n\r\nThe cross-platform Mac build injection in setup.py was removed,\r\nsince it is no longer necessary.\r\n\r\nI relanded a monkey-patching of Bazel build files, this time for\r\nMODULE.bazel. This is because `rules_python` does not allow running\r\nas the root user, which is the case in cibuildwheel+Linux (happens\r\nin a Docker container). Since I did not see a quick way of switching\r\nto rootless containers, and did not want to hardcode the config change\r\n(it can apparently cause cache misses and build failures), I inject the\r\n\"ignore_root_user_error\" flag into the MODULE.bazel file when running\r\nin cibuildwheel on Linux.",
            "commit_timestamp": 1713199449.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716476816.05512,
            "elapsed_time": 76.2861807346344,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4793.803405761719,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "a4cf155615c63e019ae549e31703bf367df5b471",
            "commit_message": "preparing for v1.8.4 (#1788)\n\n",
            "commit_timestamp": 1716472966.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716519925.154044,
            "elapsed_time": 55.394283294677734,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4813.140777587891,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f992a553df82688e68b72228f5fbb533b04b750",
            "commit_message": "Improve compatibility with Hexagon hardware (#1785)\n\nThe customization done via BENCHMARK_OS_QURT works just fine with the Hexagon simulator, but on at least some Hexagon hardware, both `qurt_timer_get_ticks()` and `std::chrono::now()` are broken and always return 0. This fixes the former by using the better-supported (and essentially identical `qurt_sysclock_get_hw_ticks()` call, and the latter by reading a 19.2MHz hardware counter (per suggestion from Qualcomm). Local testing seems to indicate these changes are just as robust under the simulator as before.\r\n",
            "commit_timestamp": 1716484134.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716563120.034575,
            "elapsed_time": 53.503194093704224,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4886.988677978516,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "144d23cf5fa0b1b9dd138bc56601920d83e350c7",
            "commit_message": "hotfix: Correct pypi-publishing action tag to v1.8.14 (#1791)\n\nAlso bump pre-commit dependencies via `pre-commit autoupdate`.",
            "commit_timestamp": 1716540701.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716606404.19697,
            "elapsed_time": 70.74715757369995,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4946.994560241699,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "144d23cf5fa0b1b9dd138bc56601920d83e350c7",
            "commit_message": "hotfix: Correct pypi-publishing action tag to v1.8.14 (#1791)\n\nAlso bump pre-commit dependencies via `pre-commit autoupdate`.",
            "commit_timestamp": 1716540701.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716649519.684419,
            "elapsed_time": 56.17991781234741,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4763.2821044921875,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "144d23cf5fa0b1b9dd138bc56601920d83e350c7",
            "commit_message": "hotfix: Correct pypi-publishing action tag to v1.8.14 (#1791)\n\nAlso bump pre-commit dependencies via `pre-commit autoupdate`.",
            "commit_timestamp": 1716540701.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716692729.967645,
            "elapsed_time": 59.63091826438904,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4655.172058105469,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "144d23cf5fa0b1b9dd138bc56601920d83e350c7",
            "commit_message": "hotfix: Correct pypi-publishing action tag to v1.8.14 (#1791)\n\nAlso bump pre-commit dependencies via `pre-commit autoupdate`.",
            "commit_timestamp": 1716540701.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716735964.715089,
            "elapsed_time": 53.22406530380249,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4889.255165100098,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "144d23cf5fa0b1b9dd138bc56601920d83e350c7",
            "commit_message": "hotfix: Correct pypi-publishing action tag to v1.8.14 (#1791)\n\nAlso bump pre-commit dependencies via `pre-commit autoupdate`.",
            "commit_timestamp": 1716540701.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716779162.923529,
            "elapsed_time": 69.60387182235718,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4799.510231018066,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "144d23cf5fa0b1b9dd138bc56601920d83e350c7",
            "commit_message": "hotfix: Correct pypi-publishing action tag to v1.8.14 (#1791)\n\nAlso bump pre-commit dependencies via `pre-commit autoupdate`.",
            "commit_timestamp": 1716540701.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716822330.431738,
            "elapsed_time": 58.14423704147339,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4851.139015197754,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "144d23cf5fa0b1b9dd138bc56601920d83e350c7",
            "commit_message": "hotfix: Correct pypi-publishing action tag to v1.8.14 (#1791)\n\nAlso bump pre-commit dependencies via `pre-commit autoupdate`.",
            "commit_timestamp": 1716540701.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716865567.213686,
            "elapsed_time": 52.50046372413635,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4748.502021789551,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "144d23cf5fa0b1b9dd138bc56601920d83e350c7",
            "commit_message": "hotfix: Correct pypi-publishing action tag to v1.8.14 (#1791)\n\nAlso bump pre-commit dependencies via `pre-commit autoupdate`.",
            "commit_timestamp": 1716540701.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716908832.520014,
            "elapsed_time": 137.6893937587738,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4591.088302612305,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "d77b69271091c35b1da5d47894d924832f8cfc37",
            "commit_message": "CMake: unbreak version handling for tarballs (#1793)\n\n#1742 changed the placeholder version from `0.0.0` to `v0.0.0`,\r\nbut this line which was further dealing with it, was not updated.\r\n\r\nFixes https://github.com/google/benchmark/issues/1792\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1716891861.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716951980.392422,
            "elapsed_time": 95.2835042476654,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4607.919319152832,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "d77b69271091c35b1da5d47894d924832f8cfc37",
            "commit_message": "CMake: unbreak version handling for tarballs (#1793)\n\n#1742 changed the placeholder version from `0.0.0` to `v0.0.0`,\r\nbut this line which was further dealing with it, was not updated.\r\n\r\nFixes https://github.com/google/benchmark/issues/1792\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1716891861.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1716995191.591553,
            "elapsed_time": 117.47190260887146,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4628.172714233398,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717038400.201689,
            "elapsed_time": 95.75938820838928,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4766.623893737793,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717081612.166959,
            "elapsed_time": 93.36589622497559,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4647.827911376953,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717124781.427591,
            "elapsed_time": 82.69691181182861,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4690.968910217285,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717167990.213659,
            "elapsed_time": 91.90060949325562,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4657.810729980469,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717211200.310142,
            "elapsed_time": 64.57653951644897,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4642.107200622559,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717254343.894122,
            "elapsed_time": 85.21645140647888,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4770.365913391113,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717297670.683135,
            "elapsed_time": 84.67034959793091,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4589.284271240234,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717340761.028635,
            "elapsed_time": 78.9537582397461,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4673.817451477051,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717383938.151316,
            "elapsed_time": 55.10562777519226,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4599.312171936035,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717427271.166005,
            "elapsed_time": 113.35281586647034,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4658.143226623535,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717470399.659313,
            "elapsed_time": 100.16618943214417,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4641.696350097656,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717513548.308033,
            "elapsed_time": 65.2269172668457,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4672.601692199707,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717556908.532078,
            "elapsed_time": 121.13514161109924,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4756.831192016602,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717599953.541575,
            "elapsed_time": 93.26912999153137,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4729.586860656738,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717643156.151312,
            "elapsed_time": 50.69282674789429,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4805.433753967285,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717686335.841173,
            "elapsed_time": 74.53011393547058,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4823.698318481445,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717729580.200953,
            "elapsed_time": 58.37662935256958,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4892.616363525391,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7f0e99af540a333108b92d792923ec7fc9e9fad9",
            "commit_message": "cycleclock: Fix type conversion to match function return type (#1794)\n\nfixes build with clang19\r\n\r\nsrc/cycleclock.h:208:52: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long long') to 'int64_t' (aka 'long long') [-Werror,-Wsign-conversion]\r\n  208 |   return (static_cast<uint64_t>(cycles_hi1) << 32) | cycles_lo;\r\n      |   ~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\r\n1 error generated.",
            "commit_timestamp": 1716952494.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717772740.607702,
            "elapsed_time": 59.04913902282715,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4803.765007019043,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "10199fb48ec4fab83c93ef59c3156ef44584450a",
            "commit_message": "bump standard to C++14 (#1799)\n\n* update requirements to point to our dependencies doc\r\n\r\n* bump standard to c++14",
            "commit_timestamp": 1717770165.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717815932.209779,
            "elapsed_time": 65.06685519218445,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4755.461814880371,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "10199fb48ec4fab83c93ef59c3156ef44584450a",
            "commit_message": "bump standard to C++14 (#1799)\n\n* update requirements to point to our dependencies doc\r\n\r\n* bump standard to c++14",
            "commit_timestamp": 1717770165.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717859141.175879,
            "elapsed_time": 68.6449236869812,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4720.087303161621,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "10199fb48ec4fab83c93ef59c3156ef44584450a",
            "commit_message": "bump standard to C++14 (#1799)\n\n* update requirements to point to our dependencies doc\r\n\r\n* bump standard to c++14",
            "commit_timestamp": 1717770165.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717902330.583689,
            "elapsed_time": 50.146737813949585,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4774.21891784668,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "10199fb48ec4fab83c93ef59c3156ef44584450a",
            "commit_message": "bump standard to C++14 (#1799)\n\n* update requirements to point to our dependencies doc\r\n\r\n* bump standard to c++14",
            "commit_timestamp": 1717770165.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717945485.680331,
            "elapsed_time": 58.03840208053589,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4829.608688354492,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "10199fb48ec4fab83c93ef59c3156ef44584450a",
            "commit_message": "bump standard to C++14 (#1799)\n\n* update requirements to point to our dependencies doc\r\n\r\n* bump standard to c++14",
            "commit_timestamp": 1717770165.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1717988749.448628,
            "elapsed_time": 62.50787138938904,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4700.664993286133,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "10199fb48ec4fab83c93ef59c3156ef44584450a",
            "commit_message": "bump standard to C++14 (#1799)\n\n* update requirements to point to our dependencies doc\r\n\r\n* bump standard to c++14",
            "commit_timestamp": 1717770165.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718031937.496866,
            "elapsed_time": 77.76217079162598,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4774.835090637207,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "2fa4b26e5825d0b17577ae038c3b75e2d6b5418b",
            "commit_message": "Bump minimum required C++ version from C++11 to C++14 (#1800)\n\n",
            "commit_timestamp": 1718014129.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718075149.400233,
            "elapsed_time": 52.59679961204529,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4757.527458190918,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "2fa4b26e5825d0b17577ae038c3b75e2d6b5418b",
            "commit_message": "Bump minimum required C++ version from C++11 to C++14 (#1800)\n\n",
            "commit_timestamp": 1718014129.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718118354.616769,
            "elapsed_time": 70.90506029129028,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4751.386817932129,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8e1823d6f59c1d0fdc084fd903c989e6816ea097",
            "commit_message": "cycleclock: Fix type conversion to match function return type on riscv64 (#1802)\n\nFixes builds with clang\r\n\r\nsrc/cycleclock.h:213:10: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long') to 'int64_t' (aka 'long') [-Werror,-Wsign-conversion]\r\n     213 |   return cycles;\r\n         |   ~~~~~~ ^~~~~~\r\n   1 error generated.",
            "commit_timestamp": 1718109455.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718161526.319596,
            "elapsed_time": 55.52403736114502,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4769.585144042969,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8e1823d6f59c1d0fdc084fd903c989e6816ea097",
            "commit_message": "cycleclock: Fix type conversion to match function return type on riscv64 (#1802)\n\nFixes builds with clang\r\n\r\nsrc/cycleclock.h:213:10: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long') to 'int64_t' (aka 'long') [-Werror,-Wsign-conversion]\r\n     213 |   return cycles;\r\n         |   ~~~~~~ ^~~~~~\r\n   1 error generated.",
            "commit_timestamp": 1718109455.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718204741.825101,
            "elapsed_time": 82.61321568489075,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4594.138687133789,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8e1823d6f59c1d0fdc084fd903c989e6816ea097",
            "commit_message": "cycleclock: Fix type conversion to match function return type on riscv64 (#1802)\n\nFixes builds with clang\r\n\r\nsrc/cycleclock.h:213:10: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long') to 'int64_t' (aka 'long') [-Werror,-Wsign-conversion]\r\n     213 |   return cycles;\r\n         |   ~~~~~~ ^~~~~~\r\n   1 error generated.",
            "commit_timestamp": 1718109455.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718248029.954169,
            "elapsed_time": 87.6860237121582,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4751.612251281738,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8e1823d6f59c1d0fdc084fd903c989e6816ea097",
            "commit_message": "cycleclock: Fix type conversion to match function return type on riscv64 (#1802)\n\nFixes builds with clang\r\n\r\nsrc/cycleclock.h:213:10: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long') to 'int64_t' (aka 'long') [-Werror,-Wsign-conversion]\r\n     213 |   return cycles;\r\n         |   ~~~~~~ ^~~~~~\r\n   1 error generated.",
            "commit_timestamp": 1718109455.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718291159.379992,
            "elapsed_time": 81.11059427261353,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4621.518142700195,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8e1823d6f59c1d0fdc084fd903c989e6816ea097",
            "commit_message": "cycleclock: Fix type conversion to match function return type on riscv64 (#1802)\n\nFixes builds with clang\r\n\r\nsrc/cycleclock.h:213:10: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long') to 'int64_t' (aka 'long') [-Werror,-Wsign-conversion]\r\n     213 |   return cycles;\r\n         |   ~~~~~~ ^~~~~~\r\n   1 error generated.",
            "commit_timestamp": 1718109455.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718334350.952152,
            "elapsed_time": 72.64942383766174,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4500.189208984375,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8e1823d6f59c1d0fdc084fd903c989e6816ea097",
            "commit_message": "cycleclock: Fix type conversion to match function return type on riscv64 (#1802)\n\nFixes builds with clang\r\n\r\nsrc/cycleclock.h:213:10: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long') to 'int64_t' (aka 'long') [-Werror,-Wsign-conversion]\r\n     213 |   return cycles;\r\n         |   ~~~~~~ ^~~~~~\r\n   1 error generated.",
            "commit_timestamp": 1718109455.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718420765.997906,
            "elapsed_time": 86.82313323020935,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4655.117225646973,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8e1823d6f59c1d0fdc084fd903c989e6816ea097",
            "commit_message": "cycleclock: Fix type conversion to match function return type on riscv64 (#1802)\n\nFixes builds with clang\r\n\r\nsrc/cycleclock.h:213:10: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long') to 'int64_t' (aka 'long') [-Werror,-Wsign-conversion]\r\n     213 |   return cycles;\r\n         |   ~~~~~~ ^~~~~~\r\n   1 error generated.",
            "commit_timestamp": 1718109455.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718463963.104469,
            "elapsed_time": 75.00318312644958,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4693.4560470581055,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8e1823d6f59c1d0fdc084fd903c989e6816ea097",
            "commit_message": "cycleclock: Fix type conversion to match function return type on riscv64 (#1802)\n\nFixes builds with clang\r\n\r\nsrc/cycleclock.h:213:10: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long') to 'int64_t' (aka 'long') [-Werror,-Wsign-conversion]\r\n     213 |   return cycles;\r\n         |   ~~~~~~ ^~~~~~\r\n   1 error generated.",
            "commit_timestamp": 1718109455.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718507194.872132,
            "elapsed_time": 91.18874740600586,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4675.5010986328125,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8e1823d6f59c1d0fdc084fd903c989e6816ea097",
            "commit_message": "cycleclock: Fix type conversion to match function return type on riscv64 (#1802)\n\nFixes builds with clang\r\n\r\nsrc/cycleclock.h:213:10: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long') to 'int64_t' (aka 'long') [-Werror,-Wsign-conversion]\r\n     213 |   return cycles;\r\n         |   ~~~~~~ ^~~~~~\r\n   1 error generated.",
            "commit_timestamp": 1718109455.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718550350.05462,
            "elapsed_time": 81.81357073783875,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4631.646820068359,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8e1823d6f59c1d0fdc084fd903c989e6816ea097",
            "commit_message": "cycleclock: Fix type conversion to match function return type on riscv64 (#1802)\n\nFixes builds with clang\r\n\r\nsrc/cycleclock.h:213:10: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long') to 'int64_t' (aka 'long') [-Werror,-Wsign-conversion]\r\n     213 |   return cycles;\r\n         |   ~~~~~~ ^~~~~~\r\n   1 error generated.",
            "commit_timestamp": 1718109455.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718593618.535165,
            "elapsed_time": 62.665581941604614,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4600.659034729004,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "8e1823d6f59c1d0fdc084fd903c989e6816ea097",
            "commit_message": "cycleclock: Fix type conversion to match function return type on riscv64 (#1802)\n\nFixes builds with clang\r\n\r\nsrc/cycleclock.h:213:10: error: implicit conversion changes signedness: 'uint64_t' (aka 'unsigned long') to 'int64_t' (aka 'long') [-Werror,-Wsign-conversion]\r\n     213 |   return cycles;\r\n         |   ~~~~~~ ^~~~~~\r\n   1 error generated.",
            "commit_timestamp": 1718109455.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718636773.343018,
            "elapsed_time": 63.48031687736511,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4795.378852844238,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "447752540c71f34d5d71046e08192db181e9b02b",
            "commit_message": "[bazel] Use `includes` instead of `strip_include_prefix` (#1803)\n\nWhen using `includes`, consumers will apply the headers\r\nusing `-isystem`, instead of `-I`. This will allow diagnostics\r\nof consumers to not apply to `benchmark`.\r\n\r\nMore info:\r\n\r\nhttps://bazel.build/reference/be/c-cpp#cc_library.includes\r\n\r\nhttps://bazel.build/reference/be/c-cpp#cc_library.strip_include_prefix\r\n\r\ngtest uses `includes` as well:\r\nhttps://github.com/google/googletest/blob/1d17ea141d2c11b8917d2c7d029f1c4e2b9769b2/BUILD.bazel#L120",
            "commit_timestamp": 1718613512.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718679983.173346,
            "elapsed_time": 80.47683501243591,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4618.705909729004,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "447752540c71f34d5d71046e08192db181e9b02b",
            "commit_message": "[bazel] Use `includes` instead of `strip_include_prefix` (#1803)\n\nWhen using `includes`, consumers will apply the headers\r\nusing `-isystem`, instead of `-I`. This will allow diagnostics\r\nof consumers to not apply to `benchmark`.\r\n\r\nMore info:\r\n\r\nhttps://bazel.build/reference/be/c-cpp#cc_library.includes\r\n\r\nhttps://bazel.build/reference/be/c-cpp#cc_library.strip_include_prefix\r\n\r\ngtest uses `includes` as well:\r\nhttps://github.com/google/googletest/blob/1d17ea141d2c11b8917d2c7d029f1c4e2b9769b2/BUILD.bazel#L120",
            "commit_timestamp": 1718613512.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718723207.377438,
            "elapsed_time": 109.3357412815094,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4668.407852172852,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "447752540c71f34d5d71046e08192db181e9b02b",
            "commit_message": "[bazel] Use `includes` instead of `strip_include_prefix` (#1803)\n\nWhen using `includes`, consumers will apply the headers\r\nusing `-isystem`, instead of `-I`. This will allow diagnostics\r\nof consumers to not apply to `benchmark`.\r\n\r\nMore info:\r\n\r\nhttps://bazel.build/reference/be/c-cpp#cc_library.includes\r\n\r\nhttps://bazel.build/reference/be/c-cpp#cc_library.strip_include_prefix\r\n\r\ngtest uses `includes` as well:\r\nhttps://github.com/google/googletest/blob/1d17ea141d2c11b8917d2c7d029f1c4e2b9769b2/BUILD.bazel#L120",
            "commit_timestamp": 1718613512.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718766377.060904,
            "elapsed_time": 57.618088245391846,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4698.548812866211,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "447752540c71f34d5d71046e08192db181e9b02b",
            "commit_message": "[bazel] Use `includes` instead of `strip_include_prefix` (#1803)\n\nWhen using `includes`, consumers will apply the headers\r\nusing `-isystem`, instead of `-I`. This will allow diagnostics\r\nof consumers to not apply to `benchmark`.\r\n\r\nMore info:\r\n\r\nhttps://bazel.build/reference/be/c-cpp#cc_library.includes\r\n\r\nhttps://bazel.build/reference/be/c-cpp#cc_library.strip_include_prefix\r\n\r\ngtest uses `includes` as well:\r\nhttps://github.com/google/googletest/blob/1d17ea141d2c11b8917d2c7d029f1c4e2b9769b2/BUILD.bazel#L120",
            "commit_timestamp": 1718613512.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718809512.778897,
            "elapsed_time": 61.33872175216675,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4683.8703536987305,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "447752540c71f34d5d71046e08192db181e9b02b",
            "commit_message": "[bazel] Use `includes` instead of `strip_include_prefix` (#1803)\n\nWhen using `includes`, consumers will apply the headers\r\nusing `-isystem`, instead of `-I`. This will allow diagnostics\r\nof consumers to not apply to `benchmark`.\r\n\r\nMore info:\r\n\r\nhttps://bazel.build/reference/be/c-cpp#cc_library.includes\r\n\r\nhttps://bazel.build/reference/be/c-cpp#cc_library.strip_include_prefix\r\n\r\ngtest uses `includes` as well:\r\nhttps://github.com/google/googletest/blob/1d17ea141d2c11b8917d2c7d029f1c4e2b9769b2/BUILD.bazel#L120",
            "commit_timestamp": 1718613512.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718852758.798367,
            "elapsed_time": 57.39362168312073,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4700.020729064941,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718896018.571453,
            "elapsed_time": 85.041907787323,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4691.727462768555,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718939219.694282,
            "elapsed_time": 83.35880875587463,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4603.525924682617,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1718982548.483005,
            "elapsed_time": 89.60514521598816,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4646.94010925293,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719025540.87777,
            "elapsed_time": 82.48435974121094,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4714.183929443359,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719068695.582998,
            "elapsed_time": 52.45652532577515,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4667.776756286621,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719111954.615578,
            "elapsed_time": 65.15316462516785,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4821.126937866211,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719155110.410984,
            "elapsed_time": 53.398324489593506,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4877.175537109375,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719198335.482724,
            "elapsed_time": 67.53343749046326,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4729.584999084473,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719241544.357997,
            "elapsed_time": 65.35091757774353,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4737.904769897461,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719284802.309619,
            "elapsed_time": 69.08302283287048,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4747.896697998047,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719327937.543087,
            "elapsed_time": 82.73814702033997,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4737.6232833862305,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719371189.698146,
            "elapsed_time": 79.84340143203735,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4580.741767883301,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719414404.428735,
            "elapsed_time": 89.22757887840271,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4671.678932189941,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719457554.963102,
            "elapsed_time": 60.33328890800476,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4876.206962585449,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719500720.096607,
            "elapsed_time": 60.037147521972656,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4730.549667358398,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719543991.015807,
            "elapsed_time": 66.44390177726746,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4807.057746887207,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719587210.129694,
            "elapsed_time": 85.12613201141357,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4744.493927001953,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719630309.924916,
            "elapsed_time": 48.071431398391724,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4811.322113037109,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719673502.953478,
            "elapsed_time": 49.99657416343689,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4779.422187805176,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719716706.231776,
            "elapsed_time": 49.364278078079224,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4776.683876037598,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719759966.7612,
            "elapsed_time": 64.57515358924866,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4785.987571716309,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719803143.689004,
            "elapsed_time": 58.8858745098114,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4920.873664855957,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719846359.215147,
            "elapsed_time": 57.32570219039917,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4909.369537353516,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719889563.279837,
            "elapsed_time": 67.34575247764587,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4808.335144042969,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719932712.994271,
            "elapsed_time": 51.81439709663391,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4788.492752075195,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1719976367.227574,
            "elapsed_time": 70.3426775932312,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4771.528381347656,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720019136.70978,
            "elapsed_time": 63.4103467464447,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4876.225654602051,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "c2146397ac69e6589a50f6b4fc6a7355669caed5",
            "commit_message": "Find libpfm dependency in installed CMake configs (#1806)\n\nCurrently, Google Benchmark can be built and installed with support for\r\nlibpfm, but this can cause a problem if that installation is later\r\ncalled upon by another CMake project. Indeed, while the installed CMake\r\nconfiguration script correctly identifies that it needs to link against\r\nlibpfm, it doesn't try to find libpfm, meaning that the target will be\r\nunavailable. This commit fixes this potential configuration-time error\r\nby ensuring that an installation of Google Benchmark will correctly try\r\nto find the libpfm dependency when it is used elsewhere.",
            "commit_timestamp": 1718820222.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720062339.044523,
            "elapsed_time": 57.36572623252869,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4894.475189208984,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720105525.431456,
            "elapsed_time": 67.79198384284973,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4809.186653137207,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720148759.90501,
            "elapsed_time": 61.6277334690094,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4885.85977935791,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720191886.005964,
            "elapsed_time": 48.96317982673645,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4754.9383544921875,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720235159.782187,
            "elapsed_time": 48.5463285446167,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4800.279830932617,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720278373.766905,
            "elapsed_time": 55.798879623413086,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4883.583724975586,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720321593.326174,
            "elapsed_time": 53.25509428977966,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4805.254753112793,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720364715.469435,
            "elapsed_time": 49.78199052810669,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4717.176971435547,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720407915.120853,
            "elapsed_time": 50.616291999816895,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4834.290306091309,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720451080.537399,
            "elapsed_time": 51.33862280845642,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4761.107467651367,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720494406.899257,
            "elapsed_time": 58.284916400909424,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4891.930236816406,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720537526.99249,
            "elapsed_time": 63.17505097389221,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4925.939727783203,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720580818.595897,
            "elapsed_time": 60.76072669029236,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4948.859413146973,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720624028.828513,
            "elapsed_time": 73.51794219017029,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4944.089317321777,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720667221.97423,
            "elapsed_time": 78.14116978645325,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4777.454833984375,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720710306.900987,
            "elapsed_time": 57.968753814697266,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4823.599945068359,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720753576.505933,
            "elapsed_time": 67.11662316322327,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4871.915863037109,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "71f4218c1abf471eed27ccfbf98055a90ace39f6",
            "commit_message": "Add -lkstat to the .pc for Solaris (#1801)\n\n* Add -lkstat to the .pc for Solaris\r\n\r\nThis fixes linking for projects that rely on pkg-config to generate the\r\nlink line on Solaris.\r\n\r\nTest plan: Built the project locally on Solaris and verified -kstat\r\nappears in the .pc file\r\n\r\n```\r\n$ cat lib/pkgconfig/benchmark.pc  | grep Libs.private\r\nLibs.private: -lpthread -lkstat\r\n```\r\n\r\n* Use BENCHMARK_PRIVATE_LINK_LIBRARIES",
            "commit_timestamp": 1720030603.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720796770.317455,
            "elapsed_time": 74.27946782112122,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4679.275505065918,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "38df9daf489f7e359bbe6709099f0102398261d6",
            "commit_message": "add PERF_FORMAT_TOTAL_TIME_{ENABLED,RUNNING} to support multiplexing (#1814)\n\n",
            "commit_timestamp": 1720776496.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720839921.703183,
            "elapsed_time": 73.14831018447876,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4749.615013122559,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "38df9daf489f7e359bbe6709099f0102398261d6",
            "commit_message": "add PERF_FORMAT_TOTAL_TIME_{ENABLED,RUNNING} to support multiplexing (#1814)\n\n",
            "commit_timestamp": 1720776496.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720883131.137667,
            "elapsed_time": 76.1540277004242,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4811.609550476074,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "38df9daf489f7e359bbe6709099f0102398261d6",
            "commit_message": "add PERF_FORMAT_TOTAL_TIME_{ENABLED,RUNNING} to support multiplexing (#1814)\n\n",
            "commit_timestamp": 1720776496.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720926354.809931,
            "elapsed_time": 58.97865271568298,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4819.1540603637695,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "38df9daf489f7e359bbe6709099f0102398261d6",
            "commit_message": "add PERF_FORMAT_TOTAL_TIME_{ENABLED,RUNNING} to support multiplexing (#1814)\n\n",
            "commit_timestamp": 1720776496.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1720969749.809557,
            "elapsed_time": 57.27714014053345,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4842.074157714844,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "38df9daf489f7e359bbe6709099f0102398261d6",
            "commit_message": "add PERF_FORMAT_TOTAL_TIME_{ENABLED,RUNNING} to support multiplexing (#1814)\n\n",
            "commit_timestamp": 1720776496.0
        },
        {
            "tool_version": "241.0.20240506.152321",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721012786.940938,
            "elapsed_time": 54.98600244522095,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4937.6899490356445,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "38df9daf489f7e359bbe6709099f0102398261d6",
            "commit_message": "add PERF_FORMAT_TOTAL_TIME_{ENABLED,RUNNING} to support multiplexing (#1814)\n\n",
            "commit_timestamp": 1720776496.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721034939.790809,
            "elapsed_time": 82.68356108665466,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4909.660316467285,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "38df9daf489f7e359bbe6709099f0102398261d6",
            "commit_message": "add PERF_FORMAT_TOTAL_TIME_{ENABLED,RUNNING} to support multiplexing (#1814)\n\n",
            "commit_timestamp": 1720776496.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721055991.484715,
            "elapsed_time": 66.29662823677063,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4884.366844177246,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "38df9daf489f7e359bbe6709099f0102398261d6",
            "commit_message": "add PERF_FORMAT_TOTAL_TIME_{ENABLED,RUNNING} to support multiplexing (#1814)\n\n",
            "commit_timestamp": 1720776496.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721099220.918366,
            "elapsed_time": 77.558420419693,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4949.830825805664,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "38df9daf489f7e359bbe6709099f0102398261d6",
            "commit_message": "add PERF_FORMAT_TOTAL_TIME_{ENABLED,RUNNING} to support multiplexing (#1814)\n\n",
            "commit_timestamp": 1720776496.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721120069.600464,
            "elapsed_time": 51.32726049423218,
            "x64": true,
            "actual_files_count": 86,
            "expected_files_count": 86,
            "memory_traffic": 4943.385688781738,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "d2cd246e19bdf4de9fe357daec52cbe38303d9d6",
            "commit_message": "Clarify the difference between `BENCHMARK_TEMPLATE_F` and `BENCHMARK_TEMPLATE_DEFINE_F` + `BENCHMARK_REGISTER_F` (#1815)\n\n* Clarify BENCHMARK_REGISTER_F\r\n\r\nAdd comments highlighting the difference between `BENCHMARK_TEMPLATE_F` and `BENCHMARK_TEMPLATE_DEFINE_F`, mirroring those of `BENCHMARK_F ` and `BENCHMARK_DEFINE_F`.\r\n\r\n* More informative comments.\r\n\r\n* Update user_guide.md",
            "commit_timestamp": 1721119916.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721142311.655102,
            "elapsed_time": 61.19306230545044,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4939.243301391602,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "7c8ed6b082aa3c7a3402f18e50da4480421d08fd",
            "commit_message": "[FR] Add API to provide custom profilers #1807 (#1809)\n\nThis API is akin to the MemoryManager API and lets tools provide\r\ntheir own profiler which is wrapped in the same way MemoryManager is\r\nwrapped. Namely, the profiler provides Start/Stop methods that are called\r\nat the start/end of running the benchmark in a separate pass.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1721120200.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721185542.132497,
            "elapsed_time": 63.27037954330444,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 5076.126335144043,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "65668db27365d29ca4890cb2102e81acb6585b43",
            "commit_message": "revert perf counters change until we can do the full version\n",
            "commit_timestamp": 1721148330.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721228823.777678,
            "elapsed_time": 57.4590380191803,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4972.891830444336,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "299a8b881df5fcd9e2130919c818bb15762b8d28",
            "commit_message": "clang format header fixes\n",
            "commit_timestamp": 1721219261.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721271961.64559,
            "elapsed_time": 52.18551254272461,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 5014.398010253906,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "ad2b1c9ed1ec3120fdf68ad9877ab20681ceb09d",
            "commit_message": "clang format yet again\n",
            "commit_timestamp": 1721231352.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721315163.135256,
            "elapsed_time": 62.15549182891846,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4907.605438232422,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "a6ad7fbbdc2e14fab82bb8a6d27760d700198cbf",
            "commit_message": "preparing for v1.8.5\n",
            "commit_timestamp": 1721297584.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721358425.732356,
            "elapsed_time": 64.64602422714233,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4941.5683670043945,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "64b5d8cd111721e4e3e0174825b04eb95309df96",
            "commit_message": "Update benchmark Python bindings for nanobind 2.0, and update to nanobind 2.0. (#1817)\n\nIncorporates the nanobind_bazel change from https://github.com/google/benchmark/pull/1795.\r\n\r\nnanobind 2.0 reworked the nanobind::enum_ class so it uses a real Python enum or intenum rather than its previous hand-rolled implementation.\r\nhttps://nanobind.readthedocs.io/en/latest/changelog.html#version-2-0-0-may-23-2024\r\n\r\nAs a consequence of that change, nanobind now checks when casting an integer to a enum value that the integer corresponds to a valid enum. Counter::Flags is a bitmask, and many combinations are not valid enum members.\r\n\r\nThis change:\r\na) sets nb::is_arithmetic(), which means Counter::Flags becomes an IntEnum that can be freely cast to an integer.\r\nb) defines the | operator for flags to return an integer, not an enum, avoiding the error.\r\nc) changes Counter's constructor to accept an int, not a Counter::Flags enum. Since Counter::Flags is an IntEnum now, it can be freely coerced to an int.\r\n\r\nIf https://github.com/wjakob/nanobind/pull/599 is merged into nanobind, then we can perhaps use a flag enum here instead.",
            "commit_timestamp": 1721318042.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721401600.339607,
            "elapsed_time": 74.21517729759216,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4948.44278717041,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "64b5d8cd111721e4e3e0174825b04eb95309df96",
            "commit_message": "Update benchmark Python bindings for nanobind 2.0, and update to nanobind 2.0. (#1817)\n\nIncorporates the nanobind_bazel change from https://github.com/google/benchmark/pull/1795.\r\n\r\nnanobind 2.0 reworked the nanobind::enum_ class so it uses a real Python enum or intenum rather than its previous hand-rolled implementation.\r\nhttps://nanobind.readthedocs.io/en/latest/changelog.html#version-2-0-0-may-23-2024\r\n\r\nAs a consequence of that change, nanobind now checks when casting an integer to a enum value that the integer corresponds to a valid enum. Counter::Flags is a bitmask, and many combinations are not valid enum members.\r\n\r\nThis change:\r\na) sets nb::is_arithmetic(), which means Counter::Flags becomes an IntEnum that can be freely cast to an integer.\r\nb) defines the | operator for flags to return an integer, not an enum, avoiding the error.\r\nc) changes Counter's constructor to accept an int, not a Counter::Flags enum. Since Counter::Flags is an IntEnum now, it can be freely coerced to an int.\r\n\r\nIf https://github.com/wjakob/nanobind/pull/599 is merged into nanobind, then we can perhaps use a flag enum here instead.",
            "commit_timestamp": 1721318042.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721444715.703051,
            "elapsed_time": 52.240397214889526,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4974.514877319336,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "64b5d8cd111721e4e3e0174825b04eb95309df96",
            "commit_message": "Update benchmark Python bindings for nanobind 2.0, and update to nanobind 2.0. (#1817)\n\nIncorporates the nanobind_bazel change from https://github.com/google/benchmark/pull/1795.\r\n\r\nnanobind 2.0 reworked the nanobind::enum_ class so it uses a real Python enum or intenum rather than its previous hand-rolled implementation.\r\nhttps://nanobind.readthedocs.io/en/latest/changelog.html#version-2-0-0-may-23-2024\r\n\r\nAs a consequence of that change, nanobind now checks when casting an integer to a enum value that the integer corresponds to a valid enum. Counter::Flags is a bitmask, and many combinations are not valid enum members.\r\n\r\nThis change:\r\na) sets nb::is_arithmetic(), which means Counter::Flags becomes an IntEnum that can be freely cast to an integer.\r\nb) defines the | operator for flags to return an integer, not an enum, avoiding the error.\r\nc) changes Counter's constructor to accept an int, not a Counter::Flags enum. Since Counter::Flags is an IntEnum now, it can be freely coerced to an int.\r\n\r\nIf https://github.com/wjakob/nanobind/pull/599 is merged into nanobind, then we can perhaps use a flag enum here instead.",
            "commit_timestamp": 1721318042.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721487920.569019,
            "elapsed_time": 73.47244262695312,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 5082.900199890137,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "64b5d8cd111721e4e3e0174825b04eb95309df96",
            "commit_message": "Update benchmark Python bindings for nanobind 2.0, and update to nanobind 2.0. (#1817)\n\nIncorporates the nanobind_bazel change from https://github.com/google/benchmark/pull/1795.\r\n\r\nnanobind 2.0 reworked the nanobind::enum_ class so it uses a real Python enum or intenum rather than its previous hand-rolled implementation.\r\nhttps://nanobind.readthedocs.io/en/latest/changelog.html#version-2-0-0-may-23-2024\r\n\r\nAs a consequence of that change, nanobind now checks when casting an integer to a enum value that the integer corresponds to a valid enum. Counter::Flags is a bitmask, and many combinations are not valid enum members.\r\n\r\nThis change:\r\na) sets nb::is_arithmetic(), which means Counter::Flags becomes an IntEnum that can be freely cast to an integer.\r\nb) defines the | operator for flags to return an integer, not an enum, avoiding the error.\r\nc) changes Counter's constructor to accept an int, not a Counter::Flags enum. Since Counter::Flags is an IntEnum now, it can be freely coerced to an int.\r\n\r\nIf https://github.com/wjakob/nanobind/pull/599 is merged into nanobind, then we can perhaps use a flag enum here instead.",
            "commit_timestamp": 1721318042.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721531115.266824,
            "elapsed_time": 57.85478854179382,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4976.429145812988,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "64b5d8cd111721e4e3e0174825b04eb95309df96",
            "commit_message": "Update benchmark Python bindings for nanobind 2.0, and update to nanobind 2.0. (#1817)\n\nIncorporates the nanobind_bazel change from https://github.com/google/benchmark/pull/1795.\r\n\r\nnanobind 2.0 reworked the nanobind::enum_ class so it uses a real Python enum or intenum rather than its previous hand-rolled implementation.\r\nhttps://nanobind.readthedocs.io/en/latest/changelog.html#version-2-0-0-may-23-2024\r\n\r\nAs a consequence of that change, nanobind now checks when casting an integer to a enum value that the integer corresponds to a valid enum. Counter::Flags is a bitmask, and many combinations are not valid enum members.\r\n\r\nThis change:\r\na) sets nb::is_arithmetic(), which means Counter::Flags becomes an IntEnum that can be freely cast to an integer.\r\nb) defines the | operator for flags to return an integer, not an enum, avoiding the error.\r\nc) changes Counter's constructor to accept an int, not a Counter::Flags enum. Since Counter::Flags is an IntEnum now, it can be freely coerced to an int.\r\n\r\nIf https://github.com/wjakob/nanobind/pull/599 is merged into nanobind, then we can perhaps use a flag enum here instead.",
            "commit_timestamp": 1721318042.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721574360.708351,
            "elapsed_time": 56.461660861968994,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4902.656539916992,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "64b5d8cd111721e4e3e0174825b04eb95309df96",
            "commit_message": "Update benchmark Python bindings for nanobind 2.0, and update to nanobind 2.0. (#1817)\n\nIncorporates the nanobind_bazel change from https://github.com/google/benchmark/pull/1795.\r\n\r\nnanobind 2.0 reworked the nanobind::enum_ class so it uses a real Python enum or intenum rather than its previous hand-rolled implementation.\r\nhttps://nanobind.readthedocs.io/en/latest/changelog.html#version-2-0-0-may-23-2024\r\n\r\nAs a consequence of that change, nanobind now checks when casting an integer to a enum value that the integer corresponds to a valid enum. Counter::Flags is a bitmask, and many combinations are not valid enum members.\r\n\r\nThis change:\r\na) sets nb::is_arithmetic(), which means Counter::Flags becomes an IntEnum that can be freely cast to an integer.\r\nb) defines the | operator for flags to return an integer, not an enum, avoiding the error.\r\nc) changes Counter's constructor to accept an int, not a Counter::Flags enum. Since Counter::Flags is an IntEnum now, it can be freely coerced to an int.\r\n\r\nIf https://github.com/wjakob/nanobind/pull/599 is merged into nanobind, then we can perhaps use a flag enum here instead.",
            "commit_timestamp": 1721318042.0
        },
        {
            "tool_version": "242.0.20240710.160624-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721617648.795641,
            "elapsed_time": 67.12526726722717,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 5087.5888595581055,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "64b5d8cd111721e4e3e0174825b04eb95309df96",
            "commit_message": "Update benchmark Python bindings for nanobind 2.0, and update to nanobind 2.0. (#1817)\n\nIncorporates the nanobind_bazel change from https://github.com/google/benchmark/pull/1795.\r\n\r\nnanobind 2.0 reworked the nanobind::enum_ class so it uses a real Python enum or intenum rather than its previous hand-rolled implementation.\r\nhttps://nanobind.readthedocs.io/en/latest/changelog.html#version-2-0-0-may-23-2024\r\n\r\nAs a consequence of that change, nanobind now checks when casting an integer to a enum value that the integer corresponds to a valid enum. Counter::Flags is a bitmask, and many combinations are not valid enum members.\r\n\r\nThis change:\r\na) sets nb::is_arithmetic(), which means Counter::Flags becomes an IntEnum that can be freely cast to an integer.\r\nb) defines the | operator for flags to return an integer, not an enum, avoiding the error.\r\nc) changes Counter's constructor to accept an int, not a Counter::Flags enum. Since Counter::Flags is an IntEnum now, it can be freely coerced to an int.\r\n\r\nIf https://github.com/wjakob/nanobind/pull/599 is merged into nanobind, then we can perhaps use a flag enum here instead.",
            "commit_timestamp": 1721318042.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721638226.614441,
            "elapsed_time": 67.24889016151428,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4859.992324829102,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "64b5d8cd111721e4e3e0174825b04eb95309df96",
            "commit_message": "Update benchmark Python bindings for nanobind 2.0, and update to nanobind 2.0. (#1817)\n\nIncorporates the nanobind_bazel change from https://github.com/google/benchmark/pull/1795.\r\n\r\nnanobind 2.0 reworked the nanobind::enum_ class so it uses a real Python enum or intenum rather than its previous hand-rolled implementation.\r\nhttps://nanobind.readthedocs.io/en/latest/changelog.html#version-2-0-0-may-23-2024\r\n\r\nAs a consequence of that change, nanobind now checks when casting an integer to a enum value that the integer corresponds to a valid enum. Counter::Flags is a bitmask, and many combinations are not valid enum members.\r\n\r\nThis change:\r\na) sets nb::is_arithmetic(), which means Counter::Flags becomes an IntEnum that can be freely cast to an integer.\r\nb) defines the | operator for flags to return an integer, not an enum, avoiding the error.\r\nc) changes Counter's constructor to accept an int, not a Counter::Flags enum. Since Counter::Flags is an IntEnum now, it can be freely coerced to an int.\r\n\r\nIf https://github.com/wjakob/nanobind/pull/599 is merged into nanobind, then we can perhaps use a flag enum here instead.",
            "commit_timestamp": 1721318042.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721641195.191153,
            "elapsed_time": 98.29710626602173,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4927.059509277344,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "64b5d8cd111721e4e3e0174825b04eb95309df96",
            "commit_message": "Update benchmark Python bindings for nanobind 2.0, and update to nanobind 2.0. (#1817)\n\nIncorporates the nanobind_bazel change from https://github.com/google/benchmark/pull/1795.\r\n\r\nnanobind 2.0 reworked the nanobind::enum_ class so it uses a real Python enum or intenum rather than its previous hand-rolled implementation.\r\nhttps://nanobind.readthedocs.io/en/latest/changelog.html#version-2-0-0-may-23-2024\r\n\r\nAs a consequence of that change, nanobind now checks when casting an integer to a enum value that the integer corresponds to a valid enum. Counter::Flags is a bitmask, and many combinations are not valid enum members.\r\n\r\nThis change:\r\na) sets nb::is_arithmetic(), which means Counter::Flags becomes an IntEnum that can be freely cast to an integer.\r\nb) defines the | operator for flags to return an integer, not an enum, avoiding the error.\r\nc) changes Counter's constructor to accept an int, not a Counter::Flags enum. Since Counter::Flags is an IntEnum now, it can be freely coerced to an int.\r\n\r\nIf https://github.com/wjakob/nanobind/pull/599 is merged into nanobind, then we can perhaps use a flag enum here instead.",
            "commit_timestamp": 1721318042.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721660748.619264,
            "elapsed_time": 55.330711364746094,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4896.182182312012,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "64b5d8cd111721e4e3e0174825b04eb95309df96",
            "commit_message": "Update benchmark Python bindings for nanobind 2.0, and update to nanobind 2.0. (#1817)\n\nIncorporates the nanobind_bazel change from https://github.com/google/benchmark/pull/1795.\r\n\r\nnanobind 2.0 reworked the nanobind::enum_ class so it uses a real Python enum or intenum rather than its previous hand-rolled implementation.\r\nhttps://nanobind.readthedocs.io/en/latest/changelog.html#version-2-0-0-may-23-2024\r\n\r\nAs a consequence of that change, nanobind now checks when casting an integer to a enum value that the integer corresponds to a valid enum. Counter::Flags is a bitmask, and many combinations are not valid enum members.\r\n\r\nThis change:\r\na) sets nb::is_arithmetic(), which means Counter::Flags becomes an IntEnum that can be freely cast to an integer.\r\nb) defines the | operator for flags to return an integer, not an enum, avoiding the error.\r\nc) changes Counter's constructor to accept an int, not a Counter::Flags enum. Since Counter::Flags is an IntEnum now, it can be freely coerced to an int.\r\n\r\nIf https://github.com/wjakob/nanobind/pull/599 is merged into nanobind, then we can perhaps use a flag enum here instead.",
            "commit_timestamp": 1721318042.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721703940.460364,
            "elapsed_time": 66.49532628059387,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4986.2770919799805,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "64b5d8cd111721e4e3e0174825b04eb95309df96",
            "commit_message": "Update benchmark Python bindings for nanobind 2.0, and update to nanobind 2.0. (#1817)\n\nIncorporates the nanobind_bazel change from https://github.com/google/benchmark/pull/1795.\r\n\r\nnanobind 2.0 reworked the nanobind::enum_ class so it uses a real Python enum or intenum rather than its previous hand-rolled implementation.\r\nhttps://nanobind.readthedocs.io/en/latest/changelog.html#version-2-0-0-may-23-2024\r\n\r\nAs a consequence of that change, nanobind now checks when casting an integer to a enum value that the integer corresponds to a valid enum. Counter::Flags is a bitmask, and many combinations are not valid enum members.\r\n\r\nThis change:\r\na) sets nb::is_arithmetic(), which means Counter::Flags becomes an IntEnum that can be freely cast to an integer.\r\nb) defines the | operator for flags to return an integer, not an enum, avoiding the error.\r\nc) changes Counter's constructor to accept an int, not a Counter::Flags enum. Since Counter::Flags is an IntEnum now, it can be freely coerced to an int.\r\n\r\nIf https://github.com/wjakob/nanobind/pull/599 is merged into nanobind, then we can perhaps use a flag enum here instead.",
            "commit_timestamp": 1721318042.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721747244.046134,
            "elapsed_time": 77.73374843597412,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 5173.871871948242,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "df44bf7187fb5df0029979ff5a6d3cdd2f25eb59",
            "commit_message": "Revert to token authentication for PyPI wheel uploads (#1819)\n\nUntil the PyPI account is recovered, it should be possible to upload\r\nwheels with the GitHub secrets that were previously used.\r\n\r\nChanges the PyPI upload action sourcing to point to the v1 stable release\r\nbranch, which receives rolling updates and is the canonical way of\r\nincluding the wheel publishing action.\r\n\r\nUploading will probably need another release, because setuptools_scm\r\nneeds to produce a clean tag that the PyPI API allows as an upload.",
            "commit_timestamp": 1721742546.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721790508.246467,
            "elapsed_time": 113.87978649139404,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4944.04679107666,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "df44bf7187fb5df0029979ff5a6d3cdd2f25eb59",
            "commit_message": "Revert to token authentication for PyPI wheel uploads (#1819)\n\nUntil the PyPI account is recovered, it should be possible to upload\r\nwheels with the GitHub secrets that were previously used.\r\n\r\nChanges the PyPI upload action sourcing to point to the v1 stable release\r\nbranch, which receives rolling updates and is the canonical way of\r\nincluding the wheel publishing action.\r\n\r\nUploading will probably need another release, because setuptools_scm\r\nneeds to produce a clean tag that the PyPI API allows as an upload.",
            "commit_timestamp": 1721742546.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721833638.371275,
            "elapsed_time": 89.93001818656921,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 5033.647422790527,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721876779.93144,
            "elapsed_time": 73.1700918674469,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 5042.793121337891,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721920025.69459,
            "elapsed_time": 114.1162703037262,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4901.826957702637,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1721963255.669225,
            "elapsed_time": 87.34846568107605,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4871.963066101074,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722006378.076229,
            "elapsed_time": 77.05416584014893,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 5064.107879638672,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722049670.717965,
            "elapsed_time": 85.93492412567139,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4986.509841918945,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722092732.820245,
            "elapsed_time": 59.674306869506836,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4902.422676086426,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722135942.011459,
            "elapsed_time": 74.88711977005005,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 5130.235092163086,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722179122.641728,
            "elapsed_time": 56.81650424003601,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4890.76676940918,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722185633.333248,
            "elapsed_time": 74.91789674758911,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4907.638076782227,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722222353.937037,
            "elapsed_time": 64.10487914085388,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4835.971855163574,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722265569.240714,
            "elapsed_time": 94.6802933216095,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4895.100234985352,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722276782.264644,
            "elapsed_time": 53.86483716964722,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4968.902755737305,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722308781.592316,
            "elapsed_time": 79.91631031036377,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4913.120864868164,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "378fe693a1ef51500db21b11ff05a8018c5f0e55",
            "commit_message": "Use log2 now that NDK requires at least API 21 which includes it. (#1822)\n\nFixes #1820",
            "commit_timestamp": 1721827532.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722352015.331097,
            "elapsed_time": 95.85221362113953,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4933.49161529541,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "25e5c52a112a56acdc37cace73025f7327f03be7",
            "commit_message": "Bump nanobind-bazel to v2.1.0, add stubgen target (#1824)\n\nAdds a stub file for the `google_benchmark._benchmark` submodule,\r\ngenerated with the new `nanobind_stubgen` rule released in nanobind_bazel\r\nv2.1.0.\r\n\r\nTweaks the setup.py logic a little bit to package stub files with the\r\nrest of the build artifacts. Also explicitly adds the generated stub and\r\nmarker files to the list of package data artifacts.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1722350973.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722395350.16068,
            "elapsed_time": 113.86049962043762,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4923.990158081055,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "25e5c52a112a56acdc37cace73025f7327f03be7",
            "commit_message": "Bump nanobind-bazel to v2.1.0, add stubgen target (#1824)\n\nAdds a stub file for the `google_benchmark._benchmark` submodule,\r\ngenerated with the new `nanobind_stubgen` rule released in nanobind_bazel\r\nv2.1.0.\r\n\r\nTweaks the setup.py logic a little bit to package stub files with the\r\nrest of the build artifacts. Also explicitly adds the generated stub and\r\nmarker files to the list of package data artifacts.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1722350973.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722436761.373931,
            "elapsed_time": 62.542250633239746,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4887.261688232422,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "25e5c52a112a56acdc37cace73025f7327f03be7",
            "commit_message": "Bump nanobind-bazel to v2.1.0, add stubgen target (#1824)\n\nAdds a stub file for the `google_benchmark._benchmark` submodule,\r\ngenerated with the new `nanobind_stubgen` rule released in nanobind_bazel\r\nv2.1.0.\r\n\r\nTweaks the setup.py logic a little bit to package stub files with the\r\nrest of the build artifacts. Also explicitly adds the generated stub and\r\nmarker files to the list of package data artifacts.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1722350973.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1722438308.16867,
            "elapsed_time": 53.32495045661926,
            "x64": true,
            "actual_files_count": 88,
            "expected_files_count": 86,
            "memory_traffic": 4954.802673339844,
            "repo_url": "https://github.com/google/benchmark.git",
            "commit_ref": "25e5c52a112a56acdc37cace73025f7327f03be7",
            "commit_message": "Bump nanobind-bazel to v2.1.0, add stubgen target (#1824)\n\nAdds a stub file for the `google_benchmark._benchmark` submodule,\r\ngenerated with the new `nanobind_stubgen` rule released in nanobind_bazel\r\nv2.1.0.\r\n\r\nTweaks the setup.py logic a little bit to package stub files with the\r\nrest of the build artifacts. Also explicitly adds the generated stub and\r\nmarker files to the list of package data artifacts.\r\n\r\nCo-authored-by: dominic <510002+dmah42@users.noreply.github.com>",
            "commit_timestamp": 1722350973.0
        }
    ]
}