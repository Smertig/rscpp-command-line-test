{
    "v1": [
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": true,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722185785.548727,
            "elapsed_time": 88.98341798782349,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6628.4228515625,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "991192b211212aa366bf73b993ac444839c10bf5",
            "commit_message": "[Sparc] Remove custom lowering for ADD[CE] / SUB[CE] (#100861)\n\nThe default lowering produces fewer instructions.",
            "commit_timestamp": 1722180160.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": true,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722222554.75982,
            "elapsed_time": 87.42598843574524,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6621.699142456055,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "71d85ca2f9dba7f08a7a84c6cff5396ed594cb3c",
            "commit_message": "[RISCV][CFI] Emit cfi_offset for every callee-saved vector registers (#100455)\n\nThe grouped vector register is modeled as a single register, e.g. V2M2,\r\nwhich is actually V2 and V3. We need to decompose the grouped vector\r\nregister(if any) to individual vector register when emitting CFIs in\r\nprologue.\r\n\r\nFixed https://github.com/llvm/llvm-project/issues/94500",
            "commit_timestamp": 1722222187.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": true,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722265702.329616,
            "elapsed_time": 92.1554765701294,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6612.045249938965,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1b4be6a474b3747765a218201bd637f899fd9b66",
            "commit_message": "[ARM] Regenerate vselect_imax.ll\n",
            "commit_timestamp": 1722264822.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722276954.710154,
            "elapsed_time": 80.96733069419861,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6652.138763427734,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f9e7cba122c2b636ddb975791aadf33c69f3f056",
            "commit_message": "Fix hasName matcher assertion with inline namespaces (#100975)\n\nFix handling of nodes which can be skipped in the fast path for the\r\nhasName matcher\r\n\r\nFixes #100973",
            "commit_timestamp": 1722276662.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722308971.349177,
            "elapsed_time": 110.86297035217285,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6596.241134643555,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6d02f62e4af90295a6e0386e3e96afe518777c17",
            "commit_message": "[mlir][linalg] Add vectorization support for minnumf/maxnumf reductions. (#101092)\n\nThis is a follow-up for\r\nhttps://discourse.llvm.org/t/rfc-fix-floating-point-max-and-min-operations-in-mlir/72671\r\n\r\nThe ops were splitted to two version, and the vectorization support for\r\none of them is missing.\r\n\r\nThe revision also renames the existing lit tests accordingly, which\r\nexplicitly puts `maximumf/minimumf` to the function names.",
            "commit_timestamp": 1722308440.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722352005.354721,
            "elapsed_time": 72.38793873786926,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6633.208297729492,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8fc329421b2e3bc5cdda98ce303ea3b07af58ebc",
            "commit_message": "[mlir][Transforms] Dialect conversion: Add missing \"else if\" branch (#101148)\n\nThis code got lost in #97213 and there was no test for it. Add it back\r\nwith an MLIR test.\r\n\r\nWhen a pattern is run without a type converter, we can assume that the\r\nnew block argument types of a signature conversion are legal. That's\r\nbecause they were specified by the user. This won't work for 1->N\r\nconversions due to limitations in the dialect conversion infrastructure,\r\nso the original `FIXME` has to stay in place.",
            "commit_timestamp": 1722350207.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722395370.987578,
            "elapsed_time": 75.43336462974548,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6620.595848083496,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "57acabb8e09baa38b156965b2dc567a8c7eb2429",
            "commit_message": "[Driver,X86] Update test Clang::Preprocessor/x86_target_features.c after #101151\n",
            "commit_timestamp": 1722395003.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": true,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722437003.241588,
            "elapsed_time": 102.93361783027649,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6626.583610534668,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "23d188ed91ed39879e6f6e36d07eca6ceae4bab5",
            "commit_message": "[libcxx][test] Require long_tests for eval.PR44847.pass.cp (#100722)\n\nThis takes 1m40s to run when testing picolib on qemu. This isn't the end\r\nof the world but that's on an AArch64 server. So if someone felt the\r\nneed to mark this unsupported in the first place, it's likely much\r\nslower on average hardware.",
            "commit_timestamp": 1722436596.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": true,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722438515.877502,
            "elapsed_time": 82.62360787391663,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6650.903717041016,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b5a7d3b6c2169d84f9da749425a38dcef914d1ce",
            "commit_message": "[SLP][REVEC] Make Instruction::Select support vector instructions. (#100507)\n\n",
            "commit_timestamp": 1722438230.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722442608.114971,
            "elapsed_time": 115.6876859664917,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6611.965354919434,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8b2688bd173e79392927bcaed91855e7c4db8eaa",
            "commit_message": "[scudo] Separated committed and decommitted entries. (#100818)\n\nInitially, the LRU list stored all mapped entries with no distinction\r\nbetween the committed (non-madvise()'d) entries and decommitted\r\n(madvise()'d) entries. Now these two types of entries are separated into\r\ntwo lists, allowing future cache logic to branch depending on whether or\r\nnot entries are committed or decommitted. Furthermore, the retrieval\r\nalgorithm will prioritize committed entries over decommitted entries.\r\nSpecifically, valid-fit, committed entries (not necessarily optimal-fit)\r\nare retrieved before optimal-fit, decommitted entries.",
            "commit_timestamp": 1722442224.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722481625.089444,
            "elapsed_time": 75.06262350082397,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6622.808128356934,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "42c413b48917491efc5372752c6ad245530939f5",
            "commit_message": "[mlir][Transforms] Preserve all analysis in print passes (#101315)\n\nPrintIRPass, PrintOpStatsPass and PrintOpGraphPass don't mutate IR so\r\npreserve all analysis to save computation resource a bit.",
            "commit_timestamp": 1722480688.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722524949.843489,
            "elapsed_time": 130.52757048606873,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6600.268218994141,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e7630a0d60821dc13bb0be4e50b49fba5f90471f",
            "commit_message": "AMDGPU: Improve cost handling of canonicalize (#101479)\n\n",
            "commit_timestamp": 1722524540.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722568093.635971,
            "elapsed_time": 98.0918357372284,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6609.657386779785,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e7f73c03dfe6c895b2dbe6d8d1d03546b87888c4",
            "commit_message": "[Attributor] Use `getPointerAddressSpace` to replace a cast followed by a `getAddressSpace`\n",
            "commit_timestamp": 1722567463.0
        },
        {
            "tool_version": "242.0.20240801.125602-rc01",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722582507.85061,
            "elapsed_time": 80.6609697341919,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6622.9897384643555,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e9c20b9132c93baaaf78a070fa4cd0a853ca5e65",
            "commit_message": "[test][asan] Disabled a new test on Android\n\nWill investigate soon.\nThe test is from #100923.\n",
            "commit_timestamp": 1722582078.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722611605.904447,
            "elapsed_time": 171.90341806411743,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6583.942977905273,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d96569ecc2807a13dab6495d8cc4e82775b00af1",
            "commit_message": "[analyzer] Fix crash on using `bitcast(<type>, <array>)` as array subscript (#101647)\n\nCurrent CSA logic does not expect `LazyCompoundValKind` as array index.\r\nThis may happen if array is used as subscript to another, in case of\r\nbitcast to integer type.\r\n\r\nCatch such cases and return `UnknownVal`, since CSA cannot model\r\narray -> int casts.\r\n\r\nCloses #94496",
            "commit_timestamp": 1722611097.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722654614.380319,
            "elapsed_time": 173.35416650772095,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6641.290412902832,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "400c7c7cf2b15138aa674355983be74270de93bc",
            "commit_message": "[clang][Interp][NFC] Simplify Pointer move/copy assignment op\n",
            "commit_timestamp": 1722653956.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722697731.52849,
            "elapsed_time": 147.42247128486633,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6605.6445388793945,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f78d288d9d77c66f8b3036c62bb55160f19ba9cd",
            "commit_message": "[clang][Interp] Fix function pointer callexpr eval order (#101821)\n\nWe need to evaluate the callee before the arguments.",
            "commit_timestamp": 1722696997.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722740898.055127,
            "elapsed_time": 88.10369277000427,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6618.8405685424805,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b024fd267b813149f7bd5ba88731673b9a29258d",
            "commit_message": "[libc] disable strfroml entrypoint on aarch64 (#101854)\n\nDisable `strfroml` entrypoint on aarch64 to please clang-11 buildbots.\r\nDetailed in https://github.com/llvm/llvm-project/issues/101846. This is\r\nnot a fix for #101846 so I will keep the issue open until our buildbot\r\nis updated or other mitigation is applied.",
            "commit_timestamp": 1722738493.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722784166.819406,
            "elapsed_time": 101.04826307296753,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6614.511497497559,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0edafc461f5f98b2ed5d2d621e1d9de70ccbd4e5",
            "commit_message": "[libc++] mark P0645 as complete (#101852)\n\nNow that #98275 has been merged, the footnote for P0645 has become\r\noutdated. This updates the status information.",
            "commit_timestamp": 1722779993.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722827356.406555,
            "elapsed_time": 104.03404474258423,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6602.033401489258,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7f78f99fe5af82361d37adcbd2daa4d04afba13d",
            "commit_message": "[clang] Reland: Instantiate alias templates with sugar (#101858)\n\nThis makes use of the changes introduced in D134604, in order to\r\ninstantiate alias templates witn a final sugared substitution.\r\n\r\nThis comes at no additional relevant cost.\r\nSince we don't track / unique them in specializations, we wouldn't be\r\nable to resugar them later anyway.\r\n\r\nDifferential Revision: https://reviews.llvm.org/D136565",
            "commit_timestamp": 1722824934.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722870470.002809,
            "elapsed_time": 78.46020770072937,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6602.354682922363,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6848b99d170e9ac59ce2007c817bc579536d8e8e",
            "commit_message": "[OpenMP][Map][NFC] improve map chain. (#101903)\n\nThis is for mapping structure has data members, which have 'default'\r\nmappers, where needs to map these members individually using\r\ntheir 'default' mappers.\r\n\r\nexample map(tofrom: spp[0][0]), look at test case.\r\n\r\ncurrently create 6 maps:\r\n1>&spp, &spp[0],  size 8, maptype TARGET_PARAM | FROM | TO\r\n2>&spp[0], &spp[0][0], size(D)with maptype OMP_MAP_NONE, nullptr\r\n3>&spp[0], &spp[0][0].e, size(e) with maptype MEMBER_OF  | FROM  | TO\r\n4>&spp[0], &spp[0][0].h, size(h) with maptype MEMBER_OF  | FROM  | TO\r\n5>&spp, &spp[0],size(8), maptype MEMBER_OF | IMPLICIT | FROM  | TO\r\n6>&spp[0], &spp[0][0].f size(D) with maptype MEMBER_OF |IMPLICIT\r\n|PTR_AND_OBJ, @.omp_mapper._ZTS1C.default\r\n\r\nmaptype with/without OMP_MAP_PTR_AND_OBJ\r\n   For \"2\" and \"5\", since it is mapping pointer and pointee pair,\r\n   PTR_AND_OBJ should be set\r\n   But for \"6\" the PTR_AND_OBJ should not set.\r\nHowever, \"5\" is duplicate with \"1\" can be skip.\r\n\r\nTo fix \"2\", during the call to emitCombinEntry with false with\r\nNotTargetParams\r\ninstead !PartialStruct.PreliminaryMapData.BasePointers.empty(), since\r\nall captures need to be TARGET_PARAM\r\nAnd inside emitCombineEntry:  check\r\n!PartialStruct.PreliminaryMapData.BasePointers.empty() to set\r\nPTR_AND_OBJ\r\n\r\nFor \"5\" and \"6\": the fix in generateInfoForComponentList:\r\nAdd new variable IsPartialMapped set with\r\n!PartialStruct.PreliminaryMapData.BasePointers.empty();\r\n\r\nWhen that is true, skip generate \"5\" and don\"t set IsExpressionFirstInfo\r\nto false, so that PTR_AND_OBJ would be set.\r\n\r\nAfter fix: will have 5 maps instead 6\r\n1>&spp, &spp[0],  size 8, maptype TARGET_PARAM | FROM | TO\r\n2>&spp[0], &spp[0][0], size(D), maptype PTR_AND_OBJ, nullptr\r\n3>&spp[0], &spp[0][0].e, size(e), maptype MEMBER_OF_2  | FROM  | TO\r\n4>&spp[0], &spp[0][0].h, size(h), maptype MEMBER_OF_2  | FROM  | TO\r\n5>&spp[0], &spp[0][0].f size(32), maptype MEMBER_OF_2 | IMPLICIT,\r\n@.omp_mapper._ZTS1C.default\r\n\r\nFor map(sppp[0][0][0]):\r\nafter fix: will have 6 maps instead 8.\r\n\r\nhttps://github.com/llvm/llvm-project/pull/101903",
            "commit_timestamp": 1722870071.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722913740.276799,
            "elapsed_time": 78.32131671905518,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6621.047332763672,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "874067a22f0f483dbe210d8547c06d564bfa7848",
            "commit_message": "[Sema] Preserve ContainsUnexpandedParameterPack in TransformLambdaExpr (#86265)\n\nThe lambda `ContainsUnexpandedParameterPack` flag is used for the\r\nexpressions' dependency computing and is therefore essential for pack\r\nexpansion.\u00a0We previously lost the flag's preservation during the\r\nlambda's transform, which caused some issues, e.g. a fold expression\r\ncouldn't properly expand inside a template.\r\n\r\nThis patch alleviates the issue by retaining the flag in more scenarios.\r\nNote that we still have problems with constraints involving packs\r\nregarding lambdas, and dealing with that would take more effort, and\r\nwe'd like to fix them in the future.\r\n\r\nFixes https://github.com/llvm/llvm-project/issues/56852\r\nFixes https://github.com/llvm/llvm-project/issues/85667\r\nMitigates https://github.com/llvm/llvm-project/issues/99877 because the\r\nattributes were not handled in this patch.\r\n\r\n---------\r\n\r\nCo-authored-by: Ilya Biryukov <809452+ilya-biryukov@users.noreply.github.com>\r\nCo-authored-by: cor3ntin <corentinjabot@gmail.com>",
            "commit_timestamp": 1722912885.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722957008.764454,
            "elapsed_time": 107.56602096557617,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6599.519325256348,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bd576fe34285c4dcd04837bf07a89a9c00e3cd5e",
            "commit_message": "[clang][driver][clang-cl] Support `--precompile` and `-fmodule-*` options in Clang-CL (#98761)\n\nThis PR is the first step in improving the situation for `clang-cl`\r\ndetailed in [this LLVM Discourse\r\nthread](https://discourse.llvm.org/t/clang-cl-exe-support-for-c-modules/72257/28).\r\nThere has been some work done in #89772. I believe this is somewhat\r\northogonal.\r\n\r\nThis is a work-in-progress; the functionality has only been tested with\r\nthe [basic 'Hello World'\r\nexample](https://clang.llvm.org/docs/StandardCPlusPlusModules.html#quick-start),\r\nand proper test cases need to be written. I'd like some thoughts on\r\nthis, thanks!\r\n\r\nPartially resolves #64118.",
            "commit_timestamp": 1722956755.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723000102.316791,
            "elapsed_time": 92.96027565002441,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6583.436080932617,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b64ec3c9faf0adce6e92c69fb48a7c7473c57200",
            "commit_message": "[SLP] The order of store chains needs to consider the size of the values. (#101810)\n\nWhen store chains have the same value type ID and pointer type ID, they\r\nmay mix different sizes of values, such as i8 and i64. This can lead to\r\nmissed vectorization opportunities.",
            "commit_timestamp": 1722999713.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723043439.896401,
            "elapsed_time": 80.01933455467224,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6585.918197631836,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7634a96589637186b640a0441c0544a9868d9913",
            "commit_message": "[flang][acc] Improve lowering of Fortran optional in data clause (#102224)\n\nFortran optional arguments are effectively null references. To deal with\r\nthis possibility, flang lowering of OpenACC data clauses creates three\r\nif-else regions when preparing the data pointer for the data clause:\r\n1) Load box value from box reference\r\n2) Load box addr from box value\r\n3) Load box dims from box value\r\n\r\nHowever, this pattern makes it more complicated to find the original box\r\nreference. Effectively, the first if-else region to get the box value is\r\nnot needed - since the value can be loaded before the corresponding\r\n`fir.box_addr` and `fir.box_dims` operations. Thus, reduce the number of\r\nif-else regions by deferring the box load to the use sites.\r\n\r\nFor non-optional cases, the old functionality is left alone - which\r\npreloads the box value.",
            "commit_timestamp": 1723043046.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723086438.411889,
            "elapsed_time": 85.4023060798645,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6619.307891845703,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fc0802a1d0bf2ede0ba71df09ddf5e601ab6587b",
            "commit_message": "[Fuchsia][CMake] Remove new/delete from baremetal libc++ (#102415)\n\nThis is causing issues for some baremetal targets.",
            "commit_timestamp": 1723085601.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723129773.530617,
            "elapsed_time": 71.83608865737915,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6607.954986572266,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b2e69f52bb5da067109b9a7d1f73d0dd1a6bb5ad",
            "commit_message": "[LoongArch] Add machine function pass to merge base + offset (#101139)\n\nThis commit references RISC-V to add a machine function pass to merge\r\nthe base address and offset.",
            "commit_timestamp": 1723129538.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723172862.475986,
            "elapsed_time": 85.03861021995544,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6600.371032714844,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "00139ae1bc0ae855ebe9c8991f480b382bbc4308",
            "commit_message": "Revert \"[clang] Reland: Instantiate concepts with sugared template arguments (#101782)\" (#102551)\n\n",
            "commit_timestamp": 1723171088.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723216122.312116,
            "elapsed_time": 76.1420533657074,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6577.068916320801,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5c0eb1a6e4679cc741f75f5ddc53d4878dabc1f2",
            "commit_message": "[bazel] Add missing dep for the SPIRVToLLVM target\n",
            "commit_timestamp": 1723215129.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723259370.785817,
            "elapsed_time": 92.13912630081177,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6582.343734741211,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "77e68fbdd3fdc205bafa042fcb87014011dc7799",
            "commit_message": "AMDGPU/NewPM: Port AMDGPUAnnotateUniformValues to new pass manager (#102654)\n\n",
            "commit_timestamp": 1723259168.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723302488.813756,
            "elapsed_time": 96.16722321510315,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6646.030914306641,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8a61bfcf8f3e569d7f1d8fcb8958c02ec4aa6e7f",
            "commit_message": "[NFC] Fix TableGen include guards to match paths (#102746)\n\n- Fix include guards for headers under utils/TableGen to match their\r\npaths.",
            "commit_timestamp": 1723300503.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723345700.154306,
            "elapsed_time": 82.4328556060791,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6640.336540222168,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3c3df1bef84bd509bdd2b6033bc9bb3653826388",
            "commit_message": "Revert \"[Support] Assert that DomTree nodes share parent\" (#102780)\n\nReverts llvm/llvm-project#101198\r\n\r\nBreaks multiple bots:\r\nhttps://lab.llvm.org/buildbot/#/builders/72/builds/2103\r\nhttps://lab.llvm.org/buildbot/#/builders/164/builds/1909\r\nhttps://lab.llvm.org/buildbot/#/builders/66/builds/2706",
            "commit_timestamp": 1723340169.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723388857.132354,
            "elapsed_time": 78.07077312469482,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6669.7862548828125,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5286656609418c766272ff78e62fda41671ef4cb",
            "commit_message": "[LV] Regenerate check lines in preparation for #99808.\n\nRegenerate check lines for test to avoid unrelated changes in\nhttps://github.com/llvm/llvm-project/pull/99808.\n",
            "commit_timestamp": 1723385165.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723432135.345996,
            "elapsed_time": 90.38775968551636,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6598.463897705078,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "efc6b50d2d93fa571572ee3ef1d4565c09ad1610",
            "commit_message": "[LoopVectorize][X86][AMDLibm] Add Missing AMD LibM trig vector intrinsics (#101125)\n\nAdding the following linked to their docs:\r\n-\r\n[amd_vrs16_acosf](https://github.com/amd/aocl-libm-ose/blob/9c0b67293ba01e509a6308247d82a8f1adfbbc67/scripts/libalm.def#L221)\r\n-\r\n[amd_vrd2_cosh](https://github.com/amd/aocl-libm-ose/blob/9c0b67293ba01e509a6308247d82a8f1adfbbc67/scripts/libalm.def#L124)\r\n-\r\n[amd_vrs16_tanhf](https://github.com/amd/aocl-libm-ose/blob/9c0b67293ba01e509a6308247d82a8f1adfbbc67/scripts/libalm.def#L224)",
            "commit_timestamp": 1723428669.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723475267.831511,
            "elapsed_time": 73.49578738212585,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6586.90104675293,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "49777d7ffe82f1dcace318e51c9d785994f8c32a",
            "commit_message": "[mlir][spirv] Add atan and atan2 pattern to MathToSPIRV Conversion pass (#102633)\n\nAdd missing math.atan to spirv.CL.atan and math.atan2 to spirv.CL.atan2\r\nin MathToSPIRV.\r\nAdd math.atan to spirv.GL.atan too.",
            "commit_timestamp": 1723474728.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723518567.640477,
            "elapsed_time": 82.33531165122986,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6606.358512878418,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "17db3313c75120fd8415529723eb96cbad399338",
            "commit_message": "[ASTDump] TextNodeDumper learned to dump builtin name for AtomicExpr (#102748)\n\nIn 4198576157bfd0d08c08b784220d6132b709ae2c, we add support for dumping\r\nbuiltin name for AtomicExpr in JSON dump. This change syncs\r\n`TextNodeDumper` with `JSONNodeDumper`, makes `TextNodeDumper` learned\r\nto dump builtin name for AtomicExpr.",
            "commit_timestamp": 1723513834.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723561715.497577,
            "elapsed_time": 78.28319883346558,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6616.4567947387695,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ac26c661ead4c5fb05d13c7d07a706f2a305970a",
            "commit_message": "[compiler-rt][SME] Correct .variant_pcs directives. (#103047)\n\n",
            "commit_timestamp": 1723561389.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723605027.123707,
            "elapsed_time": 120.14789652824402,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6605.488792419434,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4f5d866af7fed0de1671a68530d3023e9762b71e",
            "commit_message": "[llvm-lit] Add REQUIRES: shell to BOLT permission test for lit internal shell (#103012)\n\nThis patch adds the `REQUIRES: shell` directive to the BOLT permission\r\ntest to ensure it only runs in environments with a full-featured\r\nUnix-like shell. This change is necessary because the test relies on\r\nadvanced shell capabilities that are not supported by lit's internal\r\nshell.\r\n\r\n**Reasoning:** The BOLT permission test uses features like running\r\ncommands in the background with `&`, performing arithmetic operations,\r\nand handling special number formats (octal). These features require a\r\nmore capable shell than what lit's internal shell provides. Without a\r\nproper shell, the test could fail or behave unpredictably.\r\n\r\nThis change is relevant for enabling the lit internal shell by default,\r\nas outlined in [[RFC] Enabling the Lit Internal Shell by\r\nDefault](https://discourse.llvm.org/t/rfc-enabling-the-lit-internal-shell-by-default/80179)",
            "commit_timestamp": 1723604339.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723648108.855252,
            "elapsed_time": 80.74753713607788,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6607.990097045898,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "80c5ccd867ebfaabaaf330c90d79cc45ae003647",
            "commit_message": "[libc][math] Fix missing const in hdrgen signatures for totalordermag* (#103935)\n\n",
            "commit_timestamp": 1723647626.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723691307.532978,
            "elapsed_time": 99.49285650253296,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6603.824394226074,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b57038a611329ec42858b714effb482cbfc4d4e1",
            "commit_message": "[OpenMP] Use range-based for loops (NFC) (#103511)\n\n",
            "commit_timestamp": 1723691025.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723734561.116231,
            "elapsed_time": 110.73829817771912,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6611.145042419434,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "56140a8258a3498cfcd9f0f05c182457d43cbfd2",
            "commit_message": "[SLP]Fix PR104422: Wrong value truncation\n\nThe minbitwidth restrictions can be skipped only for immediate reduced\nvalues, for other nodes still need to check if external users allow\nbitwidth reduction.\n\nFixes https://github.com/llvm/llvm-project/issues/104422\n",
            "commit_timestamp": 1723734008.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723777784.926602,
            "elapsed_time": 72.05882358551025,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6586.032249450684,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c20e7b6fe105e4dffc8ecff77b03a049d327c567",
            "commit_message": "[HLSL] update default validator version to 1.8. (#104040)\n\nChange default validator version to 1.8 in Options.td. \r\nRemove the default value set in HLSL.cpp.\r\n\r\nFixes #102963\r\n\r\nThis also helps #99910.",
            "commit_timestamp": 1723776247.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723820878.450014,
            "elapsed_time": 78.73551297187805,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6601.528633117676,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "60bffe221a1d615ffc7c6b632287d0fbd27ef863",
            "commit_message": "[InstCombine] Handle commuted variant of sqrt transform\n",
            "commit_timestamp": 1723819633.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723864071.356013,
            "elapsed_time": 98.89372038841248,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6588.532577514648,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6e0fc155782ff5307245a85c7b037a2998ec6c86",
            "commit_message": "[RISCV] Remove feature implication from Zvknhb.\n\nWe don't have feature implications on any other Zvk extensions and\nwe have error messages in RISCVISAInfo if Zve or V is not enabled.\nI'm working on testing and refactoring in that code so I'd like to\nmake it consistent.\n",
            "commit_timestamp": 1723858506.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723907316.465242,
            "elapsed_time": 96.14530754089355,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6614.522354125977,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "76161451f5ca837b25769c7d142f8271b45d9b28",
            "commit_message": "[libc] Fix type signature for strlcpy and strlcat (#104643)\n\nSummary:\r\nThese should not be const on the destination pointer.",
            "commit_timestamp": 1723906145.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723950562.023736,
            "elapsed_time": 112.63046622276306,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6572.449417114258,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f499a3fe5fb6fd816d35b541e67a3761093cfded",
            "commit_message": "[VE] Use SelectionDAG::getSignedConstant/getAllOnesConstant.\n",
            "commit_timestamp": 1723949779.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723993692.495543,
            "elapsed_time": 94.44951701164246,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6579.5173263549805,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d082f1f37d8cb7a0c6875537ba873a631b154d53",
            "commit_message": "[clang][bytecode] Only booleans can be inverted\n\nNo need to have the Inv() function be templated.\n",
            "commit_timestamp": 1723989752.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724036907.486717,
            "elapsed_time": 70.10360050201416,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6621.079406738281,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7f87b5bf0e2f0e01735e5abe724d7fe5c69d202e",
            "commit_message": "[SelectionDAG][X86] Preserve unpredictable metadata for conditional branches in SelectionDAG, as well as JCCs generated by X86 backend. (#102101)\n\nThis builds on 09515f2c2, which preserves unpredictable metadata in\r\nCodeGen for `select`. This patch does it for conditional branches.",
            "commit_timestamp": 1724036688.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724080143.606877,
            "elapsed_time": 96.62478137016296,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6599.198516845703,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7dd6340bdadf86bd0facdea89d1876a5c36dc33b",
            "commit_message": "MathExtras: template'ize alignToPowerOf2 (#97814)\n\nFollow up on 5627794 (MathExtras: avoid unnecessarily widening types) to\r\nchange the overflow behavior of alignToPowerOf2 to only overflow if the\r\nresult is not representable in the return type. This allows us to\r\ntemplate'ize it, and avoid unnecessarily widening the types of\r\narguments.",
            "commit_timestamp": 1724079822.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724123247.151902,
            "elapsed_time": 69.23296976089478,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6571.635803222656,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "52bfb2611f8d30fae3306c652af7ba5c7e88c147",
            "commit_message": "[ADT] Fix a minor build error (#104840)\n\nA quick follow-up fix for\r\nhttps://github.com/llvm/llvm-project/pull/99403\r\n\r\nBuildbot\r\n[reported](https://lab.llvm.org/buildbot/#/builders/168/builds/2330) an\r\nerror:\r\n\r\n```\r\n/home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/llvm-project/llvm/unittests/ADT/FunctionExtrasTest.cpp:320:8: error: variable 'ptr' is uninitialized when used here [-Werror,-Wuninitialized]\r\n  320 |       [ptr](void *self) {\r\n      |        ^~~\r\n/home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/llvm-project/llvm/unittests/ADT/FunctionExtrasTest.cpp:318:12: note: initialize the variable 'ptr' to silence this warning\r\n  318 |   void *ptr;\r\n      |            ^\r\n      |             = nullptr\r\n1 error generated.\r\n```\r\n\r\nSo that PR does exactly what's sugested.",
            "commit_timestamp": 1724118821.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724166508.528982,
            "elapsed_time": 69.81195640563965,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6535.812103271484,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b5f7b6961d2bc4d852fc3a5992aecf5e2e48baee",
            "commit_message": "[AArch64] fix buildbot by removing dead code\n\nFailure with -Werror buildbot caused by #104587\n",
            "commit_timestamp": 1724166194.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724209837.382119,
            "elapsed_time": 110.67033171653748,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6643.621910095215,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d9b6e9f1c1565d9469eb0546da8c276051175408",
            "commit_message": "[gn build] Port c8a678b1e486\n",
            "commit_timestamp": 1724207630.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724252812.630231,
            "elapsed_time": 69.84206819534302,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6578.5570068359375,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c9ba6d35c19022a582516e9455af3f0d79101adf",
            "commit_message": "[RISCV] Add coverage for fp reductions of <2^N-1 x FP> vectors\n",
            "commit_timestamp": 1724252301.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724296131.284531,
            "elapsed_time": 69.72059178352356,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6595.584381103516,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bf88db78bd80cb624b49510c628ba841fb1fed04",
            "commit_message": "[Symbolizer, DebugInfo] Clean up LLVMSymbolizer API: const string& -> StringRef (#104541)\n\nNothing in the affected code depends on the `ModuleName` being\r\nnull-terminated,\r\nso take it by `StringRef` instead of `const std::string &`.\r\n\r\nThis change simplifies API consumption, since one doesn't always have a\r\n`std::string` at the call site (might have `std::string_view` instead),\r\nand also gives some minor performance improvements by removing\r\nstring-copies in the cache-hit path of `getOrCreateModuleInfo`.",
            "commit_timestamp": 1724295221.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724339314.166724,
            "elapsed_time": 72.46958756446838,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6598.723495483398,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ec5e58519d24010beea937fccf5fc4541db3ec21",
            "commit_message": "[NFC] Replace bool <= bool comparison (#102948)\n\nStatic analyser tool cppcheck flags ordered comparison with `bool`s.\r\nReplace with equivalent logical operators to prevent this.\r\n\r\nCloses #102912",
            "commit_timestamp": 1724339079.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724425660.296524,
            "elapsed_time": 78.1961555480957,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6617.760696411133,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6a8f73803a32db75d22490d341bf8744722a9025",
            "commit_message": "Revert \"Reland \"[asan] Remove debug tracing from `report_globals` (#104404)\" (#105601)\"\n\nthat change still breaks\n\n  SanitizerCommon-asan-x86_64-Darwin :: Darwin/print-stack-trace-in-code-loaded-after-fork.cpp\n\n> This reverts commit 2704b804bec50c2b016bf678bd534c330ec655b6\n> and relands #104404.\n>\n> The Darwin should not fail after #105599.\n\nThis reverts commit 8c6f8c29e90666b747fc4b4612647554206a2be5.\n",
            "commit_timestamp": 1724425264.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724468857.301832,
            "elapsed_time": 94.4114146232605,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6587.821235656738,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e439fdf4ea0dbc6f001428f4d4956700bf26bb97",
            "commit_message": "[clang-format] Treat new expressions as simple functions (#105168)\n\nccae7b461be339e717d02f99ac857cf0bc7d17f improved handling for nested\r\ncalls, but this resulted in a lot of changes near `new` expressions.\r\n\r\nThis patch tries to restore previous behavior around new expressions, by\r\ntreating them as simple functions, which seem to align with the concept.\r\n\r\nFixes https://github.com/llvm/llvm-project/issues/105133.",
            "commit_timestamp": 1724461470.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724512145.978829,
            "elapsed_time": 73.66467571258545,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6620.699310302734,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "08acc3f73b64bed578d18812a04015cb537c9c82",
            "commit_message": "[Analysis] Copy-construct SmallVector (NFC) (#105911)\n\n",
            "commit_timestamp": 1724508822.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724555253.33401,
            "elapsed_time": 68.913010597229,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6600.219383239746,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6bc225e0630f28e83290a43c3d9b25b057fc815a",
            "commit_message": "[clang-format] Fix a misannotation of redundant r_paren as CastRParen (#105921)\n\nFixes #105880.",
            "commit_timestamp": 1724551935.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724598470.572581,
            "elapsed_time": 70.98982405662537,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6621.021759033203,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1193f7d6487d2d94009f8d8d27da3907136482b9",
            "commit_message": "[NFC] Use const members of `StringToOffsetTable` (#105824)\n\n",
            "commit_timestamp": 1724589621.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724641763.539282,
            "elapsed_time": 81.0609803199768,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6669.516166687012,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "88f9ac380d8b40742aea11c8278652711261abff",
            "commit_message": "[doc] [C++20] [Modules] Add docs and release notes for '-Wdecls-in-multiple-modules'\n\nAs the title shows.\n",
            "commit_timestamp": 1724640725.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724684840.280008,
            "elapsed_time": 73.26359796524048,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6632.885643005371,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "46a4132e167aa44d8ec7776262ce2a0e6d47de59",
            "commit_message": "[Instrumentation] Fix EdgeCounts vector size in SetBranchWeights (#99064)\n\n",
            "commit_timestamp": 1724684205.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724728034.2268,
            "elapsed_time": 81.80153274536133,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6650.50959777832,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ce2b488e90d6d5a5c8fe495ede8238938827da39",
            "commit_message": "[mlir] ThreadLocalCache: make TSAN happy about destructors (#106170)\n\nTSAN warns that `ptr` is read and write without protection in\r\n`clearExpiredEntries` and in the destructor of `Owner`. Add an atomic\r\nbool to synchronize these without incurring a cost when calling `get`.",
            "commit_timestamp": 1724727589.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724771277.582334,
            "elapsed_time": 67.65943741798401,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6659.9508056640625,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fd36a7b9443921a4aa571549543244c5f1c9b6f8",
            "commit_message": "[mlir][gpu] Pass GPU module to `TargetAttrInterface::createObject`. (#94910)\n\nThis patch adds an argument to `gpu::TargetAttrInterface::createObject`\r\nto pass the GPU module. This is useful as `gpu::ObjectAttr` contains a\r\nproperty dict for metadata, hence the module can be used for extracting\r\nthings like the symbol table and adding it to the property dict.\r\n\r\n---------\r\n\r\nCo-authored-by: Oleksandr \"Alex\" Zinenko <ftynse@gmail.com>",
            "commit_timestamp": 1724771104.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724814525.449765,
            "elapsed_time": 82.32734155654907,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6677.594375610352,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fac7e87d6634a153450bbc6dd147245d7b534a16",
            "commit_message": "[clang-format] Insert a space between new/delete and a C-style cast (#106175)\n\nIt doesn't make sense to remove the space between new/delete and a\r\nC-style cast when SpaceBeforeParensOptions.AfterPlacementOperator is set\r\nto false.\r\n\r\nFixes #105628.",
            "commit_timestamp": 1724811256.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724857736.480708,
            "elapsed_time": 96.62206506729126,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6606.426475524902,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "16910a21ee0fabab2df291e4e5bc18289bd5762d",
            "commit_message": "[VPlan] Move logic to create interleave groups to VPlanTransforms (NFC).\n\nThis is a step towards further breaking up the rather large\ntryToBuildVPlanWithVPRecipes. It moves logic create interleave groups to\nVPlanTransforms.cpp, where similar replacements for other recipes are\ndefined as well (e.g. EVL-based ones)\n",
            "commit_timestamp": 1724856969.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724900951.564468,
            "elapsed_time": 90.65591335296631,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6628.349960327148,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "87c86aa6b93aea3d1603c1759a17fb6b5ba6e814",
            "commit_message": "[X86,SimplifyCFG] Support hoisting load/store with conditional faulting (Part I) (#96878)\n\nThis is simplifycfg part of\r\nhttps://github.com/llvm/llvm-project/pull/95515\r\n\r\nIn this PR, we support hoisting load/store with conditional faulting in\r\n`SimplifyCFGOpt::speculativelyExecuteBB` to eliminate conditional\r\nbranches.\r\nThis is for cases like\r\n```\r\nvoid test (int a, int *b) {\r\n  if (a)\r\n   *b = a;\r\n}\r\n``` \r\n\r\nIn the following patches, we will support the hoist in\r\n`SimplifyCFGOpt::hoistCommonCodeFromSuccessors`.\r\nThat is for cases like\r\n```\r\nvoid test (int a, int *c, int *d) {\r\n  if (a)\r\n   *c = a;\r\n  else \r\n   *d = a;\r\n}\r\n```",
            "commit_timestamp": 1724899364.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724944210.481159,
            "elapsed_time": 123.39815473556519,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6599.854919433594,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "a705e8cb5b071b3bf6d1d55629f18f6b7b9699ac",
            "commit_message": "[libc++][NFC] Remove __constexpr_is{nan,finite} (#106205)\n\nThey're never used in `constexpr` functions, so we can simply use\r\n`std::isnan` and `std::isfinite` instead.",
            "commit_timestamp": 1724943956.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1724987286.959591,
            "elapsed_time": 100.89578342437744,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6618.2272872924805,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e29c5f387f4a4aff039c01bde9eedeb6bd97951f",
            "commit_message": "[RISCV][TTI] Add legality check of vector of address for gather/scatter. (#106481)\n\nThis patch add a legality check that checks if target machine support\r\nvector of address in `isLegalMaskedGatherScatter()`.",
            "commit_timestamp": 1724986215.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725030568.531081,
            "elapsed_time": 77.61252522468567,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6649.874176025391,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "924907bc6aa17bb15241143dc9858da971b25908",
            "commit_message": "[DAG] Prefer 0.0 over -0.0 as neutral value for FADD w/NoSignedZero (#106616)\n\nWhen getting a neutral value, we can prefer using a positive zero over a\r\nnegative zero if nsz is set on the FADD (or reduction). A positive zero\r\nshould be cheaper to materialize on basically all targets.\r\n\r\nArguably, we should be doing this kind of canonicalization in\r\nDAGCombine, but we don't do that for any of the other reduction\r\nvariants, so this seems like path of least resistance. This does mean\r\nthat we can only do this for \"fast\" reductions. Just nsz isn't enough,\r\nas that goes through the SEQ_FADD path where the IR level start value\r\nisn't folded away.\r\n\r\nIf folks think this is to RISCV specific, let me know. There's a trivial\r\nRISCV specific implementation. I went with the generic one as I through\r\nthis might benefit other targets.",
            "commit_timestamp": 1725029774.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725181296.659661,
            "elapsed_time": 77.78620743751526,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6587.2944412231445,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "840d4d9446ef0a49b7600b42a188148a1826e17c",
            "commit_message": "[clang] NFCI: don't check deduced constraints when partial ordering (#106882)\n\n",
            "commit_timestamp": 1725178269.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725203360.480215,
            "elapsed_time": 94.96408200263977,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6581.1717529296875,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "affc0c64b65e73e5e0afe790762376f633ea970c",
            "commit_message": "[SDAG] Expand vector [u|s]cmp in VectorLegalizer (#106883)\n\nAddress comment\r\nhttps://github.com/llvm/llvm-project/pull/106747#issuecomment-2322922855.",
            "commit_timestamp": 1725201352.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725246556.151384,
            "elapsed_time": 74.04262733459473,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6537.984916687012,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "837ee5b46a5f7f898f0de7e46a19600b896a0a1f",
            "commit_message": "[RISCV][TTI] Scale the cost of FP-Int conversion with LMUL (#87506)\n\nWidening/narrowing the source data type to match the destination data\r\ntype may require multiple steps.\r\nTo model the costs, the patch generated the interim type by following\r\nthe logic in RISCVTargetLowering::lowerVPFPIntConvOp.",
            "commit_timestamp": 1725241122.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725289704.852873,
            "elapsed_time": 82.92932081222534,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6553.195915222168,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "4a505e15e768011e47101cf9aeb0c7787fdc9acf",
            "commit_message": "[clang] Add tests for CWG issues about friend declaration matching (#106117)\n\nThis patch covers CWG issues regarding declaration matching when\r\n`friend` declarations are involved:\r\n[CWG138](https://cplusplus.github.io/CWG/issues/138.html),\r\n[CWG386](https://cplusplus.github.io/CWG/issues/386.html),\r\n[CWG1477](https://cplusplus.github.io/CWG/issues/1477.html), and\r\n[CWG1900](https://cplusplus.github.io/CWG/issues/1900.html). Atypical\r\nfor our CWG tests, the ones in this patch are quite extensively\r\ncommented in-line, explaining the mechanics. PR description focuses on\r\nhigh-level concerns and references.\r\n\r\n[CWG138](https://cplusplus.github.io/CWG/issues/138.html) \"Friend\r\ndeclaration name lookup\"\r\n-----------\r\n\r\n[P1787R6](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1787r6.html):\r\n> [CWG138](https://cplusplus.github.io/CWG/issues/138.html) is resolved\r\naccording to [N1229](http://wg21.link/n1229), except that\r\nusing-directives that nominate nested namespaces are considered.\r\n\r\nI find it hard to pin down the scope of this issue, so I'm relying on\r\nthree examples from the filing to define it. Because of that, it's also\r\nhard to pinpoint exact wording changes that resolve it. Relevant\r\nreferences are:\r\n[[dcl.meaning.general]/2](http://eel.is/c++draft/dcl.meaning#general-2),\r\n[[namespace.udecl]/10](https://eel.is/c++draft/namespace.udecl#10),\r\n[[dcl.type.elab]/3](https://eel.is/c++draft/dcl.type.elab#3),\r\n[[basic.lookup.elab]/1](https://eel.is/c++draft/basic.lookup.elab#1).\r\n\r\n[CWG386](https://cplusplus.github.io/CWG/issues/386.html) \"Friend\r\ndeclaration of name brought in by _using-declaration_\"\r\n-----------\r\n\r\n[P1787R6](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1787r6.html):\r\n> [CWG386](https://cplusplus.github.io/CWG/issues/386.html),\r\n[CWG1839](https://cplusplus.github.io/CWG/issues/1839.html),\r\n[CWG1818](https://cplusplus.github.io/CWG/issues/1818.html),\r\n[CWG2058](https://cplusplus.github.io/CWG/issues/2058.html),\r\n[CWG1900](https://cplusplus.github.io/CWG/issues/1900.html), and\r\nRichard\u2019s observation in [\u201care non-type names ignored in a\r\nclass-head-name or\r\nenum-head-name?\u201d](http://lists.isocpp.org/core/2017/01/1604.php) are\r\nresolved by describing the limited lookup that occurs for a\r\ndeclarator-id, including the changes in Richard\u2019s [proposed resolution\r\nfor\r\nCWG1839](http://wiki.edg.com/pub/Wg21cologne2019/CoreWorkingGroup/cwg1839.html)\r\n(which also resolves CWG1818 and what of CWG2058 was not resolved along\r\nwith CWG2059) and rejecting the example from\r\n[CWG1477](https://cplusplus.github.io/CWG/issues/1477.html).\r\n\r\nWording\r\n([[dcl.meaning.general]/2](http://eel.is/c++draft/dcl.meaning#general-2)):\r\n> \u2014 If the\r\n[id-expression](http://eel.is/c++draft/expr.prim.id.general#nt:id-expression)\r\nE in the\r\n[declarator-id](http://eel.is/c++draft/dcl.decl.general#nt:declarator-id)\r\nof the\r\n[declarator](http://eel.is/c++draft/dcl.decl.general#nt:declarator) is a\r\n[qualified-id](http://eel.is/c++draft/expr.prim.id.qual#nt:qualified-id)\r\nor a [template-id](http://eel.is/c++draft/temp.names#nt:template-id):\r\n> &nbsp;&nbsp;&nbsp;&nbsp; \u2014 [...]\r\n> &nbsp;&nbsp;&nbsp;&nbsp; \u2014 The\r\n[declarator](http://eel.is/c++draft/dcl.decl.general#nt:declarator)\r\nshall correspond to one or more declarations found by the lookup; they\r\nshall all have the same target scope, and the target scope of the\r\n[declarator](http://eel.is/c++draft/dcl.decl.general#nt:declarator) is\r\nthat\r\nscope[.](http://eel.is/c++draft/dcl.meaning#general-2.2.2.sentence-1)\r\n\r\nThis issue focuses on interaction of `friend` declarations with\r\ntemplate-id and qualified-id with using-declarations. The short answer\r\nis that terminal name in such declarations undergo lookup, and\r\nusing-declarations do what they usually do helping that lookup. Target\r\nscope of such friend declaration is the target scope of lookup result,\r\nso no conflicts arise with the using-declarations.\r\n\r\n[CWG1477](https://cplusplus.github.io/CWG/issues/1477.html) \"Definition\r\nof a `friend` outside its namespace\"\r\n-----------\r\n\r\n[P1787R6](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1787r6.html):\r\n> [...] and rejecting the example from\r\n[CWG1477](https://cplusplus.github.io/CWG/issues/1477.html).\r\n\r\nWording\r\n([[dcl.meaning.general]/3.4](http://eel.is/c++draft/dcl.meaning#general-3.4)):\r\n> Otherwise, the terminal name of the\r\n[declarator-id](http://eel.is/c++draft/dcl.decl.general#nt:declarator-id)\r\nis not looked\r\nup[.](http://eel.is/c++draft/dcl.meaning#general-3.4.sentence-1)\r\nIf it is a qualified name, the\r\n[declarator](http://eel.is/c++draft/dcl.decl.general#nt:declarator)\r\nshall correspond to one or more declarations nominable in S; all the\r\ndeclarations shall have the same target scope and the target scope of\r\nthe [declarator](http://eel.is/c++draft/dcl.decl.general#nt:declarator)\r\nis that\r\nscope[.](http://eel.is/c++draft/dcl.meaning#general-3.4.sentence-2)\r\n\r\nThis issue focuses on befriending a function in one scope, then defining\r\nit from other scope using qualified-id. Contrary to what P1787R6 says in\r\nprose, this example is accepted by the wording in that paper. In the\r\nwording quote above, note the absence of a statement like \"terminal name\r\nof the declarator-id is not bound\", contrary to similar statements made\r\nbefore that in [dcl.meaning.general] about friend declarations and\r\ntemplate-ids.\r\n\r\nThere's also a note in [basic.scope.scope] that supports the rejection,\r\nbut it's considered incorrect and expected to be removed in the future.\r\nThis is tracked in https://github.com/cplusplus/draft/pull/7238.\r\n\r\n[CWG1900](https://cplusplus.github.io/CWG/issues/1900.html) \"Do `friend`\r\ndeclarations count as \u201cprevious declarations\u201d?\"\r\n------------------\r\n\r\n\r\n[P1787R6](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1787r6.html):\r\n> [CWG386](https://cplusplus.github.io/CWG/issues/386.html),\r\n[CWG1839](https://cplusplus.github.io/CWG/issues/1839.html),\r\n[CWG1818](https://cplusplus.github.io/CWG/issues/1818.html),\r\n[CWG2058](https://cplusplus.github.io/CWG/issues/2058.html),\r\n[CWG1900](https://cplusplus.github.io/CWG/issues/1900.html), and\r\nRichard\u2019s observation in [\u201care non-type names ignored in a\r\nclass-head-name or\r\nenum-head-name?\u201d](http://lists.isocpp.org/core/2017/01/1604.php) are\r\nresolved by describing the limited lookup that occurs for a\r\ndeclarator-id, including the changes in Richard\u2019s [proposed resolution\r\nfor\r\nCWG1839](http://wiki.edg.com/pub/Wg21cologne2019/CoreWorkingGroup/cwg1839.html)\r\n(which also resolves CWG1818 and what of CWG2058 was not resolved along\r\nwith CWG2059) and rejecting the example from\r\n[CWG1477](https://cplusplus.github.io/CWG/issues/1477.html).\r\n\r\nWording\r\n([[dcl.meaning.general]/2.3](http://eel.is/c++draft/dcl.meaning#general-2.3)):\r\n> The declaration's target scope is the innermost enclosing namespace\r\nscope; if the declaration is contained by a block scope, the declaration\r\nshall correspond to a reachable\r\n([[module.reach]](http://eel.is/c++draft/module.reach)) declaration that\r\ninhabits the innermost block\r\nscope[.](http://eel.is/c++draft/dcl.meaning#general-2.3.sentence-2)\r\n\r\nWording\r\n([[basic.scope.scope]/7](http://eel.is/c++draft/basic.scope#scope-7)):\r\n> A declaration is\r\n[nominable](http://eel.is/c++draft/basic.scope#def:nominable) in a\r\nclass, class template, or namespace E at a point P if it precedes P, it\r\ndoes not inhabit a block scope, and its target scope is the scope\r\nassociated with E or, if E is a namespace, any element of the inline\r\nnamespace set of E\r\n([[namespace.def]](http://eel.is/c++draft/namespace.def))[.](http://eel.is/c++draft/basic.scope#scope-7.sentence-1)\r\n\r\nWording\r\n([[dcl.meaning.general]/3.4](http://eel.is/c++draft/dcl.meaning#general-3.4)):\r\n> If it is a qualified name, the\r\n[declarator](http://eel.is/c++draft/dcl.decl.general#nt:declarator)\r\nshall correspond to one or more declarations nominable in S; [...]\r\n\r\nIn the new wording it's clear that while `friend` declarations of\r\nfunctions do not bind names, declaration is still introduced, and is\r\nnominable, making it eligible for a later definition by qualified-id.",
            "commit_timestamp": 1725286844.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725332970.062065,
            "elapsed_time": 102.92584681510925,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6562.1215744018555,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2cbd1bc830861bc08f78fb6cc11747b82f66c4c6",
            "commit_message": "Revert \"[C++20] [Modules] Embed all source files for C++20 Modules (#102444)\"\n\nThis reverts commit 2eeeff842f993a694159183a2834b4d305549cad.\n\nSee the post commit discussion in\nhttps://github.com/llvm/llvm-project/commit/2eeeff842f993a694159183a2834b4d305549cad\n",
            "commit_timestamp": 1725332060.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725376153.275327,
            "elapsed_time": 97.64986538887024,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6533.9853439331055,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e1bde1c5b203224b0fa68ee141ec2c7a079f5eac",
            "commit_message": "[SDAG] Fix a typo in comment\n",
            "commit_timestamp": 1725375897.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725419318.125041,
            "elapsed_time": 85.63542294502258,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6568.655311584473,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f15e3e58c59b4d31eee24fa9debc5dfad0c20028",
            "commit_message": "[CGOpenMPRuntime] Use DenseMap::operator[] (NFC) (#107158)\n\nI'm planning to deprecate DenseMap::FindAndConstruct in favor of\r\nDenseMap::operator[].",
            "commit_timestamp": 1725418949.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725462628.453053,
            "elapsed_time": 108.13607573509216,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6586.511817932129,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2d7339ad24b41eb06c417f7067b9fbeb4fdb2e6b",
            "commit_message": "[AMDGPU][LDS] Fix dynamic LDS interaction with \"amdgpu-no-lds-kernel-id\" (#107092)\n\nDynamic lds and Table lds both use the amdgpu_lds_kernel_id intrinsic.\r\nKernels and functons that make an indirect use of this should not have\r\nthe\r\n\"amdgpu-no-lds-kernel-id\" attribute.\r\n\r\nFor the later, this was done. For the dynamic lds case, this was\r\nmissing. This patch fixes it.",
            "commit_timestamp": 1725460903.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725505720.164524,
            "elapsed_time": 86.50732183456421,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6571.384956359863,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c28b1a19aadff97b369889aee084073a181cfda8",
            "commit_message": "[LegalizeTypes][RISCV] Use SPLAT_VECTOR_PARTS to legalize splat BUILD_VECTOR (#107290)\n\nIf the element type needs to be expanded, we can use SPLAT_VECTOR_PARTS\r\nif the target supports it.\r\n\r\nThere's already a DAGCombine to turn BUILD_VECTOR into SPLAT_VECTOR if\r\nthe target makes SPLAT_VECTOR legal, but it doesn't fire for vectors\r\nthat need to be split.",
            "commit_timestamp": 1725502458.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725548890.808624,
            "elapsed_time": 80.91782140731812,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6628.292892456055,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3b19e480c056a35a60e3c65de476b6097329ceac",
            "commit_message": "[flang] Warn when F128 is unsupported (#102147) (#106957)\n\nThis generates `warning: REAL(KIND=16) is not an enabled type for this\r\ntarget` if that type is used in a build not correctly configured to\r\nsupport this type. Uses of `selected_real_kind(30)` return -1.\r\n\r\nRelanding #102147 because the test errors turned out to be specific to a\r\ndownstream configuration.",
            "commit_timestamp": 1725548376.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725592179.130677,
            "elapsed_time": 96.8029637336731,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6576.015312194824,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ede40da1f8c1e91601b985cd32ad785aa8806880",
            "commit_message": "[mlir][tensor] Add check for indices of `tensor.gather` (#106894)\n\nThis patch add a check for indices of `tensor.gather` and\r\n`tensor.scatter`. For that the length of gather_dims/scatter_dims should\r\nmatch the size of last dimension of the indices. Fix #94901.",
            "commit_timestamp": 1725590759.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725635338.423062,
            "elapsed_time": 77.10061264038086,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6585.15625,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "109cd11dc4aea6b3596f8b2cb5a719f35b190cfa",
            "commit_message": "[Attributor] Skip AS specialization for volatile memory instructions (#107250)\n\n",
            "commit_timestamp": 1725634830.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725678538.795342,
            "elapsed_time": 68.44668364524841,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6560.654411315918,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d7fb5b9df0a8170d082e6f8f254e723283f76bac",
            "commit_message": "[ctx_prof] PGOCtxProfFlattener must always return `PreservedAnalyses::none()`\n\nThis is because it always removes instrumentation. This fixes failures\ndetectable with extensive checks, e.g. https://lab.llvm.org/buildbot/#/builders/187/builds/987\n\n(Related to PR #107329)\n",
            "commit_timestamp": 1725678138.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725721719.440693,
            "elapsed_time": 94.99204683303833,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6608.711540222168,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "11eae671b707618ad09915ecac3f910e3874b1af",
            "commit_message": "[ARM] Add and extend big-endian testing for vorrimm and vbicimm. NFC\n",
            "commit_timestamp": 1725719814.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725765075.27481,
            "elapsed_time": 110.68739938735962,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6577.627777099609,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "caebb4562ce634a22f7b13480b19cffc2a6a6730",
            "commit_message": "[Transforms] Avoid repeated hash looksup (NFC) (#107727)\n\n",
            "commit_timestamp": 1725758166.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725808059.573914,
            "elapsed_time": 72.07932090759277,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6569.562889099121,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e29e7e726614d59cd5adae1f81266de947ee2f3b",
            "commit_message": "[FrontEnd] Use SetVector (NFC) (#107743)\n\nWe could also use range-based for loops at several places, but I'm\r\nleaving that to a subsequent patch.",
            "commit_timestamp": 1725806910.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725851486.828881,
            "elapsed_time": 81.85659217834473,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6549.129623413086,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0f5033053a3d4dcf27cd488a360e64c48a36c27a",
            "commit_message": "[gn build] Port fef84c56dcd9\n",
            "commit_timestamp": 1725844517.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725894625.321761,
            "elapsed_time": 83.0336389541626,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6579.071487426758,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6cc3bf7d1d343f910b40cee24d4cda873a6ddd55",
            "commit_message": "[mlir][tensor] Add canonicalization to fold consecutive tensor.pad ops (#107302)\n\n`tensor.pad(tensor.pad)` with the same constant padding value can be\r\ncombined into a single pad that pads to the sum of the high and low\r\npadding amounts.",
            "commit_timestamp": 1725894337.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725937800.623965,
            "elapsed_time": 83.10156154632568,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6546.515625,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "56905dab7da50bccfcceaeb496b206ff476127e1",
            "commit_message": "[clang] fix half && bfloat16 convert node expr codegen (#89051)\n\nData type conversion between fp16 and bf16 will generate fptrunc and\r\nfpextend nodes, but they are actually bitcast nodes.",
            "commit_timestamp": 1725936453.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1725980867.995593,
            "elapsed_time": 95.39524674415588,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6585.829978942871,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2bcab9ba7139cfa96c85433fa85b29c8a6d7008b",
            "commit_message": "[lldb][test] TestDbgInfoContentVectorFromStdModule.py: skip test on Darwin (#108003)\n\nThis started failing on the macOS CI after\r\nhttps://github.com/llvm/llvm-project/pull/106885:\r\n\r\n```\r\n  lldb-api :: commands/expression/import-std-module/vector-dbg-info-content/TestDbgInfoContentVectorFromStdModule.py\r\n\r\n\"/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/lldb-build/bin/clang\"  -std=c++11 -g -O0 -isysroot \"/Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.2.sdk\" -arch arm64  -I/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/llvm-project/lldb/packages/Python/lldbsuite/test/make/../../../../..//include -I/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/lldb-build/tools/lldb/include -I/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/llvm-project/lldb/test/API/commands/expression/import-std-module/vector-dbg-info-content -I/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/llvm-project/lldb/packages/Python/lldbsuite/test/make -include /Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/llvm-project/lldb/packages/Python/lldbsuite/test/make/test_common.h  -fno-limit-debug-info    -nostdlib++ -nostdinc++ -cxx-isystem /Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/lldb-build/include/c++/v1  --driver-mode=g++ -MT main.o -MD -MP -MF main.d -c -o main.o /Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/llvm-project/lldb/test/API/commands/expression/import-std-module/vector-dbg-info-content/main.cpp\r\n\"/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/lldb-build/bin/clang\"  main.o -g -O0 -isysroot \"/Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.2.sdk\" -arch arm64  -I/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/llvm-project/lldb/packages/Python/lldbsuite/test/make/../../../../..//include -I/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/lldb-build/tools/lldb/include -I/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/llvm-project/lldb/test/API/commands/expression/import-std-module/vector-dbg-info-content -I/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/llvm-project/lldb/packages/Python/lldbsuite/test/make -include /Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/llvm-project/lldb/packages/Python/lldbsuite/test/make/test_common.h  -fno-limit-debug-info     -L/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/lldb-build/lib -Wl,-rpath,/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/lldb-build/lib -lc++ --driver-mode=g++ -o \"a.out\"\r\nld: warning: ignoring duplicate libraries: '-lc++'\r\ncodesign --entitlements /Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/llvm-project/lldb/packages/Python/lldbsuite/test/make/entitlements-macos.plist -s - \"a.out\"\r\n\"/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/lldb-build/./bin/dsymutil\"  -o \"a.out.dSYM\" \"a.out\"\r\n\r\n\r\nrunCmd: settings set target.import-std-module true\r\n\r\noutput: \r\n\r\nrunCmd: expr std::reverse(a.begin(), a.end())\r\n\r\nAssertion failed: (isa<InjectedClassNameType>(Decl->TypeForDecl)), function getInjectedClassNameType, file ASTContext.cpp, line 5057.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tHandleCommand(command = \"expr std::reverse(a.begin(), a.end())\")\r\n1.\t<eof> parser at end of file\r\n2.\t/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/lldb-build/include/c++/v1/__algorithm/reverse.h:54:1: instantiating function definition 'std::reverse<std::__wrap_iter<Foo *>>'\r\n3.\t/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/lldb-build/include/c++/v1/__algorithm/reverse.h:47:58: instantiating function definition 'std::__reverse<std::_ClassicAlgPolicy, std::__wrap_iter<Foo *>, std::__wrap_iter<Foo *>>'\r\n4.\t/Users/ec2-user/jenkins/workspace/llvm.org/as-lldb-cmake/lldb-build/include/c++/v1/__algorithm/reverse.h:40:1: instantiating function definition 'std::__reverse_impl<std::_ClassicAlgPolicy, std::__wrap_iter<Foo *>>'\r\n```",
            "commit_timestamp": 1725980440.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726024197.944143,
            "elapsed_time": 91.5081717967987,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6581.5045166015625,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3dad29b677e427bf69c035605a16efd065576829",
            "commit_message": "[LTO] Remove unused includes (NFC) (#108110)\n\nclangd reports these as unused headers.  My manual inspection agrees\r\nwith the findings.",
            "commit_timestamp": 1726022164.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726067306.212725,
            "elapsed_time": 83.36227083206177,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6592.104515075684,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "512cecad4c384c84b79fea050a755cb7e46c6ac5",
            "commit_message": "[clang][transformer] Make `describe()` terser for `NamedDecl`s. (#108215)\n\nRight now `describe()`ing a `FunctionDecl` dups the whole code of the\r\nfunction. Dump only its name.",
            "commit_timestamp": 1726066967.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726110524.490678,
            "elapsed_time": 79.5326497554779,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6561.392669677734,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5e80fc88f484b471ec61ac28894698a946c4fb89",
            "commit_message": "[opt] Fix opt for LLVM_ENABLE_EXPORTED_SYMBOLS_IN_EXECUTABLES=Off.\n\nBuilding with -DLLVM_ENABLE_EXPORTED_SYMBOLS_IN_EXECUTABLES=Off should not\nprevent use of opt plugins.\n\nThis fix uses the approach implemented in\nhttps://github.com/llvm/llvm-project/pull/101741.\n\nrdar://135841478\n",
            "commit_timestamp": 1726109433.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726153713.070328,
            "elapsed_time": 75.0814733505249,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6503.667213439941,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8cf3eb49a5d9831620b290b9a0686149bd438267",
            "commit_message": "[gn build] Port a409ebc1fc13\n",
            "commit_timestamp": 1726152603.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726197019.60236,
            "elapsed_time": 78.47785782814026,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6574.967742919922,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "dee058f9e3ae95b8f4b95034b65c3d7408060c8e",
            "commit_message": "[RISCV] Emit predefined macro __riscv_cmodel_large for large code model (#108131)\n\nCo-authored-by: patrick <patrick@andestech.com>",
            "commit_timestamp": 1726195068.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726240164.094911,
            "elapsed_time": 77.34394311904907,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6553.6900634765625,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "ea5d37f4c1fd9c0850bee35958568a8b6596b3f9",
            "commit_message": "[LLD][COFF] Add Support for ARM64EC Import Thunks (#108460)\n\nARM64EC import thunks function similarly to regular ARM64 thunks but use\r\na mangled name and perform the call through the auxiliary IAT.",
            "commit_timestamp": 1726239902.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726283473.900451,
            "elapsed_time": 79.10143566131592,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6570.968818664551,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "00f239e48ab9761a963839e118ee6cc4ee42e531",
            "commit_message": "[MLIR][TOSA] Add --tosa-reduce-transposes pass (#108260)\n\n----------\r\nMotivation:\r\n----------\r\n\r\nSome legalization pathways introduce redundant tosa.TRANSPOSE\r\noperations that result in avoidable data movement. For example,\r\nPyTorch -> TOSA contains a lot of unnecessary transposes due\r\nto conversions between NCHW and NHWC.\r\n\r\nWe wish to remove all the ones that we can, since in general\r\nit is possible to remove the overwhelming majority.\r\n\r\n------------\r\nChanges Made:\r\n------------\r\n\r\n- Add the --tosa-reduce-transposes pass\r\n- Add TosaElementwiseOperator trait.\r\n\r\n-------------------\r\nHigh-Level Overview:\r\n-------------------\r\n\r\nThe pass works through the transpose operators in the program. It begins\r\nat some\r\ntranspose operator with an associated permutations tensor. It traverses\r\nupwards\r\nthrough the dependencies of this transpose and verifies that we\r\nencounter only\r\noperators with the TosaElementwiseOperator trait and terminate in either\r\nconstants, reshapes, or transposes.\r\n\r\nWe then evaluate whether there are any additional restrictions (the\r\ntransposes\r\nit terminates in must invert the one we began at, and the reshapes must\r\nbe ones\r\nin which we can fold the transpose into), and then we hoist the\r\ntranspose through\r\nthe intervening operators, folding it at the constants, reshapes, and\r\ntransposes.\r\n\r\nFinally, we ensure that we do not need both the transposed form (the\r\nform that\r\nhad the transpose hoisted through it) and the untransposed form (which\r\nit was prior),\r\nby analyzing the usages of those dependent operators of a given\r\ntranspose we are\r\nattempting to hoist and replace.\r\n\r\nIf they are such that it would require both forms to be necessary, then\r\nwe do not\r\nreplace the hoisted transpose, causing the new chain to be dead.\r\nOtherwise, we do\r\nand the old chain (untransposed form) becomes dead. Only one chain will\r\never then\r\nbe live, resulting in no duplication.\r\n\r\nWe then perform a simple one-pass DCE, so no canonicalization is\r\nnecessary.\r\n\r\n--------------\r\nImpact of Pass:\r\n--------------\r\n\r\nPatching the dense_resource artifacts (from PyTorch) with dense\r\nattributes to\r\npermit constant folding, we receive the following results.\r\n\r\nNote that data movement represents total transpose data movement,\r\ncalculated\r\nby noting which dimensions moved during the transpose.\r\n\r\n///////////\r\nMobilenetV3:\r\n///////////\r\n\r\nBEFORE total data movement: 11798776 B (11.25 MiB)\r\nAFTER total data movement: 2998016 B (2.86 MiB)\r\n74.6% of data movement removed.\r\n\r\nBEFORE transposes: 82\r\nAFTER transposes: 20\r\n75.6% of transposes removed.\r\n\r\n////////\r\nResNet18:\r\n////////\r\n\r\nBEFORE total data movement: 20596556 B (19.64 MiB)\r\nAFTER total data movement: 1003520 B (0.96 MiB)\r\n95.2% of data movement removed.\r\n\r\nBEFORE transposes: 56\r\nAFTER transposes: 5\r\n91.1% of transposes removed.\r\n\r\n////////\r\nResNet50:\r\n////////\r\n\r\nBEFORE total data movement: 83236172 B (79.3 MiB)\r\nAFTER total data movement: 3010560 B (2.87 MiB)\r\n96.4% of data movement removed\r\n\r\nBEFORE transposes: 120\r\nAFTER transposes: 7\r\n94.2% of transposes removed.\r\n\r\n/////////\r\nResNet101:\r\n/////////\r\n\r\nBEFORE total data movement: 124336460 B (118.58 MiB)\r\nAFTER total data movement: 3010560 B (2.87 MiB)\r\n97.6% of data movement removed\r\n\r\nBEFORE transposes: 239\r\nAFTER transposes: 7\r\n97.1% of transposes removed.\r\n\r\n/////////\r\nResNet152:\r\n/////////\r\n\r\nBEFORE total data movement: 175052108 B (166.94 MiB)\r\nAFTER total data movement: 3010560 B (2.87 MiB)\r\n98.3% of data movement removed\r\n\r\nBEFORE transposes: 358\r\nAFTER transposes: 7\r\n98.0% of transposes removed.\r\n\r\n////////\r\nOverview:\r\n////////\r\n\r\nWe see that we remove up to 98% of transposes and eliminate\r\nup to 98.3% of redundant transpose data movement.\r\n\r\nIn the context of ResNet50, with 120 inferences per second,\r\nwe reduce dynamic transpose data bandwidth from 9.29 GiB/s\r\nto 344.4 MiB/s.\r\n\r\n-----------\r\nFuture Work:\r\n-----------\r\n\r\n(1) Evaluate tradeoffs with permitting ConstOp to be duplicated across\r\nhoisted\r\n    transposes with different permutation tensors.\r\n\r\n(2) Expand the class of foldable upstream ReshapeOp we permit beyond\r\n    N -> 1x1x...x1xNx1x...x1x1.\r\n\r\n(3) Enchance the pass to permit folding arbitrary transpose pairs,\r\nbeyond\r\n    those that form the identity.\r\n\r\n(4) Add support for more instructions besides TosaElementwiseOperator as\r\n    the intervening ones (for example, the reduce_* operators).\r\n\r\n(5) Support hoisting transposes up to an input parameter.\r\n\r\nSigned-off-by: Arteen Abrishami <arteen.abrishami@arm.com>",
            "commit_timestamp": 1726280215.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726326448.190527,
            "elapsed_time": 67.50755286216736,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6524.634841918945,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1e4e1ceeebb82dd86d0dc95eb1074b7326b50db3",
            "commit_message": "[Target] Avoid repeated hash lookups (NFC) (#108677)\n\n",
            "commit_timestamp": 1726324749.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726370039.163056,
            "elapsed_time": 72.71495747566223,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6535.081756591797,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c21909a530f438bcc942c11e6d7b875bb28a028a",
            "commit_message": "[NFC][sanitizer] Simplify ifdef\n",
            "commit_timestamp": 1726366362.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726412787.763271,
            "elapsed_time": 69.34535670280457,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6496.332336425781,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "43f044ba7ea2cd668805c01055eb2dff70532ba3",
            "commit_message": "[LLVM][TableGen] Change CodeGenTarget to use const RecordKeeper (#108752)\n\nChange CodeGenTarget to use const RecordKeeper.\r\n\r\nThis is a part of effort to have better const correctness in TableGen\r\nbackends:\r\n\r\n\r\nhttps://discourse.llvm.org/t/psa-planned-changes-to-tablegen-getallderiveddefinitions-api-potential-downstream-breakages/81089",
            "commit_timestamp": 1726410828.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726456518.881157,
            "elapsed_time": 78.41465926170349,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6574.7584228515625,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "095b41c6eedb3acc908dc63ee91ff77944c07d75",
            "commit_message": "[mlir] Reland 5a6e52d6ef96d2bcab6dc50bdb369662ff17d2a0 with update (NFC)\n\nExcluded updates to mlir/lib/AsmParser/Parser.cpp ,\nwhich caused LIT failure \"FAIL: MLIR::completion.test\" on multiple buildbots.\n",
            "commit_timestamp": 1726454728.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726499285.404734,
            "elapsed_time": 83.4486894607544,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6580.570205688477,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0f723eb67197421caf6504a7e4594751040b1924",
            "commit_message": "[Clang] Add locale variants to libc offload wrappers\n\nSummary:\nThese need to be present now that the GPU \"supports\" them (only for the\ndefault POSIX locale).\n",
            "commit_timestamp": 1726498667.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726542524.486905,
            "elapsed_time": 89.3421380519867,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6535.7987060546875,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5df1b79372a89648cdb4ab798f1c74985e00ac6e",
            "commit_message": "[HLSL] Add `[[hlsl::raw_buffer]]` attribute (#107954)\n\nThis PR introduces new HLSL resource type attribute\r\n`[[hlsl::raw_buffer]]`. Presence of this attribute on a resource handle\r\nmeans that the resource does not require typed element access. The\r\nattribute will be used on resource handles that represent buffers like\r\n`StructuredBuffer` or `ByteAddressBuffer` and in DXIL it will be\r\ntranslated to target extension type `dx.RawBuffer`.\r\n\r\nFixes #107907",
            "commit_timestamp": 1726540524.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726585744.021392,
            "elapsed_time": 111.48444628715515,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6556.490852355957,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "53bc35a80a844601c10c8bb75832cbee3ba841ac",
            "commit_message": "[polly] Tidy uses of raw_string_ostream (NFC)\n\nAs specified in the docs,\n1) raw_string_ostream is always unbuffered and\n2) the underlying buffer may be used directly\n\n( 65b13610a5226b84889b923bae884ba395ad084d for further reference )\n\n* Don't call raw_string_ostream::flush(), which is essentially a no-op.\n* Avoid unneeded calls to raw_string_ostream::str(), to avoid excess indirection.\n",
            "commit_timestamp": 1726585138.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726628970.579988,
            "elapsed_time": 89.9567482471466,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6536.026496887207,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8280651ad57cb9fb24a404cec2401040c28dec98",
            "commit_message": "[llvm] [Demangle] Fix MSVC demangling for placeholder return types (#106178)\n\nProperly demangle `_T` and `_P` return type manglings for MSVC 1920+.\r\nAlso added a unit test for `@` return type that is used when mangling\r\nnon-template auto placeholder return type function.\r\n\r\nTested the output against the undname shipped with MSVC 19.40.",
            "commit_timestamp": 1726628744.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726672154.087113,
            "elapsed_time": 72.13573908805847,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6534.667091369629,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b334ca6739fb069b7259a89ba246cc600f07c68f",
            "commit_message": "[NFC] Remove trailing whitespaces in `llvm/docs/LangRef.rst`\n",
            "commit_timestamp": 1726669600.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726715500.695962,
            "elapsed_time": 133.38505005836487,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6511.599433898926,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c9aa9d53b6f92d9780430ab8239ea9117574c95d",
            "commit_message": "[clang-format] Fix regression in BAS_AlwaysBreak for-await (#108634)\n\nFixes #108589.",
            "commit_timestamp": 1726713849.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726758537.776329,
            "elapsed_time": 88.89424586296082,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6549.004493713379,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "14120227a34365e829d05c1413033d235d7d272c",
            "commit_message": "Target ABI: improve call parameters extensions handling (#100757)\n\nFor the purpose of verifying proper arguments extensions per the target's ABI,\r\nintroduce the NoExt attribute that may be used by a target when neither sign-\r\nor zeroextension is required (e.g. with a struct in register). The purpose of\r\ndoing so is to be able to verify that there is always one of these attributes\r\npresent and by this detecting cases where sign/zero extension is actually\r\nmissing.\r\n\r\nAs a first step, this patch has the verification step done for the SystemZ\r\nbackend only, but left off by default until all known issues have been\r\naddressed.\r\n\r\nOther targets/front-ends can now also add NoExt attribute where needed and do\r\nthis check in the backend.\r\n",
            "commit_timestamp": 1726757971.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726801794.726138,
            "elapsed_time": 87.11136269569397,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6527.3292236328125,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "95d4c97a20bb46cd7ca9c5389f9ba33f1bf8f7a0",
            "commit_message": "[libc][wchar] Move wchar's types to proxy headers. (#109334)\n\nAlso protect against extern inline function definitions added when\r\nbuilding with gcc: https://github.com/llvm/llvm-project/issues/60481.",
            "commit_timestamp": 1726799031.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726844955.616062,
            "elapsed_time": 79.38793230056763,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6483.611473083496,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5bcc82d43388bb0daa122d5fe7ecda5eca27fc16",
            "commit_message": "[LoopPeel] Fix LCSSA phi node invalidation\n\nIn the test case, the BECount of the second loop uses %load,\nbut we only have an LCSSA phi node for %add, so that is what\ngets invalidated. Use the forgetLcssaPhiWithNewPredecessor()\nAPI instead, which will invalidate the roots of the expression\ninstead.\n\nFixes https://github.com/llvm/llvm-project/issues/109333.\n",
            "commit_timestamp": 1726844501.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726888179.48849,
            "elapsed_time": 83.04410600662231,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6519.299751281738,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2c4da3c44bf66e764642b94335f7d718730055f5",
            "commit_message": "[MC] Remove unneeded null getFragment() check. NFC\n\nFollow-up to d620ba0344c719da51b6067975439ed84024b1ac.\n",
            "commit_timestamp": 1726887795.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726931373.803205,
            "elapsed_time": 95.06019759178162,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6519.606910705566,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "c9e5c42ad1bba84670d6f7ebe7859f4f12063c5a",
            "commit_message": "[X86,SimplifyCFG][NFC] Refactor code for #108812 (#109398)\n\n",
            "commit_timestamp": 1726921109.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1726974860.109477,
            "elapsed_time": 94.74945330619812,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6520.8283767700195,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "eaedbbc30ded7965f37cfa90149daf308656c299",
            "commit_message": "[libc] Use `yaml.safe_load` rather than `yaml.load` (#109557)\n\n`yaml.load` is considered unsafe, use `yaml.safe_load`.",
            "commit_timestamp": 1726974493.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1727017716.352129,
            "elapsed_time": 77.51535725593567,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6545.680511474609,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7a4b320931a139514b2fcdf682cb4ab2abb6331d",
            "commit_message": "[Rewrite] clang-format RewriteObjC.cpp (NFC)\n\nI'm going to touch this area in a subsequent patch.\n",
            "commit_timestamp": 1727017395.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1727061192.956609,
            "elapsed_time": 77.3999195098877,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6539.0334396362305,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "81c3499531c3fe03827bd8bc890e3a16db9e4c3c",
            "commit_message": "[NFC][sanitizer] Skip test if O_TMPFILE EINVAL on some FS\n",
            "commit_timestamp": 1727056018.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1727104059.893839,
            "elapsed_time": 83.51538419723511,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6544.594352722168,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "606557ddd68bcb082fb82fd21b0afb260222ae14",
            "commit_message": "[PGO] use atomics for profile counters in instrprof-dlopen-norpath.test\n\nWhen two threads dlopen a shared library, one instance of the library\nis loaded. Hence, code inside the library needs to be thread safe,\nso use atomic updates for profile counters.\n",
            "commit_timestamp": 1727104148.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1727147583.323602,
            "elapsed_time": 107.3446888923645,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6528.414688110352,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "9b5a3036adbd9eed0f377cdf06aa622b917a1699",
            "commit_message": "[OpenMP][Docs] Update OpenMP supported features table (#109726)\n\nOpenMP features table: updated scope directive status from 'worked on'\r\nto 'done' in section OpenMP 5.1 Implementation Details.",
            "commit_timestamp": 1727146768.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1727190612.916454,
            "elapsed_time": 124.728684425354,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6583.447715759277,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "3fbf6f8bb183ad8b9157e50c442479f4ca7a9b8d",
            "commit_message": "[LV] Remove more references of unrolled parts after 57f5d8f2fe.\n\nContinue to clean up some now stale references of unroll parts and\nrelated terminology as pointed out post-commit for 06c3a7d.\n",
            "commit_timestamp": 1727189431.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1727234074.623374,
            "elapsed_time": 97.91159200668335,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6522.661560058594,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "18b9d49ce3370c012fdd04ec87d854d53293f6a6",
            "commit_message": "lldb: get lldb API tests working with newer Android NDKs\n\n## Purpose\r\nRunning the LLDB API tests against a remote Android target with NDK\r\nversion r22 or later fails to compile the test inferiors. NDK r21 from\r\n2021 is the most recent NDK that still works with the LLDB API tests.\r\nThis PR updates the Android make rules to support newer Android NDK\r\nversions (r19 and later).\r\n\r\n## Overview\r\n* Updates and simplifies `Android.rules` to match the newer Android NDK\r\nunified toolchain layout introduced in NDK r19\r\n* Sets `OBJCOPY` and `ARCHIVER` env vars, required by a few test cases,\r\nto their `llvm-` versions in the unified toolchain\r\n* Drops support for pre-2019 Android NDK versions to keep the rules\r\nsimple\r\n* Provides an error message if the tests are run using an incompatible\r\nNDK layout\r\n\r\n## Problem Details\r\nAndroid introduced a unified tools layout in NDK r19 (2019) and removed\r\nthe old layout in r22 (2021). Releases r19, r20, and r21 support both\r\nthe old and new layout side-by-side. More details are in #106270.\r\n\r\n## Validation\r\nRan a sub-set of the LLDB API tests against remote Android targets for\r\nthe four primary architectures i386, x86_64, arm, and aarch64. No\r\nvalidation was done against riscv targets.\r\n\r\nFor each case, ran the copy of `lldb-server` from the Android NDK on the\r\ndevice with the latest LLDB test cases in llvm-project\r\n\r\nRan tests with both r19 (the oldest supported) and r26 (more recent,\r\nunified layout only) NDK versions.\r\n\r\nExample test command for aarch64:\r\n```\r\n./build/bin/lldb-dotest --out-of-tree-debugserver --arch aarch64 --platform-name remote-android --platform-url connect://localhost:5432 --platform-working-dir /data/local/tmp --compiler=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/clang lldb/test/API/android/\r\n```\r\n**NOTE: there are a lot of test failures when running the full suite\r\n(especially against 32-bit ARM target). These failures occur independent\r\nof this change.**\r\n\r\nVerified the expected error message appears when attempting to run using\r\nNDK r18\r\n```\r\nBuild Command Output:\r\nmake: Entering directory '/home/andrew/src/llvm/llvm-project/build/lldb-test-build.noindex/android/platform/TestDefaultCacheLineSize.test_cache_line_size'\r\n/home/andrew/src/llvm/llvm-project/lldb/packages/Python/lldbsuite/test/make/Android.rules:16: *** \"No unified toolchain sysroot found in /home/andrew/Android/Sdk/ndk/18.1.5063045/toolchains/llvm/prebuilt/linux-x86_64/bin/../../../../... NDK must be r19 or later.\".  Stop.\r\nmake: Leaving directory '/home/andrew/src/llvm/llvm-project/build/lldb-test-build.noindex/android/platform/TestDefaultCacheLineSize.test_cache_line_size'\r\n```\r\n\r\n## Impact\r\n**This change explicitly removes support for the pre-2019 NDK\r\nstructure.** Only NDK r19 (from 2019) and later can be used when running\r\nthe LLDB API tests. If the maintainers object, we can easily support\r\nboth the old and new NDK toolchain layouts side-by-side at the cost of\r\nreadability/maintainability. Since this change only impacts tests, I\r\ndon't see much value in supporting NDKs that are over 5 years old.\r\n\r\n## Guidance to Reviewers\r\n* I am not an expert on `clang` arguments so if anything looks off let\r\nme know.\r\n* While I personally thing supporting 5+ year old NDKs for testing seems\r\nunnecessary, please chime-in if you are concerned with dropping that\r\nsupport. I can easily revise to support both old and new layouts\r\nside-by-side.\r\n* If there are any specific tests you'd like me to run I will do my best\r\nto accommodate. It doesn't look like there's much (any?) Android LLDB CI\r\ncoverage.",
            "commit_timestamp": 1727233234.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1727320424.812046,
            "elapsed_time": 102.00354647636414,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6551.253776550293,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "14b567dcaae62660aa360bed595b087339143b17",
            "commit_message": "[X86][IPRA] Add getIPRACSRegs since frame registers are risked to be optimized out. (#109597)\n\nX86 IPRA had below correctness issue:\r\nhttps://gcc.godbolt.org/z/6hh88xv9r\r\nThis patch is a workaround to fix it.",
            "commit_timestamp": 1727319472.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1727363369.982443,
            "elapsed_time": 87.35401773452759,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6569.169364929199,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6d6d15b626a3d6132765a75a103a773b0e45327b",
            "commit_message": "[X86] Avoid repeated hash lookups (NFC) (#110077)\n\n",
            "commit_timestamp": 1727362801.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1727406781.12709,
            "elapsed_time": 107.38881969451904,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6506.127166748047,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d435acb8ebb46425e752d1fb02015dbbf6471585",
            "commit_message": "[DWARF] Don't emit DWARF5 symbols for DWARF2/3 + non-lldb (#110120)\n\nModify other legacy dwarf versions to align with the dwarf4 handling\r\napproach when determining whether to generate DWARF5 or GNU extensions.",
            "commit_timestamp": 1727404024.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1727449684.798952,
            "elapsed_time": 82.43157768249512,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6509.37686920166,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1fd1f65569f565b5b06fd9464b3b91fcd6f2fa2a",
            "commit_message": " [mlir] Refactor LegalizeToF32 to specify extra supported float types and target type as arguments (#108815)\n\nInstead of hardcoding all fp smaller than 32 bits are unsupported we\r\nprovide a way to pass supported floating point types as well as the\r\ntarget type. fp64 and fp32 are implicitly supported.\r\n\r\nCC: @krzysz00 @manupak",
            "commit_timestamp": 1727449336.0
        },
        {
            "tool_version": "243.0.20240901.31354-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1727493126.657185,
            "elapsed_time": 97.98445343971252,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6516.762001037598,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "2a005bff183c6c02004fa61a7bc5ec87d5d88ad3",
            "commit_message": "[Flang][OpenMP] Fix for error in atomic read for different elements of the common symbol #80399 (#109265)\n\nFixes issue https://github.com/llvm/llvm-project/issues/80399",
            "commit_timestamp": 1727491349.0
        }
    ]
}