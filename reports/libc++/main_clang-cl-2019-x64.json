{
    "v1": [
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": true,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722185785.548727,
            "elapsed_time": 88.98341798782349,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6628.4228515625,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "991192b211212aa366bf73b993ac444839c10bf5",
            "commit_message": "[Sparc] Remove custom lowering for ADD[CE] / SUB[CE] (#100861)\n\nThe default lowering produces fewer instructions.",
            "commit_timestamp": 1722180160.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": true,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722222554.75982,
            "elapsed_time": 87.42598843574524,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6621.699142456055,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "71d85ca2f9dba7f08a7a84c6cff5396ed594cb3c",
            "commit_message": "[RISCV][CFI] Emit cfi_offset for every callee-saved vector registers (#100455)\n\nThe grouped vector register is modeled as a single register, e.g. V2M2,\r\nwhich is actually V2 and V3. We need to decompose the grouped vector\r\nregister(if any) to individual vector register when emitting CFIs in\r\nprologue.\r\n\r\nFixed https://github.com/llvm/llvm-project/issues/94500",
            "commit_timestamp": 1722222187.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": true,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722265702.329616,
            "elapsed_time": 92.1554765701294,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6612.045249938965,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "1b4be6a474b3747765a218201bd637f899fd9b66",
            "commit_message": "[ARM] Regenerate vselect_imax.ll\n",
            "commit_timestamp": 1722264822.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722276954.710154,
            "elapsed_time": 80.96733069419861,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6652.138763427734,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f9e7cba122c2b636ddb975791aadf33c69f3f056",
            "commit_message": "Fix hasName matcher assertion with inline namespaces (#100975)\n\nFix handling of nodes which can be skipped in the fast path for the\r\nhasName matcher\r\n\r\nFixes #100973",
            "commit_timestamp": 1722276662.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722308971.349177,
            "elapsed_time": 110.86297035217285,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6596.241134643555,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6d02f62e4af90295a6e0386e3e96afe518777c17",
            "commit_message": "[mlir][linalg] Add vectorization support for minnumf/maxnumf reductions. (#101092)\n\nThis is a follow-up for\r\nhttps://discourse.llvm.org/t/rfc-fix-floating-point-max-and-min-operations-in-mlir/72671\r\n\r\nThe ops were splitted to two version, and the vectorization support for\r\none of them is missing.\r\n\r\nThe revision also renames the existing lit tests accordingly, which\r\nexplicitly puts `maximumf/minimumf` to the function names.",
            "commit_timestamp": 1722308440.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722352005.354721,
            "elapsed_time": 72.38793873786926,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6633.208297729492,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8fc329421b2e3bc5cdda98ce303ea3b07af58ebc",
            "commit_message": "[mlir][Transforms] Dialect conversion: Add missing \"else if\" branch (#101148)\n\nThis code got lost in #97213 and there was no test for it. Add it back\r\nwith an MLIR test.\r\n\r\nWhen a pattern is run without a type converter, we can assume that the\r\nnew block argument types of a signature conversion are legal. That's\r\nbecause they were specified by the user. This won't work for 1->N\r\nconversions due to limitations in the dialect conversion infrastructure,\r\nso the original `FIXME` has to stay in place.",
            "commit_timestamp": 1722350207.0
        },
        {
            "tool_version": "242.0.20240720.165730-eap08",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722395370.987578,
            "elapsed_time": 75.43336462974548,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6620.595848083496,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "57acabb8e09baa38b156965b2dc567a8c7eb2429",
            "commit_message": "[Driver,X86] Update test Clang::Preprocessor/x86_target_features.c after #101151\n",
            "commit_timestamp": 1722395003.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": true,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722437003.241588,
            "elapsed_time": 102.93361783027649,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6626.583610534668,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "23d188ed91ed39879e6f6e36d07eca6ceae4bab5",
            "commit_message": "[libcxx][test] Require long_tests for eval.PR44847.pass.cp (#100722)\n\nThis takes 1m40s to run when testing picolib on qemu. This isn't the end\r\nof the world but that's on an AArch64 server. So if someone felt the\r\nneed to mark this unsupported in the first place, it's likely much\r\nslower on average hardware.",
            "commit_timestamp": 1722436596.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": true,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722438515.877502,
            "elapsed_time": 82.62360787391663,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6650.903717041016,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b5a7d3b6c2169d84f9da749425a38dcef914d1ce",
            "commit_message": "[SLP][REVEC] Make Instruction::Select support vector instructions. (#100507)\n\n",
            "commit_timestamp": 1722438230.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722442608.114971,
            "elapsed_time": 115.6876859664917,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6611.965354919434,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "8b2688bd173e79392927bcaed91855e7c4db8eaa",
            "commit_message": "[scudo] Separated committed and decommitted entries. (#100818)\n\nInitially, the LRU list stored all mapped entries with no distinction\r\nbetween the committed (non-madvise()'d) entries and decommitted\r\n(madvise()'d) entries. Now these two types of entries are separated into\r\ntwo lists, allowing future cache logic to branch depending on whether or\r\nnot entries are committed or decommitted. Furthermore, the retrieval\r\nalgorithm will prioritize committed entries over decommitted entries.\r\nSpecifically, valid-fit, committed entries (not necessarily optimal-fit)\r\nare retrieved before optimal-fit, decommitted entries.",
            "commit_timestamp": 1722442224.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722481625.089444,
            "elapsed_time": 75.06262350082397,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6622.808128356934,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "42c413b48917491efc5372752c6ad245530939f5",
            "commit_message": "[mlir][Transforms] Preserve all analysis in print passes (#101315)\n\nPrintIRPass, PrintOpStatsPass and PrintOpGraphPass don't mutate IR so\r\npreserve all analysis to save computation resource a bit.",
            "commit_timestamp": 1722480688.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722524949.843489,
            "elapsed_time": 130.52757048606873,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6600.268218994141,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e7630a0d60821dc13bb0be4e50b49fba5f90471f",
            "commit_message": "AMDGPU: Improve cost handling of canonicalize (#101479)\n\n",
            "commit_timestamp": 1722524540.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722568093.635971,
            "elapsed_time": 98.0918357372284,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6609.657386779785,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e7f73c03dfe6c895b2dbe6d8d1d03546b87888c4",
            "commit_message": "[Attributor] Use `getPointerAddressSpace` to replace a cast followed by a `getAddressSpace`\n",
            "commit_timestamp": 1722567463.0
        },
        {
            "tool_version": "242.0.20240801.125602-rc01",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722582507.85061,
            "elapsed_time": 80.6609697341919,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6622.9897384643555,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "e9c20b9132c93baaaf78a070fa4cd0a853ca5e65",
            "commit_message": "[test][asan] Disabled a new test on Android\n\nWill investigate soon.\nThe test is from #100923.\n",
            "commit_timestamp": 1722582078.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722611605.904447,
            "elapsed_time": 171.90341806411743,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6583.942977905273,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "d96569ecc2807a13dab6495d8cc4e82775b00af1",
            "commit_message": "[analyzer] Fix crash on using `bitcast(<type>, <array>)` as array subscript (#101647)\n\nCurrent CSA logic does not expect `LazyCompoundValKind` as array index.\r\nThis may happen if array is used as subscript to another, in case of\r\nbitcast to integer type.\r\n\r\nCatch such cases and return `UnknownVal`, since CSA cannot model\r\narray -> int casts.\r\n\r\nCloses #94496",
            "commit_timestamp": 1722611097.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722654614.380319,
            "elapsed_time": 173.35416650772095,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6641.290412902832,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "400c7c7cf2b15138aa674355983be74270de93bc",
            "commit_message": "[clang][Interp][NFC] Simplify Pointer move/copy assignment op\n",
            "commit_timestamp": 1722653956.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722697731.52849,
            "elapsed_time": 147.42247128486633,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6605.6445388793945,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "f78d288d9d77c66f8b3036c62bb55160f19ba9cd",
            "commit_message": "[clang][Interp] Fix function pointer callexpr eval order (#101821)\n\nWe need to evaluate the callee before the arguments.",
            "commit_timestamp": 1722696997.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722740898.055127,
            "elapsed_time": 88.10369277000427,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6618.8405685424805,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b024fd267b813149f7bd5ba88731673b9a29258d",
            "commit_message": "[libc] disable strfroml entrypoint on aarch64 (#101854)\n\nDisable `strfroml` entrypoint on aarch64 to please clang-11 buildbots.\r\nDetailed in https://github.com/llvm/llvm-project/issues/101846. This is\r\nnot a fix for #101846 so I will keep the issue open until our buildbot\r\nis updated or other mitigation is applied.",
            "commit_timestamp": 1722738493.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722784166.819406,
            "elapsed_time": 101.04826307296753,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6614.511497497559,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "0edafc461f5f98b2ed5d2d621e1d9de70ccbd4e5",
            "commit_message": "[libc++] mark P0645 as complete (#101852)\n\nNow that #98275 has been merged, the footnote for P0645 has become\r\noutdated. This updates the status information.",
            "commit_timestamp": 1722779993.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722827356.406555,
            "elapsed_time": 104.03404474258423,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6602.033401489258,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7f78f99fe5af82361d37adcbd2daa4d04afba13d",
            "commit_message": "[clang] Reland: Instantiate alias templates with sugar (#101858)\n\nThis makes use of the changes introduced in D134604, in order to\r\ninstantiate alias templates witn a final sugared substitution.\r\n\r\nThis comes at no additional relevant cost.\r\nSince we don't track / unique them in specializations, we wouldn't be\r\nable to resugar them later anyway.\r\n\r\nDifferential Revision: https://reviews.llvm.org/D136565",
            "commit_timestamp": 1722824934.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722870470.002809,
            "elapsed_time": 78.46020770072937,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6602.354682922363,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "6848b99d170e9ac59ce2007c817bc579536d8e8e",
            "commit_message": "[OpenMP][Map][NFC] improve map chain. (#101903)\n\nThis is for mapping structure has data members, which have 'default'\r\nmappers, where needs to map these members individually using\r\ntheir 'default' mappers.\r\n\r\nexample map(tofrom: spp[0][0]), look at test case.\r\n\r\ncurrently create 6 maps:\r\n1>&spp, &spp[0],  size 8, maptype TARGET_PARAM | FROM | TO\r\n2>&spp[0], &spp[0][0], size(D)with maptype OMP_MAP_NONE, nullptr\r\n3>&spp[0], &spp[0][0].e, size(e) with maptype MEMBER_OF  | FROM  | TO\r\n4>&spp[0], &spp[0][0].h, size(h) with maptype MEMBER_OF  | FROM  | TO\r\n5>&spp, &spp[0],size(8), maptype MEMBER_OF | IMPLICIT | FROM  | TO\r\n6>&spp[0], &spp[0][0].f size(D) with maptype MEMBER_OF |IMPLICIT\r\n|PTR_AND_OBJ, @.omp_mapper._ZTS1C.default\r\n\r\nmaptype with/without OMP_MAP_PTR_AND_OBJ\r\n   For \"2\" and \"5\", since it is mapping pointer and pointee pair,\r\n   PTR_AND_OBJ should be set\r\n   But for \"6\" the PTR_AND_OBJ should not set.\r\nHowever, \"5\" is duplicate with \"1\" can be skip.\r\n\r\nTo fix \"2\", during the call to emitCombinEntry with false with\r\nNotTargetParams\r\ninstead !PartialStruct.PreliminaryMapData.BasePointers.empty(), since\r\nall captures need to be TARGET_PARAM\r\nAnd inside emitCombineEntry:  check\r\n!PartialStruct.PreliminaryMapData.BasePointers.empty() to set\r\nPTR_AND_OBJ\r\n\r\nFor \"5\" and \"6\": the fix in generateInfoForComponentList:\r\nAdd new variable IsPartialMapped set with\r\n!PartialStruct.PreliminaryMapData.BasePointers.empty();\r\n\r\nWhen that is true, skip generate \"5\" and don\"t set IsExpressionFirstInfo\r\nto false, so that PTR_AND_OBJ would be set.\r\n\r\nAfter fix: will have 5 maps instead 6\r\n1>&spp, &spp[0],  size 8, maptype TARGET_PARAM | FROM | TO\r\n2>&spp[0], &spp[0][0], size(D), maptype PTR_AND_OBJ, nullptr\r\n3>&spp[0], &spp[0][0].e, size(e), maptype MEMBER_OF_2  | FROM  | TO\r\n4>&spp[0], &spp[0][0].h, size(h), maptype MEMBER_OF_2  | FROM  | TO\r\n5>&spp[0], &spp[0][0].f size(32), maptype MEMBER_OF_2 | IMPLICIT,\r\n@.omp_mapper._ZTS1C.default\r\n\r\nFor map(sppp[0][0][0]):\r\nafter fix: will have 6 maps instead 8.\r\n\r\nhttps://github.com/llvm/llvm-project/pull/101903",
            "commit_timestamp": 1722870071.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722913740.276799,
            "elapsed_time": 78.32131671905518,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6621.047332763672,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "874067a22f0f483dbe210d8547c06d564bfa7848",
            "commit_message": "[Sema] Preserve ContainsUnexpandedParameterPack in TransformLambdaExpr (#86265)\n\nThe lambda `ContainsUnexpandedParameterPack` flag is used for the\r\nexpressions' dependency computing and is therefore essential for pack\r\nexpansion.\u00a0We previously lost the flag's preservation during the\r\nlambda's transform, which caused some issues, e.g. a fold expression\r\ncouldn't properly expand inside a template.\r\n\r\nThis patch alleviates the issue by retaining the flag in more scenarios.\r\nNote that we still have problems with constraints involving packs\r\nregarding lambdas, and dealing with that would take more effort, and\r\nwe'd like to fix them in the future.\r\n\r\nFixes https://github.com/llvm/llvm-project/issues/56852\r\nFixes https://github.com/llvm/llvm-project/issues/85667\r\nMitigates https://github.com/llvm/llvm-project/issues/99877 because the\r\nattributes were not handled in this patch.\r\n\r\n---------\r\n\r\nCo-authored-by: Ilya Biryukov <809452+ilya-biryukov@users.noreply.github.com>\r\nCo-authored-by: cor3ntin <corentinjabot@gmail.com>",
            "commit_timestamp": 1722912885.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1722957008.764454,
            "elapsed_time": 107.56602096557617,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6599.519325256348,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "bd576fe34285c4dcd04837bf07a89a9c00e3cd5e",
            "commit_message": "[clang][driver][clang-cl] Support `--precompile` and `-fmodule-*` options in Clang-CL (#98761)\n\nThis PR is the first step in improving the situation for `clang-cl`\r\ndetailed in [this LLVM Discourse\r\nthread](https://discourse.llvm.org/t/clang-cl-exe-support-for-c-modules/72257/28).\r\nThere has been some work done in #89772. I believe this is somewhat\r\northogonal.\r\n\r\nThis is a work-in-progress; the functionality has only been tested with\r\nthe [basic 'Hello World'\r\nexample](https://clang.llvm.org/docs/StandardCPlusPlusModules.html#quick-start),\r\nand proper test cases need to be written. I'd like some thoughts on\r\nthis, thanks!\r\n\r\nPartially resolves #64118.",
            "commit_timestamp": 1722956755.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723000102.316791,
            "elapsed_time": 92.96027565002441,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6583.436080932617,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b64ec3c9faf0adce6e92c69fb48a7c7473c57200",
            "commit_message": "[SLP] The order of store chains needs to consider the size of the values. (#101810)\n\nWhen store chains have the same value type ID and pointer type ID, they\r\nmay mix different sizes of values, such as i8 and i64. This can lead to\r\nmissed vectorization opportunities.",
            "commit_timestamp": 1722999713.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723043439.896401,
            "elapsed_time": 80.01933455467224,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6585.918197631836,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "7634a96589637186b640a0441c0544a9868d9913",
            "commit_message": "[flang][acc] Improve lowering of Fortran optional in data clause (#102224)\n\nFortran optional arguments are effectively null references. To deal with\r\nthis possibility, flang lowering of OpenACC data clauses creates three\r\nif-else regions when preparing the data pointer for the data clause:\r\n1) Load box value from box reference\r\n2) Load box addr from box value\r\n3) Load box dims from box value\r\n\r\nHowever, this pattern makes it more complicated to find the original box\r\nreference. Effectively, the first if-else region to get the box value is\r\nnot needed - since the value can be loaded before the corresponding\r\n`fir.box_addr` and `fir.box_dims` operations. Thus, reduce the number of\r\nif-else regions by deferring the box load to the use sites.\r\n\r\nFor non-optional cases, the old functionality is left alone - which\r\npreloads the box value.",
            "commit_timestamp": 1723043046.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723086438.411889,
            "elapsed_time": 85.4023060798645,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6619.307891845703,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "fc0802a1d0bf2ede0ba71df09ddf5e601ab6587b",
            "commit_message": "[Fuchsia][CMake] Remove new/delete from baremetal libc++ (#102415)\n\nThis is causing issues for some baremetal targets.",
            "commit_timestamp": 1723085601.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723129773.530617,
            "elapsed_time": 71.83608865737915,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6607.954986572266,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "b2e69f52bb5da067109b9a7d1f73d0dd1a6bb5ad",
            "commit_message": "[LoongArch] Add machine function pass to merge base + offset (#101139)\n\nThis commit references RISC-V to add a machine function pass to merge\r\nthe base address and offset.",
            "commit_timestamp": 1723129538.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723172862.475986,
            "elapsed_time": 85.03861021995544,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6600.371032714844,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "00139ae1bc0ae855ebe9c8991f480b382bbc4308",
            "commit_message": "Revert \"[clang] Reland: Instantiate concepts with sugared template arguments (#101782)\" (#102551)\n\n",
            "commit_timestamp": 1723171088.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723216122.312116,
            "elapsed_time": 76.1420533657074,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6577.068916320801,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "5c0eb1a6e4679cc741f75f5ddc53d4878dabc1f2",
            "commit_message": "[bazel] Add missing dep for the SPIRVToLLVM target\n",
            "commit_timestamp": 1723215129.0
        },
        {
            "tool_version": "243.0.20240731.75611-eap01d",
            "error_mismatch": false,
            "project": [
                "cxx_shared"
            ],
            "timestamp": 1723259370.785817,
            "elapsed_time": 92.13912630081177,
            "x64": true,
            "actual_files_count": 89,
            "expected_files_count": null,
            "memory_traffic": 6582.343734741211,
            "repo_url": "https://github.com/llvm/llvm-project",
            "commit_ref": "77e68fbdd3fdc205bafa042fcb87014011dc7799",
            "commit_message": "AMDGPU/NewPM: Port AMDGPUAnnotateUniformValues to new pass manager (#102654)\n\n",
            "commit_timestamp": 1723259168.0
        }
    ]
}