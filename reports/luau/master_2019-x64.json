{
    "v1": [
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684657432.739121,
            "elapsed_time": 299.35824847221375,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684664537.034477,
            "elapsed_time": 385.43586254119873,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684670902.313893,
            "elapsed_time": 302.8894624710083,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684685277.462446,
            "elapsed_time": 303.31714725494385,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684699779.022338,
            "elapsed_time": 371.7542209625244,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684714171.635261,
            "elapsed_time": 307.92603182792664,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684728552.730517,
            "elapsed_time": 320.2816948890686,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684745552.468907,
            "elapsed_time": 310.50685000419617,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684743010.192255,
            "elapsed_time": 433.99671387672424,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684757392.984715,
            "elapsed_time": 376.2039577960968,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684767451.408989,
            "elapsed_time": 365.0249054431915,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684771902.9771,
            "elapsed_time": 388.1186182498932,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684786110.758038,
            "elapsed_time": 356.7516357898712,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684800683.135999,
            "elapsed_time": 366.3063609600067,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684815031.001538,
            "elapsed_time": 344.32253217697144,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684829670.341681,
            "elapsed_time": 417.6601564884186,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684829386.749486,
            "elapsed_time": 400.11024951934814,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684843829.617655,
            "elapsed_time": 387.153329372406,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684860449.490949,
            "elapsed_time": 385.62357473373413,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684858244.484198,
            "elapsed_time": 422.49450612068176,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684872493.492713,
            "elapsed_time": 307.10898423194885,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684886995.40541,
            "elapsed_time": 310.54746770858765,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684901367.143107,
            "elapsed_time": 318.34268498420715,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684915731.692204,
            "elapsed_time": 316.82924914360046,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684932931.093288,
            "elapsed_time": 369.2900743484497,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684930125.368656,
            "elapsed_time": 313.64088916778564,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684935631.108278,
            "elapsed_time": 359.055867433548,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684942031.870674,
            "elapsed_time": 307.72335410118103,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684944542.26176,
            "elapsed_time": 369.9609441757202,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684958897.143119,
            "elapsed_time": 312.0504837036133,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684973393.479884,
            "elapsed_time": 310.3773138523102,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684987719.027607,
            "elapsed_time": 310.2006804943085,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685002121.025635,
            "elapsed_time": 304.9139335155487,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685007207.402617,
            "elapsed_time": 308.45625400543213,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685016529.402705,
            "elapsed_time": 300.13296341896057,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685030889.954582,
            "elapsed_time": 300.7254436016083,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685045354.354921,
            "elapsed_time": 381.5746293067932,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685059861.762924,
            "elapsed_time": 328.9347469806671,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685074130.397628,
            "elapsed_time": 343.4818375110626,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685085654.054551,
            "elapsed_time": 369.57731652259827,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685087125.520854,
            "elapsed_time": 302.94352316856384,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685088581.921973,
            "elapsed_time": 318.9921202659607,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685098260.250029,
            "elapsed_time": 343.7921748161316,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685102925.208259,
            "elapsed_time": 360.1158299446106,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685113796.44732,
            "elapsed_time": 365.8231613636017,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685131725.075868,
            "elapsed_time": 318.45090675354004,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685146198.91501,
            "elapsed_time": 308.39301586151123,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685160593.608381,
            "elapsed_time": 360.7691481113434,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685168831.942406,
            "elapsed_time": 310.1242127418518,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685174869.871599,
            "elapsed_time": 290.71976685523987,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685181773.42086,
            "elapsed_time": 340.3288218975067,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685191445.544299,
            "elapsed_time": 359.5428559780121,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685189354.938971,
            "elapsed_time": 325.59674525260925,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685203740.932208,
            "elapsed_time": 307.90477991104126,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685219748.755624,
            "elapsed_time": 340.8662452697754,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685218067.851637,
            "elapsed_time": 301.94525027275085,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685232296.307356,
            "elapsed_time": 321.9173786640167,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685246665.196369,
            "elapsed_time": 347.6549565792084,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685260971.359986,
            "elapsed_time": 358.88397192955017,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685275398.07411,
            "elapsed_time": 301.41819858551025,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685289777.712135,
            "elapsed_time": 316.0138051509857,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685304191.674659,
            "elapsed_time": 365.2195580005646,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685318718.009209,
            "elapsed_time": 364.69531536102295,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685333007.87653,
            "elapsed_time": 316.1356279850006,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685347473.002309,
            "elapsed_time": 303.27708673477173,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685361849.014945,
            "elapsed_time": 304.91650891304016,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685376224.813655,
            "elapsed_time": 356.2855694293976,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685390598.765099,
            "elapsed_time": 306.1117961406708,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685405095.966466,
            "elapsed_time": 325.6111378669739,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685419452.876918,
            "elapsed_time": 311.56925892829895,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685433810.674537,
            "elapsed_time": 319.4945454597473,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685448213.793554,
            "elapsed_time": 333.43077278137207,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685462596.088635,
            "elapsed_time": 314.03483843803406,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685477056.100153,
            "elapsed_time": 342.1101462841034,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685491464.765296,
            "elapsed_time": 309.6119558811188,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685505812.156704,
            "elapsed_time": 390.3504638671875,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685520210.252584,
            "elapsed_time": 315.7661371231079,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685526883.189402,
            "elapsed_time": 307.112624168396,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685534629.116934,
            "elapsed_time": 321.90641927719116,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685553635.616128,
            "elapsed_time": 367.13842034339905,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685549001.769922,
            "elapsed_time": 320.3791332244873,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685563419.314731,
            "elapsed_time": 410.5162281990051,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685577850.127988,
            "elapsed_time": 349.55673599243164,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685592189.349956,
            "elapsed_time": 369.11984753608704,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685606581.981867,
            "elapsed_time": 306.8372461795807,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685620999.769924,
            "elapsed_time": 321.8200044631958,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685635448.387279,
            "elapsed_time": 396.03871059417725,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685649798.244027,
            "elapsed_time": 364.0134789943695,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685664318.111883,
            "elapsed_time": 397.13962721824646,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685678606.520181,
            "elapsed_time": 317.75320982933044,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685693011.332843,
            "elapsed_time": 320.46625900268555,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685707412.502738,
            "elapsed_time": 304.1977365016937,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685716394.269884,
            "elapsed_time": 371.23781299591064,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685721773.038587,
            "elapsed_time": 313.221964597702,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "271c509046779bfae0e9224629543130e02687d2",
            "commit_message": "Sync to upstream/release/578 (#939)\n\n* Fixed gcc warning about uninitialized `std::optional`\r\n* Fixed inlining of functions when they are used to compute their own\r\narguments\r\n\r\nIn the new type solver:\r\n* Type families that are not part of a function signature cannot be\r\nresolved at instantiation time and will now produce an error. This will\r\nbe relaxed in the future when we get constraint clauses on function\r\nsignatures (internally)\r\n* `never` type is now comparable\r\n* Improved typechecking of `for..in` statements\r\n* Fixed checks for number type in `Add` type family\r\n* Performance was improved, with particularly large gains on large\r\nprojects\r\n\r\nAnd in native code generation (jit):\r\n* We eliminated the call instruction overhead when native code support\r\nis enabled in the VM\r\n* Small optimizations to arm64 lowering\r\n* Reworked LOP_GETIMPORT handling to reduce assembly code size\r\n* Fixed non-deterministic binary output\r\n* Fixed bad code generation caused by incorrect SSA to VM register links\r\ninvalidation\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Andy Friesen <afriesen@roblox.com>",
            "commit_timestamp": 1685050594.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685736181.361783,
            "elapsed_time": 300.2939922809601,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685750609.459724,
            "elapsed_time": 458.63570404052734,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685765041.544702,
            "elapsed_time": 432.94176506996155,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685779449.330668,
            "elapsed_time": 313.3798100948334,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685793821.995961,
            "elapsed_time": 311.61239194869995,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685808204.415149,
            "elapsed_time": 354.8222839832306,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685822640.796737,
            "elapsed_time": 311.1458055973053,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685837047.394811,
            "elapsed_time": 365.87900733947754,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685851390.562668,
            "elapsed_time": 394.64696884155273,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685865778.831603,
            "elapsed_time": 355.9755141735077,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685880161.990338,
            "elapsed_time": 359.55082750320435,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685894591.501241,
            "elapsed_time": 318.36975169181824,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685909042.449231,
            "elapsed_time": 317.24833941459656,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685923427.023949,
            "elapsed_time": 362.9734513759613,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685937873.71094,
            "elapsed_time": 332.9015579223633,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685952195.795085,
            "elapsed_time": 321.30472326278687,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685966705.124964,
            "elapsed_time": 406.827397108078,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685981026.598522,
            "elapsed_time": 390.34577560424805,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685995446.598384,
            "elapsed_time": 314.1325330734253,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686009895.254444,
            "elapsed_time": 382.18287658691406,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686024161.131544,
            "elapsed_time": 362.35454511642456,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686040292.226603,
            "elapsed_time": 373.0739758014679,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686038630.542696,
            "elapsed_time": 317.5303273200989,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686051768.501097,
            "elapsed_time": 335.6699981689453,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686057409.671262,
            "elapsed_time": 327.1549756526947,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686053046.37917,
            "elapsed_time": 342.3630065917969,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "63679f7288ca3994d3e3a9c6d432418d6dd7ba9c",
            "commit_message": "Sync to upstream/release/579 (#943)\n\nA pretty small changelist this week:\r\n\r\n* When type inference fails to find any matching overload for a\r\nfunction, we were declining to commit any changes to the type graph at\r\nall. This was resulting in confusing type errors in certain cases. Now,\r\nwhen a matching overload cannot be found, we always commit to the first\r\noverload we tried.\r\n\r\nJIT\r\n\r\n* Fix missing variadic register invalidation in FALLBACK_GETVARARGS\r\n* Add a missing null pointer check for the result of luaT_gettm\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1685735535.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686067413.144816,
            "elapsed_time": 335.7690041065216,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "4f82a7739648af3dcd9b8c8067f0c4c97c063727",
            "commit_message": "Update lint.md to specify language on fenced code blocks which have none (#946)\n\nSpecified language on the last two fenced code blocks in the page as\r\nthey were inconsistent with the others on the same page.",
            "commit_timestamp": 1686067056.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686081832.599634,
            "elapsed_time": 338.84315609931946,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "e78897229a24328aba343694d1004b1cc5c607dc",
            "commit_message": "Fix website demo's string highlighting behaviour (#942)\n\nFixes #935:\r\n* String literals that include `\\z` escape sequence followed by newline\r\ncharacters are now correctly highlighted.\r\n* Unescaped backslash (`\\`) character at the end of the line no longer\r\nacts like the `\\z` escape sequence inside string literals when\r\nhighlighting.",
            "commit_timestamp": 1686075751.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686096348.407173,
            "elapsed_time": 334.7879605293274,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686110603.468253,
            "elapsed_time": 410.3643891811371,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686118376.64122,
            "elapsed_time": 321.1997489929199,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686125075.205007,
            "elapsed_time": 372.1259388923645,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686139405.772921,
            "elapsed_time": 324.59623622894287,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686153843.826703,
            "elapsed_time": 340.98695182800293,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686168264.977187,
            "elapsed_time": 331.83461904525757,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686182682.761073,
            "elapsed_time": 322.09219789505005,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686196983.872788,
            "elapsed_time": 372.36227774620056,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686211435.921855,
            "elapsed_time": 439.07805848121643,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686225797.048228,
            "elapsed_time": 318.43856549263,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686240249.646861,
            "elapsed_time": 333.5771300792694,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686254629.355418,
            "elapsed_time": 322.59891295433044,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686269057.159848,
            "elapsed_time": 400.1367082595825,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686297804.608849,
            "elapsed_time": 330.8919110298157,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686312187.020617,
            "elapsed_time": 344.99106645584106,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686326608.721979,
            "elapsed_time": 317.9257867336273,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "febebde72a24a662f83df12f2472932566cf2234",
            "commit_message": "Update performance.md (#948)\n\nWe haven't updated this document in a while and yet there was a fair\r\namount of performance work, some of which can be documented here.\r\n\r\nNote that this is not fully comprehensive in that it excludes a lot of\r\ninternal tuning that is difficult to describe other than with \"we made\r\nthings faster\".",
            "commit_timestamp": 1686089489.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686341025.133792,
            "elapsed_time": 324.8986268043518,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686355488.07483,
            "elapsed_time": 330.7705662250519,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686369753.637817,
            "elapsed_time": 307.5099594593048,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686384221.060935,
            "elapsed_time": 322.87150168418884,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686398589.031247,
            "elapsed_time": 329.68443751335144,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686413019.253958,
            "elapsed_time": 451.83982491493225,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686427412.422621,
            "elapsed_time": 337.92467427253723,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686441898.743422,
            "elapsed_time": 335.09061765670776,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686456191.346944,
            "elapsed_time": 336.44535517692566,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686470588.779683,
            "elapsed_time": 327.05315923690796,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686484994.379998,
            "elapsed_time": 387.21630573272705,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686499385.85933,
            "elapsed_time": 323.5862545967102,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686513778.630282,
            "elapsed_time": 322.01534605026245,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686528289.635743,
            "elapsed_time": 404.5423090457916,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686542562.948021,
            "elapsed_time": 412.1423535346985,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686557005.371889,
            "elapsed_time": 457.806209564209,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686563137.613756,
            "elapsed_time": 320.2932527065277,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686571419.747531,
            "elapsed_time": 377.6108121871948,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686581257.532576,
            "elapsed_time": 407.00456070899963,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "3ecd3a82abe6682988112cd6eb7326a67ebbc47f",
            "commit_message": "Sync to upstream/release/580 (#951)\n\n* Added luau-compile executable target to build/test compilation without\r\nhaving full REPL included.\r\n\r\nIn our new typechecker:\r\n* Fixed the order in which constraints are checked to get more\r\ndeterministic errors in different environments\r\n* Fixed `isNumber`/`isString` checks to fix false positive errors in\r\nbinary comparisons\r\n* CannotCallNonFunction error is reported when calling an intersection\r\ntype of non-functions\r\n \r\nIn our native code generation (jit):\r\n* Outlined X64 return instruction code to improve code size\r\n* Improved performance of return instruction on A64\r\n* Added construction of a dominator tree for future optimizations\r\n",
            "commit_timestamp": 1686330480.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686586830.935974,
            "elapsed_time": 337.12152099609375,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "ba65b0e9cd123a4ecd977ddfcebbde7ef13df6bd",
            "commit_message": "Build and use luau-compile in CI (#952)\n\n",
            "commit_timestamp": 1686584804.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686585780.71901,
            "elapsed_time": 326.3968813419342,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "ba65b0e9cd123a4ecd977ddfcebbde7ef13df6bd",
            "commit_message": "Build and use luau-compile in CI (#952)\n\n",
            "commit_timestamp": 1686584804.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686600280.463588,
            "elapsed_time": 362.8361051082611,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686629046.528239,
            "elapsed_time": 336.8566415309906,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686643438.827499,
            "elapsed_time": 437.0878074169159,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686657794.019922,
            "elapsed_time": 370.36595392227173,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686672194.130964,
            "elapsed_time": 438.9704601764679,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686686683.920588,
            "elapsed_time": 458.99394726753235,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686701094.601598,
            "elapsed_time": 359.779415845871,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686715428.604566,
            "elapsed_time": 337.37000155448914,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686729801.033,
            "elapsed_time": 418.3161654472351,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686744232.973226,
            "elapsed_time": 448.1115357875824,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686758576.687216,
            "elapsed_time": 318.2991478443146,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686773041.7819,
            "elapsed_time": 435.02403569221497,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686787492.707687,
            "elapsed_time": 343.36801314353943,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686801854.753399,
            "elapsed_time": 368.73941564559937,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686816246.916298,
            "elapsed_time": 407.5533437728882,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686830655.140363,
            "elapsed_time": 461.2060363292694,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686845015.511021,
            "elapsed_time": 337.67782068252563,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686859412.847874,
            "elapsed_time": 426.8252730369568,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686873888.896962,
            "elapsed_time": 329.8753228187561,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686888186.220066,
            "elapsed_time": 445.2139084339142,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686902584.286367,
            "elapsed_time": 462.32218980789185,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686917067.824998,
            "elapsed_time": 414.3037486076355,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686929428.657819,
            "elapsed_time": 356.2743582725525,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686931083.766284,
            "elapsed_time": 338.23242592811584,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686931368.012129,
            "elapsed_time": 457.5118296146393,
            "x64": false,
            "actual_files_count": 386,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "bc0722471f6a41beb19e3147df1f501d15b93575",
            "commit_message": "Add support for ClassType indexer in definition files (#949)\n\n",
            "commit_timestamp": 1686600174.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686945757.967331,
            "elapsed_time": 394.76946902275085,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686960226.163334,
            "elapsed_time": 429.96464228630066,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686974588.326958,
            "elapsed_time": 436.22525095939636,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686994226.220514,
            "elapsed_time": 357.2032084465027,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686994396.427266,
            "elapsed_time": 339.9713845252991,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686989048.836754,
            "elapsed_time": 341.179621219635,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686998840.826955,
            "elapsed_time": 400.0602011680603,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687003447.914109,
            "elapsed_time": 356.67238903045654,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687017750.502538,
            "elapsed_time": 396.18274331092834,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687032206.327597,
            "elapsed_time": 317.4444589614868,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687046675.299186,
            "elapsed_time": 332.4922790527344,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687061049.866535,
            "elapsed_time": 344.2400484085083,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687075357.82807,
            "elapsed_time": 413.09763050079346,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687089811.071582,
            "elapsed_time": 349.56198501586914,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687104194.949205,
            "elapsed_time": 321.67294931411743,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687110894.333832,
            "elapsed_time": 392.79823875427246,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687118551.512068,
            "elapsed_time": 379.8199269771576,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687133057.738613,
            "elapsed_time": 402.0873136520386,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687147406.641471,
            "elapsed_time": 340.87609100341797,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687161823.593133,
            "elapsed_time": 497.207804441452,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687176179.223818,
            "elapsed_time": 419.10264778137207,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687191892.064942,
            "elapsed_time": 364.3537549972534,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687190619.994228,
            "elapsed_time": 420.7070369720459,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687204955.028492,
            "elapsed_time": 378.5953872203827,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687219463.412487,
            "elapsed_time": 320.91917300224304,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687233821.073532,
            "elapsed_time": 331.48072481155396,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687248191.996762,
            "elapsed_time": 547.8709688186646,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687262695.765352,
            "elapsed_time": 401.85292387008667,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687291534.389418,
            "elapsed_time": 430.72086000442505,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687305891.946596,
            "elapsed_time": 416.3501880168915,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687320178.07325,
            "elapsed_time": 392.62170147895813,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687332148.365644,
            "elapsed_time": 346.87193870544434,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687334592.127479,
            "elapsed_time": 413.3692076206207,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687349038.541592,
            "elapsed_time": 339.3537724018097,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687363404.440107,
            "elapsed_time": 339.1302969455719,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687377799.679692,
            "elapsed_time": 374.8558859825134,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687392317.459112,
            "elapsed_time": 408.49924874305725,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687406610.081688,
            "elapsed_time": 325.1105623245239,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687420957.727409,
            "elapsed_time": 406.9168846607208,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687435464.881244,
            "elapsed_time": 336.2986967563629,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687449801.709196,
            "elapsed_time": 394.74807262420654,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687464230.216893,
            "elapsed_time": 443.2414481639862,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687478731.363923,
            "elapsed_time": 522.1560218334198,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687493006.001498,
            "elapsed_time": 395.4617886543274,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687507444.115298,
            "elapsed_time": 356.66181564331055,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687521787.289711,
            "elapsed_time": 386.583945274353,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687536200.611286,
            "elapsed_time": 384.81631994247437,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687550635.629876,
            "elapsed_time": 337.93853402137756,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687565130.116271,
            "elapsed_time": 393.94663286209106,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687579391.479023,
            "elapsed_time": 332.0976378917694,
            "x64": false,
            "actual_files_count": 388,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "d458d240cdc07765cfe6bd81417faa3f642d0d75",
            "commit_message": "Sync to upstream/release/581 (#958)\n\n* Definition files can now ascribe indexers to class types.\r\n(https://github.com/Roblox/luau/pull/949)\r\n* Remove --compile support from the REPL. You can just use luau-compile\r\ninstead.\r\n* When an exception is thrown during parallel typechecking (usually an\r\nICE), we now gracefully stop typechecking and drain active workers\r\nbefore rethrowing the exception.\r\n\r\nNew solver\r\n\r\n* Include more source location information when we hit an internal\r\ncompiler error\r\n* Improve the logic that simplifies intersections of tables\r\n\r\nJIT\r\n\r\n* Save testable type annotations to bytecode\r\n* Improve block placement for linearized blocks\r\n* Add support for lea reg, [rip+offset] for labels\r\n* Unify X64 and A64 codegen for RETURN\r\n* Outline interrupt handlers for X64\r\n* Remove global rArgN in favor of build.abi\r\n* Change A64 INTERRUPT lowering to match X64\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1686936918.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687593812.679763,
            "elapsed_time": 336.33571553230286,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687608255.102502,
            "elapsed_time": 425.2842893600464,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687622599.000843,
            "elapsed_time": 325.14634227752686,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687636994.480312,
            "elapsed_time": 436.7355673313141,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687651548.764813,
            "elapsed_time": 331.31711077690125,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687665764.614016,
            "elapsed_time": 407.66566586494446,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687680242.647052,
            "elapsed_time": 337.2350444793701,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687694676.363149,
            "elapsed_time": 329.3663098812103,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687703571.715073,
            "elapsed_time": 378.2274217605591,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687708978.386504,
            "elapsed_time": 329.3284571170807,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687723412.478412,
            "elapsed_time": 331.8381931781769,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687737917.141605,
            "elapsed_time": 333.46775341033936,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687752190.660916,
            "elapsed_time": 321.5133764743805,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687781040.071495,
            "elapsed_time": 462.1041235923767,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687795439.155552,
            "elapsed_time": 334.910813331604,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687809821.700879,
            "elapsed_time": 434.0001757144928,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687824295.870947,
            "elapsed_time": 321.93624234199524,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687838602.380983,
            "elapsed_time": 417.17414808273315,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687852988.626529,
            "elapsed_time": 393.0273275375366,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687867438.158425,
            "elapsed_time": 343.4811067581177,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687881772.12141,
            "elapsed_time": 326.5293996334076,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687896207.938894,
            "elapsed_time": 341.9297685623169,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687910716.475419,
            "elapsed_time": 334.9926190376282,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687925003.686901,
            "elapsed_time": 325.4360451698303,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687939439.878923,
            "elapsed_time": 338.53847074508667,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687953837.324348,
            "elapsed_time": 395.53588223457336,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687968240.375377,
            "elapsed_time": 358.84192156791687,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687982579.926428,
            "elapsed_time": 420.25090312957764,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687997108.871065,
            "elapsed_time": 336.72984290122986,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688011377.169752,
            "elapsed_time": 318.51251459121704,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688025853.063166,
            "elapsed_time": 343.37717938423157,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688040242.746023,
            "elapsed_time": 409.61677289009094,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688054626.407488,
            "elapsed_time": 364.7112090587616,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688068929.160638,
            "elapsed_time": 361.2597188949585,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688083530.642822,
            "elapsed_time": 397.8589029312134,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688097751.676339,
            "elapsed_time": 305.1693871021271,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688112195.706343,
            "elapsed_time": 384.1861617565155,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688126563.826466,
            "elapsed_time": 381.66886162757874,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688140995.221788,
            "elapsed_time": 380.0087170600891,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688155417.387654,
            "elapsed_time": 390.9420509338379,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688169918.998415,
            "elapsed_time": 399.67108035087585,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688184207.054021,
            "elapsed_time": 324.4729359149933,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688198599.349427,
            "elapsed_time": 354.05696392059326,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688212999.069005,
            "elapsed_time": 325.3411364555359,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688227402.058743,
            "elapsed_time": 327.98636507987976,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688241788.437948,
            "elapsed_time": 495.50279116630554,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688256297.364483,
            "elapsed_time": 430.07735085487366,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688270604.525868,
            "elapsed_time": 359.7647044658661,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688284981.285992,
            "elapsed_time": 372.81313610076904,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688299368.496641,
            "elapsed_time": 385.334743976593,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688313783.107561,
            "elapsed_time": 315.3694546222687,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688328216.853579,
            "elapsed_time": 405.39843559265137,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688342641.132283,
            "elapsed_time": 414.8776504993439,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688357000.162149,
            "elapsed_time": 339.81003403663635,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688371403.749197,
            "elapsed_time": 330.46353816986084,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688385802.859345,
            "elapsed_time": 342.88787293434143,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688400220.040317,
            "elapsed_time": 345.7324607372284,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688414589.051161,
            "elapsed_time": 342.0348734855652,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688429095.179921,
            "elapsed_time": 404.9399080276489,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688443419.675338,
            "elapsed_time": 392.5020353794098,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688457837.678008,
            "elapsed_time": 427.86148834228516,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688472182.289674,
            "elapsed_time": 367.4132168292999,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688486594.733559,
            "elapsed_time": 328.56256461143494,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688500985.463024,
            "elapsed_time": 508.0770351886749,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688515448.889096,
            "elapsed_time": 404.1106495857239,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688529816.090005,
            "elapsed_time": 418.0176856517792,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688544182.202738,
            "elapsed_time": 424.89810276031494,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688558640.820189,
            "elapsed_time": 360.25595593452454,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688573026.918336,
            "elapsed_time": 337.6562223434448,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688587425.569682,
            "elapsed_time": 325.89268732070923,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "76bea81a7b798b3324f97a72a2a8faac29089eec",
            "commit_message": "Sync to upstream/release/582 (#960)\n\n* Optimized operations like instantiation and module export for very\r\nlarge types\r\n\r\nIn our new typechecker:\r\n* Typechecking of function calls was rewritten to handle more cases\r\ncorrectly\r\n* Fixed a crash that can happen after self-referential type is exported\r\nfrom a module\r\n* Fixed a false positive error in string comparison\r\n* Added handling of `for...in` variable type annotations and fixed\r\nissues with the iterator call inside\r\n* Self-referential 'hasProp' and 'setProp' constraints are now handled\r\ncorrectly\r\n \r\nIn our native code generation (jit):\r\n* Added '--target' argument to luau-compile to test multiple\r\narchitectures different from host architecture\r\n* GC barrier tag check is skipped if type is already known to be\r\nGC-collectable\r\n* Added GET_TYPE/GET_TYPEOF instructions for type/typeof fast-calls\r\n* Improved code size of interrupt handlers on X64\r\n",
            "commit_timestamp": 1687587579.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688601901.748775,
            "elapsed_time": 337.74079275131226,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "a02eb78c96f695a4287e7dd1beaccab3642c35f3",
            "commit_message": "Fix indexing table intersections using `x[\"prop\"]` syntax (#971)\n\nRight now, you can index an intersection of tables fine when using\r\n`x.prop` syntax, but not when using `x[\"prop\"]` syntax.\r\nThis fixes it for the latter case\r\n\r\n```lua\r\ntype Foo = {\r\n\tBar: string,\r\n} & { Baz: number }\r\n\r\nlocal x: Foo = { Bar = \"1\", Baz = 2 }\r\nlocal y = x[\"Bar\"] -- TypeError: Expected type table, got '{| Bar: string |} & {| Baz: number |}' instead\r\n```\r\n\r\nPart of a fix to\r\nhttps://github.com/Roblox/luau/issues/533#issuecomment-1291779353",
            "commit_timestamp": 1688592771.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688616202.341133,
            "elapsed_time": 323.15740966796875,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "a02eb78c96f695a4287e7dd1beaccab3642c35f3",
            "commit_message": "Fix indexing table intersections using `x[\"prop\"]` syntax (#971)\n\nRight now, you can index an intersection of tables fine when using\r\n`x.prop` syntax, but not when using `x[\"prop\"]` syntax.\r\nThis fixes it for the latter case\r\n\r\n```lua\r\ntype Foo = {\r\n\tBar: string,\r\n} & { Baz: number }\r\n\r\nlocal x: Foo = { Bar = \"1\", Baz = 2 }\r\nlocal y = x[\"Bar\"] -- TypeError: Expected type table, got '{| Bar: string |} & {| Baz: number |}' instead\r\n```\r\n\r\nPart of a fix to\r\nhttps://github.com/Roblox/luau/issues/533#issuecomment-1291779353",
            "commit_timestamp": 1688592771.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688630666.112329,
            "elapsed_time": 399.41620683670044,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "a02eb78c96f695a4287e7dd1beaccab3642c35f3",
            "commit_message": "Fix indexing table intersections using `x[\"prop\"]` syntax (#971)\n\nRight now, you can index an intersection of tables fine when using\r\n`x.prop` syntax, but not when using `x[\"prop\"]` syntax.\r\nThis fixes it for the latter case\r\n\r\n```lua\r\ntype Foo = {\r\n\tBar: string,\r\n} & { Baz: number }\r\n\r\nlocal x: Foo = { Bar = \"1\", Baz = 2 }\r\nlocal y = x[\"Bar\"] -- TypeError: Expected type table, got '{| Bar: string |} & {| Baz: number |}' instead\r\n```\r\n\r\nPart of a fix to\r\nhttps://github.com/Roblox/luau/issues/533#issuecomment-1291779353",
            "commit_timestamp": 1688592771.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688645074.075116,
            "elapsed_time": 393.79333567619324,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "a02eb78c96f695a4287e7dd1beaccab3642c35f3",
            "commit_message": "Fix indexing table intersections using `x[\"prop\"]` syntax (#971)\n\nRight now, you can index an intersection of tables fine when using\r\n`x.prop` syntax, but not when using `x[\"prop\"]` syntax.\r\nThis fixes it for the latter case\r\n\r\n```lua\r\ntype Foo = {\r\n\tBar: string,\r\n} & { Baz: number }\r\n\r\nlocal x: Foo = { Bar = \"1\", Baz = 2 }\r\nlocal y = x[\"Bar\"] -- TypeError: Expected type table, got '{| Bar: string |} & {| Baz: number |}' instead\r\n```\r\n\r\nPart of a fix to\r\nhttps://github.com/Roblox/luau/issues/533#issuecomment-1291779353",
            "commit_timestamp": 1688592771.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688659438.760031,
            "elapsed_time": 409.7578401565552,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "a02eb78c96f695a4287e7dd1beaccab3642c35f3",
            "commit_message": "Fix indexing table intersections using `x[\"prop\"]` syntax (#971)\n\nRight now, you can index an intersection of tables fine when using\r\n`x.prop` syntax, but not when using `x[\"prop\"]` syntax.\r\nThis fixes it for the latter case\r\n\r\n```lua\r\ntype Foo = {\r\n\tBar: string,\r\n} & { Baz: number }\r\n\r\nlocal x: Foo = { Bar = \"1\", Baz = 2 }\r\nlocal y = x[\"Bar\"] -- TypeError: Expected type table, got '{| Bar: string |} & {| Baz: number |}' instead\r\n```\r\n\r\nPart of a fix to\r\nhttps://github.com/Roblox/luau/issues/533#issuecomment-1291779353",
            "commit_timestamp": 1688592771.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688673792.316849,
            "elapsed_time": 326.90550780296326,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "c98a9d7051770b0bb10a52caf48e34194c8753ea",
            "commit_message": "Add console output codepage for windows (#967)\n\nPreviously unicode codepoints would be incorrectly shown in windows\r\nterminals, such as with u2503(\u2503):\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u0393\u00f6\u00e2\r\n```\r\n\r\nThis change fixes the issue by setting the console's codepage on\r\nwindows, resulting in fixed behaviour:\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u2503\r\n```",
            "commit_timestamp": 1688673634.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688688306.151969,
            "elapsed_time": 506.6623332500458,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "c98a9d7051770b0bb10a52caf48e34194c8753ea",
            "commit_message": "Add console output codepage for windows (#967)\n\nPreviously unicode codepoints would be incorrectly shown in windows\r\nterminals, such as with u2503(\u2503):\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u0393\u00f6\u00e2\r\n```\r\n\r\nThis change fixes the issue by setting the console's codepage on\r\nwindows, resulting in fixed behaviour:\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u2503\r\n```",
            "commit_timestamp": 1688673634.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688702557.471205,
            "elapsed_time": 369.20246171951294,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "c98a9d7051770b0bb10a52caf48e34194c8753ea",
            "commit_message": "Add console output codepage for windows (#967)\n\nPreviously unicode codepoints would be incorrectly shown in windows\r\nterminals, such as with u2503(\u2503):\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u0393\u00f6\u00e2\r\n```\r\n\r\nThis change fixes the issue by setting the console's codepage on\r\nwindows, resulting in fixed behaviour:\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u2503\r\n```",
            "commit_timestamp": 1688673634.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688717004.868709,
            "elapsed_time": 338.53271746635437,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "c98a9d7051770b0bb10a52caf48e34194c8753ea",
            "commit_message": "Add console output codepage for windows (#967)\n\nPreviously unicode codepoints would be incorrectly shown in windows\r\nterminals, such as with u2503(\u2503):\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u0393\u00f6\u00e2\r\n```\r\n\r\nThis change fixes the issue by setting the console's codepage on\r\nwindows, resulting in fixed behaviour:\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u2503\r\n```",
            "commit_timestamp": 1688673634.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688731459.653355,
            "elapsed_time": 405.1388568878174,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "c98a9d7051770b0bb10a52caf48e34194c8753ea",
            "commit_message": "Add console output codepage for windows (#967)\n\nPreviously unicode codepoints would be incorrectly shown in windows\r\nterminals, such as with u2503(\u2503):\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u0393\u00f6\u00e2\r\n```\r\n\r\nThis change fixes the issue by setting the console's codepage on\r\nwindows, resulting in fixed behaviour:\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u2503\r\n```",
            "commit_timestamp": 1688673634.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688745820.325574,
            "elapsed_time": 532.198625087738,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "c98a9d7051770b0bb10a52caf48e34194c8753ea",
            "commit_message": "Add console output codepage for windows (#967)\n\nPreviously unicode codepoints would be incorrectly shown in windows\r\nterminals, such as with u2503(\u2503):\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u0393\u00f6\u00e2\r\n```\r\n\r\nThis change fixes the issue by setting the console's codepage on\r\nwindows, resulting in fixed behaviour:\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u2503\r\n```",
            "commit_timestamp": 1688673634.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688760258.898752,
            "elapsed_time": 351.97271823883057,
            "x64": false,
            "actual_files_count": 390,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "c98a9d7051770b0bb10a52caf48e34194c8753ea",
            "commit_message": "Add console output codepage for windows (#967)\n\nPreviously unicode codepoints would be incorrectly shown in windows\r\nterminals, such as with u2503(\u2503):\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u0393\u00f6\u00e2\r\n```\r\n\r\nThis change fixes the issue by setting the console's codepage on\r\nwindows, resulting in fixed behaviour:\r\n```ps\r\n\u276f \"print('\\u{2503}')\" | luau.exe\r\n\u2503\r\n```",
            "commit_timestamp": 1688673634.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688774697.350244,
            "elapsed_time": 447.1240441799164,
            "x64": false,
            "actual_files_count": 393,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "e25de95445f2d635a125ab463426bb7fda017093",
            "commit_message": "Sync to upstream/release/583 (#974)\n\n* Fixed indexing table intersections using `x[\"prop\"]` syntax:\r\nhttps://github.com/Roblox/luau/pull/971\r\n* Add console output codepage for Windows:\r\nhttps://github.com/Roblox/luau/pull/967\r\n* Added `Frontend::parse` for a fast source graph preparation\r\n* luau_load should check GC\r\n* Work toward a type-diff system for nicer error messages\r\n\r\nNew Solver\r\n* Correctly suppress errors in more cases\r\n* Further improvements to typechecking of function calls and return\r\nstatements\r\n* Crash fixes\r\n* Propagate refinements drawn from the condition of a while loop into\r\nthe loop body\r\n\r\nJIT\r\n* Fix accidental bailout for math.frexp/modf/sign in A64\r\n* Work toward bringing type annotation info in\r\n* Do not propagate Luau IR constants of wrong type into load\r\ninstructions\r\n* CHECK_SAFEENV exits to VM on failure\r\n* Implement error handling in A64 reg allocator\r\n* Inline the string.len builtin\r\n* Do not enter native code of a function if arguments don\u2019t match\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1688760648.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688789097.719606,
            "elapsed_time": 424.33665919303894,
            "x64": false,
            "actual_files_count": 393,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "e25de95445f2d635a125ab463426bb7fda017093",
            "commit_message": "Sync to upstream/release/583 (#974)\n\n* Fixed indexing table intersections using `x[\"prop\"]` syntax:\r\nhttps://github.com/Roblox/luau/pull/971\r\n* Add console output codepage for Windows:\r\nhttps://github.com/Roblox/luau/pull/967\r\n* Added `Frontend::parse` for a fast source graph preparation\r\n* luau_load should check GC\r\n* Work toward a type-diff system for nicer error messages\r\n\r\nNew Solver\r\n* Correctly suppress errors in more cases\r\n* Further improvements to typechecking of function calls and return\r\nstatements\r\n* Crash fixes\r\n* Propagate refinements drawn from the condition of a while loop into\r\nthe loop body\r\n\r\nJIT\r\n* Fix accidental bailout for math.frexp/modf/sign in A64\r\n* Work toward bringing type annotation info in\r\n* Do not propagate Luau IR constants of wrong type into load\r\ninstructions\r\n* CHECK_SAFEENV exits to VM on failure\r\n* Implement error handling in A64 reg allocator\r\n* Inline the string.len builtin\r\n* Do not enter native code of a function if arguments don\u2019t match\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1688760648.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688803400.491897,
            "elapsed_time": 350.4533417224884,
            "x64": false,
            "actual_files_count": 393,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "e25de95445f2d635a125ab463426bb7fda017093",
            "commit_message": "Sync to upstream/release/583 (#974)\n\n* Fixed indexing table intersections using `x[\"prop\"]` syntax:\r\nhttps://github.com/Roblox/luau/pull/971\r\n* Add console output codepage for Windows:\r\nhttps://github.com/Roblox/luau/pull/967\r\n* Added `Frontend::parse` for a fast source graph preparation\r\n* luau_load should check GC\r\n* Work toward a type-diff system for nicer error messages\r\n\r\nNew Solver\r\n* Correctly suppress errors in more cases\r\n* Further improvements to typechecking of function calls and return\r\nstatements\r\n* Crash fixes\r\n* Propagate refinements drawn from the condition of a while loop into\r\nthe loop body\r\n\r\nJIT\r\n* Fix accidental bailout for math.frexp/modf/sign in A64\r\n* Work toward bringing type annotation info in\r\n* Do not propagate Luau IR constants of wrong type into load\r\ninstructions\r\n* CHECK_SAFEENV exits to VM on failure\r\n* Implement error handling in A64 reg allocator\r\n* Inline the string.len builtin\r\n* Do not enter native code of a function if arguments don\u2019t match\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1688760648.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688817807.505094,
            "elapsed_time": 327.99771451950073,
            "x64": false,
            "actual_files_count": 393,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "e25de95445f2d635a125ab463426bb7fda017093",
            "commit_message": "Sync to upstream/release/583 (#974)\n\n* Fixed indexing table intersections using `x[\"prop\"]` syntax:\r\nhttps://github.com/Roblox/luau/pull/971\r\n* Add console output codepage for Windows:\r\nhttps://github.com/Roblox/luau/pull/967\r\n* Added `Frontend::parse` for a fast source graph preparation\r\n* luau_load should check GC\r\n* Work toward a type-diff system for nicer error messages\r\n\r\nNew Solver\r\n* Correctly suppress errors in more cases\r\n* Further improvements to typechecking of function calls and return\r\nstatements\r\n* Crash fixes\r\n* Propagate refinements drawn from the condition of a while loop into\r\nthe loop body\r\n\r\nJIT\r\n* Fix accidental bailout for math.frexp/modf/sign in A64\r\n* Work toward bringing type annotation info in\r\n* Do not propagate Luau IR constants of wrong type into load\r\ninstructions\r\n* CHECK_SAFEENV exits to VM on failure\r\n* Implement error handling in A64 reg allocator\r\n* Inline the string.len builtin\r\n* Do not enter native code of a function if arguments don\u2019t match\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1688760648.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688832224.328679,
            "elapsed_time": 352.06619787216187,
            "x64": false,
            "actual_files_count": 393,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "e25de95445f2d635a125ab463426bb7fda017093",
            "commit_message": "Sync to upstream/release/583 (#974)\n\n* Fixed indexing table intersections using `x[\"prop\"]` syntax:\r\nhttps://github.com/Roblox/luau/pull/971\r\n* Add console output codepage for Windows:\r\nhttps://github.com/Roblox/luau/pull/967\r\n* Added `Frontend::parse` for a fast source graph preparation\r\n* luau_load should check GC\r\n* Work toward a type-diff system for nicer error messages\r\n\r\nNew Solver\r\n* Correctly suppress errors in more cases\r\n* Further improvements to typechecking of function calls and return\r\nstatements\r\n* Crash fixes\r\n* Propagate refinements drawn from the condition of a while loop into\r\nthe loop body\r\n\r\nJIT\r\n* Fix accidental bailout for math.frexp/modf/sign in A64\r\n* Work toward bringing type annotation info in\r\n* Do not propagate Luau IR constants of wrong type into load\r\ninstructions\r\n* CHECK_SAFEENV exits to VM on failure\r\n* Implement error handling in A64 reg allocator\r\n* Inline the string.len builtin\r\n* Do not enter native code of a function if arguments don\u2019t match\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1688760648.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688846610.3532,
            "elapsed_time": 344.4741349220276,
            "x64": false,
            "actual_files_count": 393,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "e25de95445f2d635a125ab463426bb7fda017093",
            "commit_message": "Sync to upstream/release/583 (#974)\n\n* Fixed indexing table intersections using `x[\"prop\"]` syntax:\r\nhttps://github.com/Roblox/luau/pull/971\r\n* Add console output codepage for Windows:\r\nhttps://github.com/Roblox/luau/pull/967\r\n* Added `Frontend::parse` for a fast source graph preparation\r\n* luau_load should check GC\r\n* Work toward a type-diff system for nicer error messages\r\n\r\nNew Solver\r\n* Correctly suppress errors in more cases\r\n* Further improvements to typechecking of function calls and return\r\nstatements\r\n* Crash fixes\r\n* Propagate refinements drawn from the condition of a while loop into\r\nthe loop body\r\n\r\nJIT\r\n* Fix accidental bailout for math.frexp/modf/sign in A64\r\n* Work toward bringing type annotation info in\r\n* Do not propagate Luau IR constants of wrong type into load\r\ninstructions\r\n* CHECK_SAFEENV exits to VM on failure\r\n* Implement error handling in A64 reg allocator\r\n* Inline the string.len builtin\r\n* Do not enter native code of a function if arguments don\u2019t match\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1688760648.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688861083.446822,
            "elapsed_time": 408.110324382782,
            "x64": false,
            "actual_files_count": 393,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "e25de95445f2d635a125ab463426bb7fda017093",
            "commit_message": "Sync to upstream/release/583 (#974)\n\n* Fixed indexing table intersections using `x[\"prop\"]` syntax:\r\nhttps://github.com/Roblox/luau/pull/971\r\n* Add console output codepage for Windows:\r\nhttps://github.com/Roblox/luau/pull/967\r\n* Added `Frontend::parse` for a fast source graph preparation\r\n* luau_load should check GC\r\n* Work toward a type-diff system for nicer error messages\r\n\r\nNew Solver\r\n* Correctly suppress errors in more cases\r\n* Further improvements to typechecking of function calls and return\r\nstatements\r\n* Crash fixes\r\n* Propagate refinements drawn from the condition of a while loop into\r\nthe loop body\r\n\r\nJIT\r\n* Fix accidental bailout for math.frexp/modf/sign in A64\r\n* Work toward bringing type annotation info in\r\n* Do not propagate Luau IR constants of wrong type into load\r\ninstructions\r\n* CHECK_SAFEENV exits to VM on failure\r\n* Implement error handling in A64 reg allocator\r\n* Inline the string.len builtin\r\n* Do not enter native code of a function if arguments don\u2019t match\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1688760648.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688875396.953665,
            "elapsed_time": 466.4591679573059,
            "x64": false,
            "actual_files_count": 393,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "e25de95445f2d635a125ab463426bb7fda017093",
            "commit_message": "Sync to upstream/release/583 (#974)\n\n* Fixed indexing table intersections using `x[\"prop\"]` syntax:\r\nhttps://github.com/Roblox/luau/pull/971\r\n* Add console output codepage for Windows:\r\nhttps://github.com/Roblox/luau/pull/967\r\n* Added `Frontend::parse` for a fast source graph preparation\r\n* luau_load should check GC\r\n* Work toward a type-diff system for nicer error messages\r\n\r\nNew Solver\r\n* Correctly suppress errors in more cases\r\n* Further improvements to typechecking of function calls and return\r\nstatements\r\n* Crash fixes\r\n* Propagate refinements drawn from the condition of a while loop into\r\nthe loop body\r\n\r\nJIT\r\n* Fix accidental bailout for math.frexp/modf/sign in A64\r\n* Work toward bringing type annotation info in\r\n* Do not propagate Luau IR constants of wrong type into load\r\ninstructions\r\n* CHECK_SAFEENV exits to VM on failure\r\n* Implement error handling in A64 reg allocator\r\n* Inline the string.len builtin\r\n* Do not enter native code of a function if arguments don\u2019t match\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1688760648.0
        }
    ]
}