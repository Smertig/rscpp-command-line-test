{
    "v1": [
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684811568.12929,
            "elapsed_time": 300.17598056793213,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230509.135236-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684897973.603453,
            "elapsed_time": 306.79929995536804,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684932592.55107,
            "elapsed_time": 322.3465931415558,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684942377.193808,
            "elapsed_time": 412.70515513420105,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1684984465.649459,
            "elapsed_time": 322.9774856567383,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685070821.250683,
            "elapsed_time": 323.32824182510376,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685157191.627965,
            "elapsed_time": 306.12235617637634,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685200313.474531,
            "elapsed_time": 299.943922996521,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685243240.371857,
            "elapsed_time": 305.79598093032837,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685286419.945599,
            "elapsed_time": 352.33417654037476,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685329646.328941,
            "elapsed_time": 338.59462666511536,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685372840.203607,
            "elapsed_time": 467.8816337585449,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685416041.948903,
            "elapsed_time": 286.19981503486633,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685459254.968603,
            "elapsed_time": 316.56133675575256,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685502680.344582,
            "elapsed_time": 327.4426100254059,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685545600.450092,
            "elapsed_time": 340.1426577568054,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685589657.71231,
            "elapsed_time": 313.0994710922241,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685632084.846191,
            "elapsed_time": 336.45922780036926,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685675327.448894,
            "elapsed_time": 320.2279727458954,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685718418.597036,
            "elapsed_time": 315.35985684394836,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685761622.771281,
            "elapsed_time": 294.1496067047119,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685804802.219242,
            "elapsed_time": 343.8791983127594,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685848672.253546,
            "elapsed_time": 380.86864018440247,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685891152.81308,
            "elapsed_time": 360.47943902015686,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685934598.92621,
            "elapsed_time": 318.89926958084106,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1685977606.013999,
            "elapsed_time": 380.64783334732056,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230517.90859-eap02",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686021081.686978,
            "elapsed_time": 342.1650769710541,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686051405.032912,
            "elapsed_time": 439.9647138118744,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686064033.60214,
            "elapsed_time": 323.483430147171,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686107506.493856,
            "elapsed_time": 325.301992893219,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686150461.806139,
            "elapsed_time": 381.136679649353,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686193894.297887,
            "elapsed_time": 332.7007873058319,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686236828.541385,
            "elapsed_time": 321.3606698513031,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686280394.192448,
            "elapsed_time": 314.7906894683838,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686323316.985348,
            "elapsed_time": 412.4442524909973,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686366428.950157,
            "elapsed_time": 308.02533435821533,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686409633.301574,
            "elapsed_time": 381.634952545166,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686453469.109162,
            "elapsed_time": 324.54249024391174,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686496010.642554,
            "elapsed_time": 395.900990486145,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230531.134455-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686539570.908989,
            "elapsed_time": 332.24300742149353,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686580796.795848,
            "elapsed_time": 317.29930543899536,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686582465.372155,
            "elapsed_time": 325.96917510032654,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686625645.960961,
            "elapsed_time": 414.87081813812256,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686668928.601773,
            "elapsed_time": 431.8319642543793,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686712099.467569,
            "elapsed_time": 381.0945360660553,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686755256.126207,
            "elapsed_time": 375.5854229927063,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686798433.114625,
            "elapsed_time": 320.00086784362793,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686841644.672073,
            "elapsed_time": 339.38868618011475,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686884865.732426,
            "elapsed_time": 391.2219076156616,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686929762.045198,
            "elapsed_time": 377.33701181411743,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230608.100247-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686928058.416426,
            "elapsed_time": 414.5978355407715,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1686971253.806773,
            "elapsed_time": 337.4489884376526,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687014420.820105,
            "elapsed_time": 333.14580273628235,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687057884.67026,
            "elapsed_time": 316.12832283973694,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687100858.672029,
            "elapsed_time": 326.19137239456177,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687144069.99374,
            "elapsed_time": 328.95356965065,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687187245.172233,
            "elapsed_time": 434.61442399024963,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687230451.531923,
            "elapsed_time": 339.65779662132263,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687273652.363645,
            "elapsed_time": 354.814847946167,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687316910.327357,
            "elapsed_time": 441.57596945762634,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687360052.131901,
            "elapsed_time": 334.49430322647095,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687403272.856809,
            "elapsed_time": 323.78049540519714,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687446434.827029,
            "elapsed_time": 423.86827635765076,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687490410.301723,
            "elapsed_time": 397.9979405403137,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687532890.989866,
            "elapsed_time": 413.1695568561554,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687576655.137038,
            "elapsed_time": 410.2726151943207,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687619243.005004,
            "elapsed_time": 329.39680647850037,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687663297.497849,
            "elapsed_time": 394.9652497768402,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687705605.799109,
            "elapsed_time": 426.97042751312256,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687749692.349229,
            "elapsed_time": 435.27617859840393,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687792074.615354,
            "elapsed_time": 426.7066743373871,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687835852.724467,
            "elapsed_time": 305.78253197669983,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687878461.189544,
            "elapsed_time": 380.6939458847046,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687922223.625688,
            "elapsed_time": 328.83782935142517,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1687964822.591163,
            "elapsed_time": 322.83526062965393,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688008465.266066,
            "elapsed_time": 331.65724539756775,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688051245.121034,
            "elapsed_time": 390.8663122653961,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688094676.448747,
            "elapsed_time": 369.4793288707733,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688137663.243734,
            "elapsed_time": 503.19158720970154,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688181777.396023,
            "elapsed_time": 338.65133476257324,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688224038.750995,
            "elapsed_time": 308.4988694190979,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688267815.731505,
            "elapsed_time": 304.5447471141815,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688310367.117703,
            "elapsed_time": 344.14762473106384,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688354145.518997,
            "elapsed_time": 308.3090310096741,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688396893.705608,
            "elapsed_time": 381.67387795448303,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688440647.108933,
            "elapsed_time": 392.8372805118561,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688483253.040902,
            "elapsed_time": 329.669114112854,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688527034.561607,
            "elapsed_time": 406.24088311195374,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688569635.075633,
            "elapsed_time": 315.07513666152954,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688613520.589054,
            "elapsed_time": 389.3433394432068,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688656061.526477,
            "elapsed_time": 325.10098528862,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688699828.460147,
            "elapsed_time": 429.78988766670227,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688742494.578408,
            "elapsed_time": 331.0379207134247,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688786317.224197,
            "elapsed_time": 324.41214752197266,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688828798.325517,
            "elapsed_time": 386.5983052253723,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688872726.360208,
            "elapsed_time": 304.92737865448,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688915157.889394,
            "elapsed_time": 402.9502112865448,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1688959110.684189,
            "elapsed_time": 326.6307942867279,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689001673.29482,
            "elapsed_time": 333.6734483242035,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689045143.646971,
            "elapsed_time": 370.22609090805054,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689088065.913127,
            "elapsed_time": 400.8570351600647,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689131725.0009,
            "elapsed_time": 338.37128496170044,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689174478.734753,
            "elapsed_time": 385.4648277759552,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689218228.103629,
            "elapsed_time": 315.2756028175354,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230613.111753-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689260809.321158,
            "elapsed_time": 397.5977694988251,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1689488568.823919,
            "elapsed_time": 387.42813062667847,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689520029.872835,
            "elapsed_time": 320.26816987991333,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689607219.391574,
            "elapsed_time": 343.1677041053772,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689650700.457922,
            "elapsed_time": 351.0055387020111,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689693555.678279,
            "elapsed_time": 429.6549537181854,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689739022.858771,
            "elapsed_time": 346.6964898109436,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689779924.010125,
            "elapsed_time": 408.8999493122101,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689823081.728069,
            "elapsed_time": 335.14017605781555,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689866326.452851,
            "elapsed_time": 378.7446131706238,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689909403.022268,
            "elapsed_time": 427.16328406333923,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689952664.084394,
            "elapsed_time": 319.35716009140015,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1689995843.208319,
            "elapsed_time": 329.30808687210083,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690038933.933705,
            "elapsed_time": 326.97203493118286,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690082235.379816,
            "elapsed_time": 395.1443338394165,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690125361.447968,
            "elapsed_time": 315.4946177005768,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690168751.880591,
            "elapsed_time": 418.4325671195984,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690211855.73742,
            "elapsed_time": 395.3641481399536,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690255145.365409,
            "elapsed_time": 345.44103932380676,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690298295.880706,
            "elapsed_time": 346.46414947509766,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690341422.100663,
            "elapsed_time": 350.7665021419525,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690384647.365473,
            "elapsed_time": 322.15282106399536,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690427834.734111,
            "elapsed_time": 341.4203176498413,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690471027.148977,
            "elapsed_time": 350.3223605155945,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690514225.513624,
            "elapsed_time": 320.39897441864014,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690557484.074441,
            "elapsed_time": 404.1882166862488,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690600573.258213,
            "elapsed_time": 362.54253482818604,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690643707.075198,
            "elapsed_time": 311.4148235321045,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690686971.576657,
            "elapsed_time": 324.9738550186157,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690730157.897582,
            "elapsed_time": 319.62122535705566,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690773444.789538,
            "elapsed_time": 404.5527272224426,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690816043.002688,
            "elapsed_time": 390.7296140193939,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690859250.889526,
            "elapsed_time": 330.34772634506226,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690902598.220747,
            "elapsed_time": 398.8633391857147,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690945662.965542,
            "elapsed_time": 336.84477376937866,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1690988819.022651,
            "elapsed_time": 362.0286557674408,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691032034.277165,
            "elapsed_time": 455.2693495750427,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691075353.411186,
            "elapsed_time": 412.5358102321625,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691118443.027158,
            "elapsed_time": 417.622287273407,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691161678.278298,
            "elapsed_time": 329.02834820747375,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691204870.382421,
            "elapsed_time": 362.97622895240784,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691248058.261326,
            "elapsed_time": 327.3452534675598,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691291220.90366,
            "elapsed_time": 395.86114978790283,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691334449.031347,
            "elapsed_time": 328.7250745296478,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691377699.721274,
            "elapsed_time": 352.1031291484833,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691420867.720744,
            "elapsed_time": 339.7138817310333,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691464030.371336,
            "elapsed_time": 339.10230588912964,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691507241.83494,
            "elapsed_time": 317.81972789764404,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691550425.855763,
            "elapsed_time": 329.4136257171631,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691593718.290532,
            "elapsed_time": 330.1493093967438,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691636862.87345,
            "elapsed_time": 324.72127199172974,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691680021.344122,
            "elapsed_time": 293.20289969444275,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691723193.702445,
            "elapsed_time": 395.4823293685913,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691766372.932133,
            "elapsed_time": 296.9036204814911,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691809626.74378,
            "elapsed_time": 366.41356778144836,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230713.141352-eap09",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1691852786.013701,
            "elapsed_time": 428.36983847618103,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695376855.852976,
            "elapsed_time": 322.91920280456543,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695395282.805995,
            "elapsed_time": 367.87014627456665,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695438423.434531,
            "elapsed_time": 318.50754499435425,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695481600.299527,
            "elapsed_time": 303.9655029773712,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695524880.570645,
            "elapsed_time": 326.6189079284668,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695567968.173254,
            "elapsed_time": 344.26467061042786,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695611239.750643,
            "elapsed_time": 284.322829246521,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695654394.988062,
            "elapsed_time": 343.2250518798828,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695697639.938145,
            "elapsed_time": 307.26361298561096,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695740870.214347,
            "elapsed_time": 393.64671635627747,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695784042.630198,
            "elapsed_time": 318.04041600227356,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695827248.903101,
            "elapsed_time": 324.4271626472473,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695870456.793323,
            "elapsed_time": 331.47359681129456,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695913653.808344,
            "elapsed_time": 316.474440574646,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695956806.83843,
            "elapsed_time": 376.75936818122864,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1695999979.370465,
            "elapsed_time": 292.4124798774719,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696043213.962362,
            "elapsed_time": 323.3082959651947,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696086408.427746,
            "elapsed_time": 319.0995888710022,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696129667.857239,
            "elapsed_time": 319.455673456192,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696172847.368328,
            "elapsed_time": 312.52187418937683,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696216081.798763,
            "elapsed_time": 319.8934042453766,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696259207.976318,
            "elapsed_time": 350.6684772968292,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696302476.686161,
            "elapsed_time": 324.43994879722595,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696345714.592201,
            "elapsed_time": 413.01966404914856,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696388869.998164,
            "elapsed_time": 316.6129779815674,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696432082.351874,
            "elapsed_time": 387.9699938297272,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696475242.821798,
            "elapsed_time": 326.2046847343445,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696518465.190608,
            "elapsed_time": 326.73975920677185,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696561628.684375,
            "elapsed_time": 310.79872608184814,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696604904.4333,
            "elapsed_time": 414.28825283050537,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20230818.141747",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696648022.870763,
            "elapsed_time": 318.1312494277954,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696678863.498264,
            "elapsed_time": 379.61118030548096,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696691196.686703,
            "elapsed_time": 317.1802775859833,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696734440.909923,
            "elapsed_time": 312.7581739425659,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696777592.26395,
            "elapsed_time": 330.5539937019348,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696820830.613021,
            "elapsed_time": 313.1603989601135,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696864066.853036,
            "elapsed_time": 492.899037361145,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696907195.57081,
            "elapsed_time": 313.08073687553406,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696950487.296374,
            "elapsed_time": 390.0534842014313,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1696993644.430043,
            "elapsed_time": 329.06494760513306,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697036799.549054,
            "elapsed_time": 367.5745425224304,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697080066.675988,
            "elapsed_time": 398.2886564731598,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697123275.183155,
            "elapsed_time": 399.69779109954834,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697166444.319608,
            "elapsed_time": 326.8197295665741,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697209625.531064,
            "elapsed_time": 385.5255534648895,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697252835.039832,
            "elapsed_time": 329.3504796028137,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697296003.77781,
            "elapsed_time": 312.079048871994,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697339226.230551,
            "elapsed_time": 327.15913581848145,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231007.121338-eap02",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1697365203.578639,
            "elapsed_time": 333.67745447158813,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697366839.720761,
            "elapsed_time": 322.49804949760437,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697382402.544126,
            "elapsed_time": 315.1997082233429,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697425641.282781,
            "elapsed_time": 405.14200043678284,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697468860.53205,
            "elapsed_time": 407.3013598918915,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697512083.084781,
            "elapsed_time": 469.5822002887726,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697555279.234664,
            "elapsed_time": 406.3833169937134,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697598545.883523,
            "elapsed_time": 342.7081723213196,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697641631.197684,
            "elapsed_time": 360.5621454715729,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697684799.894864,
            "elapsed_time": 346.91125750541687,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697728130.576713,
            "elapsed_time": 349.65306639671326,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697771239.746474,
            "elapsed_time": 329.97433280944824,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697814420.350376,
            "elapsed_time": 411.0047414302826,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231013.113827-eap03",
            "error_mismatch": true,
            "project": null,
            "timestamp": 1697826308.517301,
            "elapsed_time": 348.094172000885,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697857663.378597,
            "elapsed_time": 332.2344880104065,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697900877.298414,
            "elapsed_time": 379.0022804737091,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697943993.415352,
            "elapsed_time": 361.6878561973572,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20230922.73406-eap01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1697987185.395726,
            "elapsed_time": 315.001690864563,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698075169.724076,
            "elapsed_time": 405.95496821403503,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/Roblox/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698203226.145885,
            "elapsed_time": 381.6715741157532,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698246438.114661,
            "elapsed_time": 385.195374250412,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698289675.26012,
            "elapsed_time": 368.1025929450989,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698332910.332713,
            "elapsed_time": 347.08202385902405,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698376038.233662,
            "elapsed_time": 385.5325138568878,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698419273.091938,
            "elapsed_time": 318.658616065979,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698462398.93865,
            "elapsed_time": 373.4336371421814,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698505650.934508,
            "elapsed_time": 330.96046566963196,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698548817.289536,
            "elapsed_time": 332.19961190223694,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698592027.950361,
            "elapsed_time": 385.3000922203064,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698635198.956415,
            "elapsed_time": 311.06097054481506,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698678418.067196,
            "elapsed_time": 393.7800934314728,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698721618.339031,
            "elapsed_time": 348.1330852508545,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698764859.654855,
            "elapsed_time": 403.14108753204346,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231019.194555-eap04",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698808016.600652,
            "elapsed_time": 420.6146113872528,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698848367.609762,
            "elapsed_time": 365.03629994392395,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698851390.449498,
            "elapsed_time": 337.2856032848358,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698894447.555339,
            "elapsed_time": 317.7749328613281,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698937660.026259,
            "elapsed_time": 256.8757858276367,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1698980902.687994,
            "elapsed_time": 395.23780846595764,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699024028.573037,
            "elapsed_time": 381.92109084129333,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699067211.595998,
            "elapsed_time": 310.74043798446655,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699110349.479285,
            "elapsed_time": 306.5536370277405,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699153617.583199,
            "elapsed_time": 237.91213178634644,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699196777.280443,
            "elapsed_time": 367.92352986335754,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699240022.214198,
            "elapsed_time": 253.7947494983673,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699283233.304187,
            "elapsed_time": 248.73396492004395,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699326380.896069,
            "elapsed_time": 225.02017307281494,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699369674.584097,
            "elapsed_time": 351.8652606010437,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699412848.032642,
            "elapsed_time": 402.2897136211395,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699456053.992567,
            "elapsed_time": 250.45730900764465,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699499225.615947,
            "elapsed_time": 251.8651261329651,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699542424.630183,
            "elapsed_time": 409.2436842918396,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699585700.076539,
            "elapsed_time": 259.0800588130951,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699628830.32723,
            "elapsed_time": 324.07400727272034,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699672188.755652,
            "elapsed_time": 329.0929172039032,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699715193.118998,
            "elapsed_time": 427.7692754268646,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231029.171547-eap05",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699758411.019489,
            "elapsed_time": 380.7941014766693,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699787666.099589,
            "elapsed_time": 232.60608077049255,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699801575.523237,
            "elapsed_time": 312.7470636367798,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699844863.464229,
            "elapsed_time": 250.52843832969666,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699888081.897783,
            "elapsed_time": 406.0050916671753,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699931209.62379,
            "elapsed_time": 233.61155009269714,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1699974399.331908,
            "elapsed_time": 221.68986415863037,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231104.234410-eap06",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700017621.775085,
            "elapsed_time": 254.47948622703552,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700036858.872498,
            "elapsed_time": 258.13196897506714,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700060842.210557,
            "elapsed_time": 254.0335991382599,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700103974.918038,
            "elapsed_time": 221.53813123703003,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700147266.479947,
            "elapsed_time": 245.6889796257019,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700190457.635578,
            "elapsed_time": 253.68371105194092,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700233606.996751,
            "elapsed_time": 254.83623933792114,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700276852.139232,
            "elapsed_time": 250.61748147010803,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700320004.867737,
            "elapsed_time": 241.77223658561707,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700363215.587836,
            "elapsed_time": 244.73269653320312,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700406365.015496,
            "elapsed_time": 215.23073887825012,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700449604.818267,
            "elapsed_time": 237.51478338241577,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700492823.941355,
            "elapsed_time": 247.31098127365112,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700536068.944316,
            "elapsed_time": 255.65335845947266,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "232.0.20231101.135615",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700566664.211023,
            "elapsed_time": 221.50968480110168,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20231120.201033-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700573742.13106,
            "elapsed_time": 245.7702512741089,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20231121.214-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700575185.37966,
            "elapsed_time": 263.09071946144104,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700579276.605341,
            "elapsed_time": 248.79943537712097,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700622425.844178,
            "elapsed_time": 246.95962405204773,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231122.307-eap09d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700641554.808485,
            "elapsed_time": 235.11179947853088,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700665583.572033,
            "elapsed_time": 225.4827013015747,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231113.130711-eap07",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700708854.878061,
            "elapsed_time": 251.88182759284973,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700740330.395149,
            "elapsed_time": 237.7144796848297,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700751972.736257,
            "elapsed_time": 218.0108835697174,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700795196.92812,
            "elapsed_time": 224.08140873908997,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700838374.7682,
            "elapsed_time": 228.84548497200012,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700881678.952315,
            "elapsed_time": 255.47185730934143,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700924816.820788,
            "elapsed_time": 243.9754934310913,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1700968069.034242,
            "elapsed_time": 250.81356573104858,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701011193.420551,
            "elapsed_time": 235.90208101272583,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701054384.762689,
            "elapsed_time": 234.3982970714569,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701097598.549841,
            "elapsed_time": 240.24261713027954,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701140800.782343,
            "elapsed_time": 225.56788635253906,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701183989.519602,
            "elapsed_time": 235.62359070777893,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701227258.307651,
            "elapsed_time": 246.49960613250732,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701270393.216183,
            "elapsed_time": 243.0117039680481,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701356963.182561,
            "elapsed_time": 294.6383857727051,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701400046.079458,
            "elapsed_time": 239.8243386745453,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701443258.833822,
            "elapsed_time": 237.81301093101501,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701486431.290932,
            "elapsed_time": 262.69769382476807,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701529652.782961,
            "elapsed_time": 257.6028413772583,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231119.234619-eap08",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701572829.466224,
            "elapsed_time": 251.98064374923706,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701590417.542698,
            "elapsed_time": 217.66362953186035,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701598946.105042,
            "elapsed_time": 254.8860626220703,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701616011.767002,
            "elapsed_time": 238.21820545196533,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701659222.727128,
            "elapsed_time": 224.10319638252258,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701678639.538366,
            "elapsed_time": 218.78632140159607,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701702821.857223,
            "elapsed_time": 232.92815446853638,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701746019.593472,
            "elapsed_time": 219.08733940124512,
            "x64": false,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701789201.349414,
            "elapsed_time": 213.25420260429382,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27088.093292236328,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701832449.272629,
            "elapsed_time": 230.49969863891602,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27053.960723876953,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701875663.963158,
            "elapsed_time": 213.85865950584412,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27073.72801208496,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231128.202159-rc01",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701918873.134761,
            "elapsed_time": 216.70374870300293,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27094.19716644287,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701942751.135944,
            "elapsed_time": 213.96221375465393,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27121.98518371582,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20231206.222733-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701945050.711222,
            "elapsed_time": 204.43374586105347,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 22155.011016845703,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1701962025.041761,
            "elapsed_time": 218.88350081443787,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27109.66407775879,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702005232.369166,
            "elapsed_time": 210.39959359169006,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27138.108055114746,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702048519.005578,
            "elapsed_time": 223.41638255119324,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27114.93589782715,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702091610.074445,
            "elapsed_time": 209.6645519733429,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27153.611328125,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702134909.831234,
            "elapsed_time": 225.21005964279175,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27051.20125579834,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702178004.578685,
            "elapsed_time": 207.25110363960266,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27167.93906402588,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702221162.770293,
            "elapsed_time": 212.5252833366394,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27171.696090698242,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702264406.234198,
            "elapsed_time": 201.82093930244446,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27205.88059234619,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702307675.533092,
            "elapsed_time": 220.43280863761902,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27056.056037902832,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702350828.435496,
            "elapsed_time": 220.84949016571045,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27102.186027526855,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702394060.08292,
            "elapsed_time": 221.36953043937683,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27130.00429534912,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702437190.915757,
            "elapsed_time": 212.00133299827576,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27153.689643859863,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702480435.318957,
            "elapsed_time": 227.7255654335022,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27109.913383483887,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702523571.435908,
            "elapsed_time": 211.00675892829895,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27106.68128967285,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702566861.88629,
            "elapsed_time": 224.51999020576477,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27049.19637298584,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702610013.967086,
            "elapsed_time": 227.35380244255066,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 26908.362380981445,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702653243.45242,
            "elapsed_time": 207.60386037826538,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27041.87180328369,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702696426.582418,
            "elapsed_time": 209.39538502693176,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27071.53343963623,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702739606.852981,
            "elapsed_time": 223.61754393577576,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27111.559844970703,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702782798.099505,
            "elapsed_time": 223.3260462284088,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27064.442459106445,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702825950.344742,
            "elapsed_time": 208.08244156837463,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27090.42657470703,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702869207.650814,
            "elapsed_time": 217.43893456459045,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27034.855995178223,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702912391.893091,
            "elapsed_time": 206.78108477592468,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27171.231552124023,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702955549.675019,
            "elapsed_time": 208.69590258598328,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27173.850395202637,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1702998819.271033,
            "elapsed_time": 228.9852864742279,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 26943.48143005371,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703042041.98417,
            "elapsed_time": 226.048730134964,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 26947.22988128662,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703085386.701396,
            "elapsed_time": 220.11810779571533,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27048.296463012695,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231204.3905",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703128480.860495,
            "elapsed_time": 219.1629283428192,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27098.826133728027,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703162609.478202,
            "elapsed_time": 230.9006679058075,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27070.2498626709,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703171661.903989,
            "elapsed_time": 216.2049684524536,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27138.903594970703,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703214708.611932,
            "elapsed_time": 209.42007732391357,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27188.388626098633,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703257921.206116,
            "elapsed_time": 222.60670351982117,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27073.61296081543,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703301240.15325,
            "elapsed_time": 231.57039427757263,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27088.575271606445,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703344342.484204,
            "elapsed_time": 204.81604075431824,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27075.55864715576,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703387517.715113,
            "elapsed_time": 204.0002384185791,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27097.70403289795,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703430696.551318,
            "elapsed_time": 216.13798570632935,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27092.965522766113,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703474022.282765,
            "elapsed_time": 225.55029487609863,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27005.44313812256,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703517087.658727,
            "elapsed_time": 208.17409372329712,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27106.582962036133,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703560344.303586,
            "elapsed_time": 207.7083034515381,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27125.585159301758,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703603499.688743,
            "elapsed_time": 202.9395182132721,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27158.069679260254,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703646727.12647,
            "elapsed_time": 216.88906288146973,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27114.423263549805,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703671920.579517,
            "elapsed_time": 216.61111092567444,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27081.538513183594,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703689992.741169,
            "elapsed_time": 234.28985381126404,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 26872.016960144043,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703733144.292961,
            "elapsed_time": 211.10894918441772,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27179.557807922363,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703776327.70721,
            "elapsed_time": 215.0529007911682,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27074.323036193848,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703819728.082595,
            "elapsed_time": 222.9254231452942,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27094.978561401367,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703862759.140956,
            "elapsed_time": 215.805890083313,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27080.504806518555,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703905985.303442,
            "elapsed_time": 216.24015021324158,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27073.519828796387,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703949198.233725,
            "elapsed_time": 213.95306634902954,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27076.666999816895,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1703992305.615983,
            "elapsed_time": 213.26165103912354,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27148.415229797363,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704035563.286368,
            "elapsed_time": 215.39490461349487,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27008.288650512695,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704078830.903429,
            "elapsed_time": 215.42602443695068,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27089.9002532959,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704121914.035313,
            "elapsed_time": 213.48459911346436,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27109.17113494873,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704165092.358348,
            "elapsed_time": 210.14464497566223,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27158.650283813477,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704208401.956913,
            "elapsed_time": 212.13277530670166,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27114.357429504395,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704251580.780233,
            "elapsed_time": 211.5248668193817,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27093.053092956543,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704294753.476609,
            "elapsed_time": 212.35975217819214,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27183.317543029785,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704337987.860186,
            "elapsed_time": 215.275128364563,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 26996.52931213379,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704381236.662661,
            "elapsed_time": 219.61616325378418,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27075.289741516113,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704424467.67809,
            "elapsed_time": 224.54191875457764,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27074.31243133545,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704467695.639795,
            "elapsed_time": 221.3867347240448,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27066.384651184082,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704510795.608753,
            "elapsed_time": 213.67478132247925,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27095.039527893066,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704554052.366422,
            "elapsed_time": 214.21111154556274,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27107.150886535645,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704597205.895515,
            "elapsed_time": 204.61895489692688,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27129.344024658203,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704640329.026858,
            "elapsed_time": 206.7869734764099,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27112.573905944824,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704683616.394732,
            "elapsed_time": 214.03993129730225,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27104.140922546387,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "233.0.20231218.102231",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704726803.725538,
            "elapsed_time": 210.5354824066162,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 27109.80393218994,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704732126.298123,
            "elapsed_time": 199.68968892097473,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24985.966438293457,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704769982.385743,
            "elapsed_time": 198.78070783615112,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24992.394874572754,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704808224.099656,
            "elapsed_time": 218.13421535491943,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24715.15647125244,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704810714.450311,
            "elapsed_time": 213.3593533039093,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24761.02410888672,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704813124.843983,
            "elapsed_time": 195.69644689559937,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24957.962463378906,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704813914.119557,
            "elapsed_time": 200.45819282531738,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24949.137084960938,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704820496.668314,
            "elapsed_time": 226.6402564048767,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24948.470413208008,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704856478.00956,
            "elapsed_time": 221.47588443756104,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24948.73496246338,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704899604.734621,
            "elapsed_time": 209.47289848327637,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24807.047927856445,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704942584.337587,
            "elapsed_time": 221.96404385566711,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24975.292114257812,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240108.83533-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1704985805.642744,
            "elapsed_time": 197.6809766292572,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24947.519134521484,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240111.164711-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705652776.257714,
            "elapsed_time": 212.1239731311798,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24933.397216796875,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.32221-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705655531.154075,
            "elapsed_time": 214.5313858985901,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24979.916374206543,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.32221-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705677187.095714,
            "elapsed_time": 198.8077096939087,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24931.19645690918,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.32221-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705720455.360235,
            "elapsed_time": 257.62128138542175,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24903.04647064209,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705740725.205604,
            "elapsed_time": 189.51710486412048,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24856.67478942871,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705763647.009571,
            "elapsed_time": 220.78806161880493,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24830.882125854492,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705806763.99749,
            "elapsed_time": 197.00725436210632,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24931.747329711914,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705850002.777798,
            "elapsed_time": 212.59488248825073,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24843.166297912598,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705893165.663138,
            "elapsed_time": 199.08076190948486,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24897.589279174805,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705936460.773291,
            "elapsed_time": 200.26071953773499,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24835.51212310791,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1705979685.945163,
            "elapsed_time": 210.13978719711304,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24840.45090484619,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706022869.257854,
            "elapsed_time": 210.80270314216614,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24837.577796936035,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706066153.420581,
            "elapsed_time": 242.31332516670227,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24874.60964202881,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706109271.431405,
            "elapsed_time": 295.5946671962738,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24461.772399902344,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706152469.225179,
            "elapsed_time": 222.63259077072144,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24817.962356567383,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706195733.730177,
            "elapsed_time": 211.43187475204468,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24845.80069732666,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706238940.439796,
            "elapsed_time": 208.08109712600708,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24824.146209716797,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706282082.128433,
            "elapsed_time": 218.45952439308167,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24808.67279815674,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706325242.109438,
            "elapsed_time": 200.49300050735474,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24904.341873168945,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706368389.270855,
            "elapsed_time": 198.6041295528412,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24864.32901763916,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706411578.83228,
            "elapsed_time": 208.1941521167755,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24805.726623535156,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706454738.532328,
            "elapsed_time": 192.98883152008057,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24854.60541534424,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706498064.862693,
            "elapsed_time": 224.4507176876068,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24823.856422424316,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706541291.324722,
            "elapsed_time": 210.08084321022034,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24750.466270446777,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706584505.407271,
            "elapsed_time": 227.11940670013428,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24899.751487731934,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706627703.886345,
            "elapsed_time": 207.4558973312378,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24831.396171569824,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706670952.886092,
            "elapsed_time": 239.34609603881836,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24635.796157836914,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706714199.589522,
            "elapsed_time": 225.28396677970886,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24793.56869506836,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706757406.145015,
            "elapsed_time": 231.39812564849854,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24688.588569641113,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706800474.638379,
            "elapsed_time": 216.09910321235657,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24872.393348693848,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240119.171944-eap01d",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706843647.183383,
            "elapsed_time": 214.91843700408936,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24668.19492340088,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240201.93040-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706884353.925208,
            "elapsed_time": 213.2140200138092,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 25031.097686767578,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240201.93040-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1706973267.085164,
            "elapsed_time": 215.39642882347107,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 24858.737701416016,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240201.93040-eap03",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1707016442.090211,
            "elapsed_time": 206.21113681793213,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 25041.440658569336,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713604683.169304,
            "elapsed_time": 182.21829533576965,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23376.652976989746,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713625840.344502,
            "elapsed_time": 189.60984420776367,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23378.337768554688,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713669149.603378,
            "elapsed_time": 181.97514653205872,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23413.98309326172,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713712263.443632,
            "elapsed_time": 185.74079394340515,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23366.10942840576,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713755483.946524,
            "elapsed_time": 187.06502223014832,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23399.16022491455,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713798760.500359,
            "elapsed_time": 220.4193205833435,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23356.158142089844,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713841933.106692,
            "elapsed_time": 183.79465436935425,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23390.716018676758,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713885118.9047,
            "elapsed_time": 186.99124026298523,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23401.420349121094,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713928432.134173,
            "elapsed_time": 208.87685441970825,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23216.930389404297,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1713971854.676631,
            "elapsed_time": 208.4918613433838,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23276.271377563477,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714014830.572956,
            "elapsed_time": 194.57970190048218,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23229.43416595459,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714058057.94809,
            "elapsed_time": 216.70359325408936,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23276.970596313477,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714101187.616465,
            "elapsed_time": 203.28787755966187,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23359.157402038574,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714144393.279139,
            "elapsed_time": 192.75754404067993,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23207.878059387207,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714187634.845114,
            "elapsed_time": 202.19006061553955,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23213.860778808594,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714230644.117073,
            "elapsed_time": 196.14997005462646,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23221.567527770996,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714273948.618185,
            "elapsed_time": 190.82585549354553,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23236.86240386963,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714317169.990553,
            "elapsed_time": 181.45437335968018,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23266.613609313965,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714360412.392869,
            "elapsed_time": 186.53802347183228,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23326.634254455566,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714403638.931556,
            "elapsed_time": 196.99671292304993,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23188.616760253906,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        },
        {
            "tool_version": "241.0.20240415.221055",
            "error_mismatch": false,
            "project": null,
            "timestamp": 1714446794.226747,
            "elapsed_time": 208.20412254333496,
            "x64": true,
            "actual_files_count": 379,
            "expected_files_count": 379,
            "memory_traffic": 23204.713554382324,
            "repo_url": "https://github.com/luau-lang/luau",
            "commit_ref": "721f6e10fbdb25909e020351dc7130393201da8d",
            "commit_message": "Sync to upstream/release/577 (#934)\n\nLots of things going on this week:\r\n\r\n* Fix a crash that could occur in the presence of a cyclic union. We\r\nshouldn't be creating cyclic unions, but we shouldn't be crashing when\r\nthey arise either.\r\n* Minor cleanup of `luau_precall`\r\n* Internal change to make L->top handling slightly more uniform\r\n* Optimize SETGLOBAL & GETGLOBAL fallback C functions.\r\n* https://github.com/Roblox/luau/pull/929\r\n* The syntax to the `luau-reduce` commandline tool has changed. It now\r\naccepts a script, a command to execute, and an error to search for. It\r\nno longer automatically passes the script to the command which makes it\r\na lot more flexible. Also be warned that it edits the script it is\r\npassed **in place**. Do not point it at something that is not in source\r\ncontrol!\r\n\r\nNew solver\r\n\r\n* Switch to a greedier but more fallible algorithm for simplifying union\r\nand intersection types that are created as part of refinement\r\ncalculation. This has much better and more predictable performance.\r\n* Fix a constraint cycle in recursive function calls.\r\n* Much improved inference of binary addition. Functions like `function\r\nadd(x, y) return x + y end` can now be inferred without annotations. We\r\nalso accurately typecheck calls to functions like this.\r\n* Many small bugfixes surrounding things like table indexers\r\n* Add support for indexers on class types. This was previously added to\r\nthe old solver; we now add it to the new one for feature parity.\r\n\r\nJIT\r\n\r\n* https://github.com/Roblox/luau/pull/931\r\n* Fuse key.value and key.tt loads for CEHCK_SLOT_MATCH in A64\r\n* Implement remaining aliases of BFM for A64\r\n* Implement new callinfo flag for A64\r\n* Add instruction simplification for int->num->int conversion chains\r\n* Don't even load execdata for X64 calls\r\n* Treat opcode fallbacks the same as manually written fallbacks\r\n\r\n---------\r\n\r\nCo-authored-by: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>\r\nCo-authored-by: Vyacheslav Egorov <vegorov@roblox.com>",
            "commit_timestamp": 1684525050.0
        }
    ]
}